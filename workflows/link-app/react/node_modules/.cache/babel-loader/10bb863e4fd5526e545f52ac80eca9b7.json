{"ast":null,"code":"import readByte from '../byte/read';\n/**\n * Returns an Array containing bitLength bits starting at bitOffset.\n *\n * @example\n * readBuffer(buffer, 2, 4) => [0,0,1,0]\n *\n * @param {Buffer} buffer the buffer to read\n * @param {Number} offset where to start (in bits)\n * @param {Number} length how many bits to read\n * @returns {Array}\n */\nexport default (function (buffer, offset, length) {\n  if (offset === void 0) {\n    offset = 0;\n  }\n  if (!length) length = buffer.length * 8 - offset;\n  var start = Math.floor(offset / 8);\n  var bytesToRead = Math.floor(length / 8) + 2;\n  var arr = [];\n  arr.length = bytesToRead * 8;\n  for (var i = 0; i < bytesToRead; i++) {\n    var toRead = buffer[start + i];\n    if (toRead === undefined) continue;\n    var bits = readByte(buffer[start + i]);\n    arr[i * 8] = bits[0];\n    arr[i * 8 + 1] = bits[1];\n    arr[i * 8 + 2] = bits[2];\n    arr[i * 8 + 3] = bits[3];\n    arr[i * 8 + 4] = bits[4];\n    arr[i * 8 + 5] = bits[5];\n    arr[i * 8 + 6] = bits[6];\n    arr[i * 8 + 7] = bits[7];\n  }\n  var subOffset = offset % 8;\n  return arr.slice(subOffset, subOffset + length);\n});","map":{"version":3,"names":["readByte","buffer","offset","length","start","Math","floor","bytesToRead","arr","i","toRead","undefined","bits","subOffset","slice"],"sources":["/Users/arthurfrancis/Documents/repo/imx-reactjs-integration-example/node_modules/bitwise/esm/buffer/read.js"],"sourcesContent":["import readByte from '../byte/read';\n/**\n * Returns an Array containing bitLength bits starting at bitOffset.\n *\n * @example\n * readBuffer(buffer, 2, 4) => [0,0,1,0]\n *\n * @param {Buffer} buffer the buffer to read\n * @param {Number} offset where to start (in bits)\n * @param {Number} length how many bits to read\n * @returns {Array}\n */\nexport default (function (buffer, offset, length) {\n    if (offset === void 0) { offset = 0; }\n    if (!length)\n        length = buffer.length * 8 - offset;\n    var start = Math.floor(offset / 8);\n    var bytesToRead = Math.floor(length / 8) + 2;\n    var arr = [];\n    arr.length = bytesToRead * 8;\n    for (var i = 0; i < bytesToRead; i++) {\n        var toRead = buffer[start + i];\n        if (toRead === undefined)\n            continue;\n        var bits = readByte(buffer[start + i]);\n        arr[i * 8] = bits[0];\n        arr[i * 8 + 1] = bits[1];\n        arr[i * 8 + 2] = bits[2];\n        arr[i * 8 + 3] = bits[3];\n        arr[i * 8 + 4] = bits[4];\n        arr[i * 8 + 5] = bits[5];\n        arr[i * 8 + 6] = bits[6];\n        arr[i * 8 + 7] = bits[7];\n    }\n    var subOffset = offset % 8;\n    return arr.slice(subOffset, subOffset + length);\n});\n"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,cAAc;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,UAAUC,MAAM,EAAEC,MAAM,EAAEC,MAAM,EAAE;EAC9C,IAAID,MAAM,KAAK,KAAK,CAAC,EAAE;IAAEA,MAAM,GAAG,CAAC;EAAE;EACrC,IAAI,CAACC,MAAM,EACPA,MAAM,GAAGF,MAAM,CAACE,MAAM,GAAG,CAAC,GAAGD,MAAM;EACvC,IAAIE,KAAK,GAAGC,IAAI,CAACC,KAAK,CAACJ,MAAM,GAAG,CAAC,CAAC;EAClC,IAAIK,WAAW,GAAGF,IAAI,CAACC,KAAK,CAACH,MAAM,GAAG,CAAC,CAAC,GAAG,CAAC;EAC5C,IAAIK,GAAG,GAAG,EAAE;EACZA,GAAG,CAACL,MAAM,GAAGI,WAAW,GAAG,CAAC;EAC5B,KAAK,IAAIE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,WAAW,EAAEE,CAAC,EAAE,EAAE;IAClC,IAAIC,MAAM,GAAGT,MAAM,CAACG,KAAK,GAAGK,CAAC,CAAC;IAC9B,IAAIC,MAAM,KAAKC,SAAS,EACpB;IACJ,IAAIC,IAAI,GAAGZ,QAAQ,CAACC,MAAM,CAACG,KAAK,GAAGK,CAAC,CAAC,CAAC;IACtCD,GAAG,CAACC,CAAC,GAAG,CAAC,CAAC,GAAGG,IAAI,CAAC,CAAC,CAAC;IACpBJ,GAAG,CAACC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAGG,IAAI,CAAC,CAAC,CAAC;IACxBJ,GAAG,CAACC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAGG,IAAI,CAAC,CAAC,CAAC;IACxBJ,GAAG,CAACC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAGG,IAAI,CAAC,CAAC,CAAC;IACxBJ,GAAG,CAACC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAGG,IAAI,CAAC,CAAC,CAAC;IACxBJ,GAAG,CAACC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAGG,IAAI,CAAC,CAAC,CAAC;IACxBJ,GAAG,CAACC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAGG,IAAI,CAAC,CAAC,CAAC;IACxBJ,GAAG,CAACC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAGG,IAAI,CAAC,CAAC,CAAC;EAC5B;EACA,IAAIC,SAAS,GAAGX,MAAM,GAAG,CAAC;EAC1B,OAAOM,GAAG,CAACM,KAAK,CAACD,SAAS,EAAEA,SAAS,GAAGV,MAAM,CAAC;AACnD,CAAC"},"metadata":{},"sourceType":"module"}
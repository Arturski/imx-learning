{"ast":null,"code":"/**\n * Applies the NOR operation, expects two arrays of the same size and returns a new one.\n *\n * @example\n * nor([1,0,0,0,1,1,0,1], [0,1,1,0,0,1,0,0]) => [0,0,0,1,0,0,1,0]\n *\n * @param {Array} bits1 input data\n * @param {Array} bits2 input data\n * @return {Array} [bits1 NOR bits2]\n */\nexport default (function (bits1, bits2) {\n  var result = [];\n  for (var i = 0; i < bits1.length; i++) result[i] = (bits1[i] | bits2[i]) ^ 1;\n  return result;\n});","map":{"version":3,"names":["bits1","bits2","result","i","length"],"sources":["/Users/arthurfrancis/Documents/repo/imx-learning/workflows/link-app/react/node_modules/bitwise/esm/bits/nor.js"],"sourcesContent":["/**\n * Applies the NOR operation, expects two arrays of the same size and returns a new one.\n *\n * @example\n * nor([1,0,0,0,1,1,0,1], [0,1,1,0,0,1,0,0]) => [0,0,0,1,0,0,1,0]\n *\n * @param {Array} bits1 input data\n * @param {Array} bits2 input data\n * @return {Array} [bits1 NOR bits2]\n */\nexport default (function (bits1, bits2) {\n    var result = [];\n    for (var i = 0; i < bits1.length; i++)\n        result[i] = ((bits1[i] | bits2[i]) ^ 1);\n    return result;\n});\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,UAAUA,KAAK,EAAEC,KAAK,EAAE;EACpC,IAAIC,MAAM,GAAG,EAAE;EACf,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,KAAK,CAACI,MAAM,EAAED,CAAC,EAAE,EACjCD,MAAM,CAACC,CAAC,CAAC,GAAI,CAACH,KAAK,CAACG,CAAC,CAAC,GAAGF,KAAK,CAACE,CAAC,CAAC,IAAI,CAAE;EAC3C,OAAOD,MAAM;AACjB,CAAC"},"metadata":{},"sourceType":"module"}
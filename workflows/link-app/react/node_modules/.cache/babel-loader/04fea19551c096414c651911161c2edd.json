{"ast":null,"code":"\"use strict\";\n\nimport { ethers } from \"ethers\";\n// @TODO: Keep a per-NonceManager pool of sent but unmined transactions for\n//        rebroadcasting, in case we overrun the transaction pool\nexport class NonceManager extends ethers.Signer {\n  constructor(signer) {\n    super();\n    this._deltaCount = 0;\n    ethers.utils.defineReadOnly(this, \"signer\", signer);\n    ethers.utils.defineReadOnly(this, \"provider\", signer.provider || null);\n  }\n  connect(provider) {\n    return new NonceManager(this.signer.connect(provider));\n  }\n  getAddress() {\n    return this.signer.getAddress();\n  }\n  getTransactionCount(blockTag) {\n    if (blockTag === \"pending\") {\n      if (!this._initialPromise) {\n        this._initialPromise = this.signer.getTransactionCount(\"pending\");\n      }\n      const deltaCount = this._deltaCount;\n      return this._initialPromise.then(initial => initial + deltaCount);\n    }\n    return this.signer.getTransactionCount(blockTag);\n  }\n  setTransactionCount(transactionCount) {\n    this._initialPromise = Promise.resolve(transactionCount).then(nonce => {\n      return ethers.BigNumber.from(nonce).toNumber();\n    });\n    this._deltaCount = 0;\n  }\n  incrementTransactionCount(count) {\n    this._deltaCount += count == null ? 1 : count;\n  }\n  signMessage(message) {\n    return this.signer.signMessage(message);\n    ;\n  }\n  signTransaction(transaction) {\n    return this.signer.signTransaction(transaction);\n  }\n  sendTransaction(transaction) {\n    if (transaction.nonce == null) {\n      transaction = ethers.utils.shallowCopy(transaction);\n      transaction.nonce = this.getTransactionCount(\"pending\");\n      this.incrementTransactionCount();\n    } else {\n      this.setTransactionCount(transaction.nonce);\n      this._deltaCount++;\n    }\n    return this.signer.sendTransaction(transaction).then(tx => {\n      return tx;\n    });\n  }\n}","map":{"version":3,"mappings":"AAAA,YAAY;;AAEZ,SAASA,MAAM,QAAQ,QAAQ;AAE/B;AACA;AAEA,OAAM,MAAOC,YAAa,SAAQD,MAAM,CAACE,MAAM;EAM3CC,YAAYC,MAAqB;IAC7B,KAAK,EAAE;IACP,IAAI,CAACC,WAAW,GAAG,CAAC;IACpBL,MAAM,CAACM,KAAK,CAACC,cAAc,CAAC,IAAI,EAAE,QAAQ,EAAEH,MAAM,CAAC;IACnDJ,MAAM,CAACM,KAAK,CAACC,cAAc,CAAC,IAAI,EAAE,UAAU,EAAEH,MAAM,CAACI,QAAQ,IAAI,IAAI,CAAC;EAC1E;EAEAC,OAAO,CAACD,QAAmC;IACvC,OAAO,IAAIP,YAAY,CAAC,IAAI,CAACG,MAAM,CAACK,OAAO,CAACD,QAAQ,CAAC,CAAC;EAC1D;EAEAE,UAAU;IACN,OAAO,IAAI,CAACN,MAAM,CAACM,UAAU,EAAE;EACnC;EAEAC,mBAAmB,CAACC,QAAoC;IACpD,IAAIA,QAAQ,KAAK,SAAS,EAAE;MACxB,IAAI,CAAC,IAAI,CAACC,eAAe,EAAE;QACvB,IAAI,CAACA,eAAe,GAAG,IAAI,CAACT,MAAM,CAACO,mBAAmB,CAAC,SAAS,CAAC;;MAErE,MAAMG,UAAU,GAAG,IAAI,CAACT,WAAW;MACnC,OAAO,IAAI,CAACQ,eAAe,CAACE,IAAI,CAAEC,OAAO,IAAMA,OAAO,GAAGF,UAAW,CAAC;;IAGzE,OAAO,IAAI,CAACV,MAAM,CAACO,mBAAmB,CAACC,QAAQ,CAAC;EACpD;EAEAK,mBAAmB,CAACC,gBAAoE;IACpF,IAAI,CAACL,eAAe,GAAGM,OAAO,CAACC,OAAO,CAACF,gBAAgB,CAAC,CAACH,IAAI,CAAEM,KAAK,IAAI;MACpE,OAAOrB,MAAM,CAACsB,SAAS,CAACC,IAAI,CAACF,KAAK,CAAC,CAACG,QAAQ,EAAE;IAClD,CAAC,CAAC;IACF,IAAI,CAACnB,WAAW,GAAG,CAAC;EACxB;EAEAoB,yBAAyB,CAACC,KAAc;IACpC,IAAI,CAACrB,WAAW,IAAMqB,KAAK,IAAI,IAAI,GAAI,CAAC,GAAEA,KAAM;EACpD;EAEAC,WAAW,CAACC,OAA8B;IACtC,OAAO,IAAI,CAACxB,MAAM,CAACuB,WAAW,CAACC,OAAO,CAAC;IAAC;EAC5C;EAEAC,eAAe,CAACC,WAAyE;IACrF,OAAO,IAAI,CAAC1B,MAAM,CAACyB,eAAe,CAACC,WAAW,CAAC;EACnD;EAEAC,eAAe,CAACD,WAAyE;IACrF,IAAIA,WAAW,CAACT,KAAK,IAAI,IAAI,EAAE;MAC3BS,WAAW,GAAG9B,MAAM,CAACM,KAAK,CAAC0B,WAAW,CAACF,WAAW,CAAC;MACnDA,WAAW,CAACT,KAAK,GAAG,IAAI,CAACV,mBAAmB,CAAC,SAAS,CAAC;MACvD,IAAI,CAACc,yBAAyB,EAAE;KACnC,MAAM;MACH,IAAI,CAACR,mBAAmB,CAACa,WAAW,CAACT,KAAK,CAAC;MAC3C,IAAI,CAAChB,WAAW,EAAE;;IAGtB,OAAO,IAAI,CAACD,MAAM,CAAC2B,eAAe,CAACD,WAAW,CAAC,CAACf,IAAI,CAAEkB,EAAE,IAAI;MACxD,OAAOA,EAAE;IACb,CAAC,CAAC;EACN","names":["ethers","NonceManager","Signer","constructor","signer","_deltaCount","utils","defineReadOnly","provider","connect","getAddress","getTransactionCount","blockTag","_initialPromise","deltaCount","then","initial","setTransactionCount","transactionCount","Promise","resolve","nonce","BigNumber","from","toNumber","incrementTransactionCount","count","signMessage","message","signTransaction","transaction","sendTransaction","shallowCopy","tx"],"sourceRoot":"","sources":["../src.ts/nonce-manager.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}
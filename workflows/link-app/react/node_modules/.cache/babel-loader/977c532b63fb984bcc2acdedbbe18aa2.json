{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getApplySemigroup = exports.getOrd = exports.getEq = exports.getShow = exports.URI = exports.wilt = exports.wither = exports.sequence = exports.traverse = exports.partitionMap = exports.partition = exports.filterMap = exports.filter = exports.separate = exports.compact = exports.reduceRight = exports.foldMap = exports.reduce = exports.duplicate = exports.extend = exports.throwError = exports.zero = exports.alt = exports.altW = exports.flatten = exports.chainFirst = exports.chain = exports.of = exports.apSecond = exports.apFirst = exports.ap = exports.map = exports.chainNullableK = exports.mapNullable = exports.fromNullableK = exports.getOrElse = exports.getOrElseW = exports.toUndefined = exports.toNullable = exports.fold = exports.fromEither = exports.getRight = exports.getLeft = exports.tryCatch = exports.fromPredicate = exports.fromNullable = exports.some = exports.none = exports.isNone = exports.isSome = void 0;\nexports.sequenceArray = exports.traverseArray = exports.traverseArrayWithIndex = exports.apS = exports.bind = exports.bindTo = exports.Do = exports.getRefinement = exports.exists = exports.elem = exports.option = exports.MonadThrow = exports.Witherable = exports.Traversable = exports.Filterable = exports.Compactable = exports.Extend = exports.Alternative = exports.Alt = exports.Foldable = exports.Monad = exports.Applicative = exports.Functor = exports.getMonoid = exports.getLastMonoid = exports.getFirstMonoid = exports.getApplyMonoid = void 0;\nvar function_1 = require(\"./function\");\n// -------------------------------------------------------------------------------------\n// guards\n// -------------------------------------------------------------------------------------\n/**\n * Returns `true` if the option is an instance of `Some`, `false` otherwise.\n *\n * @example\n * import { some, none, isSome } from 'fp-ts/Option'\n *\n * assert.strictEqual(isSome(some(1)), true)\n * assert.strictEqual(isSome(none), false)\n *\n * @category guards\n * @since 2.0.0\n */\nvar isSome = function (fa) {\n  return fa._tag === 'Some';\n};\nexports.isSome = isSome;\n/**\n * Returns `true` if the option is `None`, `false` otherwise.\n *\n * @example\n * import { some, none, isNone } from 'fp-ts/Option'\n *\n * assert.strictEqual(isNone(some(1)), false)\n * assert.strictEqual(isNone(none), true)\n *\n * @category guards\n * @since 2.0.0\n */\nvar isNone = function (fa) {\n  return fa._tag === 'None';\n};\nexports.isNone = isNone;\n// -------------------------------------------------------------------------------------\n// constructors\n// -------------------------------------------------------------------------------------\n/**\n * `None` doesn't have a constructor, instead you can use it directly as a value. Represents a missing value.\n *\n * @category constructors\n * @since 2.0.0\n */\nexports.none = {\n  _tag: 'None'\n};\n/**\n * Constructs a `Some`. Represents an optional value that exists.\n *\n * @category constructors\n * @since 2.0.0\n */\nvar some = function (a) {\n  return {\n    _tag: 'Some',\n    value: a\n  };\n};\nexports.some = some;\n/**\n * Constructs a new `Option` from a nullable type. If the value is `null` or `undefined`, returns `None`, otherwise\n * returns the value wrapped in a `Some`.\n *\n * @example\n * import { none, some, fromNullable } from 'fp-ts/Option'\n *\n * assert.deepStrictEqual(fromNullable(undefined), none)\n * assert.deepStrictEqual(fromNullable(null), none)\n * assert.deepStrictEqual(fromNullable(1), some(1))\n *\n * @category constructors\n * @since 2.0.0\n */\nfunction fromNullable(a) {\n  return a == null ? exports.none : exports.some(a);\n}\nexports.fromNullable = fromNullable;\nfunction fromPredicate(predicate) {\n  return function (a) {\n    return predicate(a) ? exports.some(a) : exports.none;\n  };\n}\nexports.fromPredicate = fromPredicate;\n/**\n * Transforms an exception into an `Option`. If `f` throws, returns `None`, otherwise returns the output wrapped in a\n * `Some`.\n *\n * @example\n * import { none, some, tryCatch } from 'fp-ts/Option'\n *\n * assert.deepStrictEqual(\n *   tryCatch(() => {\n *     throw new Error()\n *   }),\n *   none\n * )\n * assert.deepStrictEqual(tryCatch(() => 1), some(1))\n *\n * @category constructors\n * @since 2.0.0\n */\nfunction tryCatch(f) {\n  try {\n    return exports.some(f());\n  } catch (e) {\n    return exports.none;\n  }\n}\nexports.tryCatch = tryCatch;\n/**\n * Returns the `Left` value of an `Either` if possible.\n *\n * @example\n * import { getLeft, none, some } from 'fp-ts/Option'\n * import { right, left } from 'fp-ts/Either'\n *\n * assert.deepStrictEqual(getLeft(right(1)), none)\n * assert.deepStrictEqual(getLeft(left('a')), some('a'))\n *\n * @category constructors\n * @since 2.0.0\n */\nfunction getLeft(ma) {\n  return ma._tag === 'Right' ? exports.none : exports.some(ma.left);\n}\nexports.getLeft = getLeft;\n/**\n * Returns the `Right` value of an `Either` if possible.\n *\n * @example\n * import { getRight, none, some } from 'fp-ts/Option'\n * import { right, left } from 'fp-ts/Either'\n *\n * assert.deepStrictEqual(getRight(right(1)), some(1))\n * assert.deepStrictEqual(getRight(left('a')), none)\n *\n * @category constructors\n * @since 2.0.0\n */\nfunction getRight(ma) {\n  return ma._tag === 'Left' ? exports.none : exports.some(ma.right);\n}\nexports.getRight = getRight;\n/**\n * Transforms an `Either` to an `Option` discarding the error.\n *\n * Alias of [getRight](#getRight)\n *\n * Derivable from `MonadThrow`.\n *\n * @category constructors\n * @since 2.0.0\n */\nexports.fromEither = getRight;\n// -------------------------------------------------------------------------------------\n// destructors\n// -------------------------------------------------------------------------------------\n/**\n * Takes a (lazy) default value, a function, and an `Option` value, if the `Option` value is `None` the default value is\n * returned, otherwise the function is applied to the value inside the `Some` and the result is returned.\n *\n * @example\n * import { some, none, fold } from 'fp-ts/Option'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.strictEqual(\n *   pipe(\n *     some(1),\n *     fold(() => 'a none', a => `a some containing ${a}`)\n *   ),\n *   'a some containing 1'\n * )\n *\n * assert.strictEqual(\n *   pipe(\n *     none,\n *     fold(() => 'a none', a => `a some containing ${a}`)\n *   ),\n *   'a none'\n * )\n *\n * @category destructors\n * @since 2.0.0\n */\nfunction fold(onNone, onSome) {\n  return function (ma) {\n    return exports.isNone(ma) ? onNone() : onSome(ma.value);\n  };\n}\nexports.fold = fold;\n/**\n * Extracts the value out of the structure, if it exists. Otherwise returns `null`.\n *\n * @example\n * import { some, none, toNullable } from 'fp-ts/Option'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.strictEqual(\n *   pipe(\n *     some(1),\n *     toNullable\n *   ),\n *   1\n * )\n * assert.strictEqual(\n *   pipe(\n *     none,\n *     toNullable\n *   ),\n *   null\n * )\n *\n * @category destructors\n * @since 2.0.0\n */\nfunction toNullable(ma) {\n  return exports.isNone(ma) ? null : ma.value;\n}\nexports.toNullable = toNullable;\n/**\n * Extracts the value out of the structure, if it exists. Otherwise returns `undefined`.\n *\n * @example\n * import { some, none, toUndefined } from 'fp-ts/Option'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.strictEqual(\n *   pipe(\n *     some(1),\n *     toUndefined\n *   ),\n *   1\n * )\n * assert.strictEqual(\n *   pipe(\n *     none,\n *     toUndefined\n *   ),\n *   undefined\n * )\n *\n * @category destructors\n * @since 2.0.0\n */\nfunction toUndefined(ma) {\n  return exports.isNone(ma) ? undefined : ma.value;\n}\nexports.toUndefined = toUndefined;\n/**\n * Less strict version of [`getOrElse`](#getOrElse).\n *\n * @category destructors\n * @since 2.6.0\n */\nvar getOrElseW = function (onNone) {\n  return function (ma) {\n    return exports.isNone(ma) ? onNone() : ma.value;\n  };\n};\nexports.getOrElseW = getOrElseW;\n/**\n * Extracts the value out of the structure, if it exists. Otherwise returns the given default value\n *\n * @example\n * import { some, none, getOrElse } from 'fp-ts/Option'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.strictEqual(\n *   pipe(\n *     some(1),\n *     getOrElse(() => 0)\n *   ),\n *   1\n * )\n * assert.strictEqual(\n *   pipe(\n *     none,\n *     getOrElse(() => 0)\n *   ),\n *   0\n * )\n *\n * @category destructors\n * @since 2.0.0\n */\nexports.getOrElse = exports.getOrElseW;\n// -------------------------------------------------------------------------------------\n// combinators\n// -------------------------------------------------------------------------------------\n/**\n * Returns a *smart constructor* from a function that returns a nullable value.\n *\n * @example\n * import { fromNullableK, none, some } from 'fp-ts/Option'\n *\n * const f = (s: string): number | undefined => {\n *   const n = parseFloat(s)\n *   return isNaN(n) ? undefined : n\n * }\n *\n * const g = fromNullableK(f)\n *\n * assert.deepStrictEqual(g('1'), some(1))\n * assert.deepStrictEqual(g('a'), none)\n *\n * @category combinators\n * @since 2.9.0\n */\nfunction fromNullableK(f) {\n  return function () {\n    var a = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      a[_i] = arguments[_i];\n    }\n    return fromNullable(f.apply(void 0, a));\n  };\n}\nexports.fromNullableK = fromNullableK;\n/**\n * @category combinators\n * @since 2.0.0\n * @deprecated\n */\nexports.mapNullable = chainNullableK;\n/**\n * This is `chain` + `fromNullable`, useful when working with optional values.\n *\n * @example\n * import { some, none, fromNullable, chainNullableK } from 'fp-ts/Option'\n * import { pipe } from 'fp-ts/function'\n *\n * interface Employee {\n *   company?: {\n *     address?: {\n *       street?: {\n *         name?: string\n *       }\n *     }\n *   }\n * }\n *\n * const employee1: Employee = { company: { address: { street: { name: 'high street' } } } }\n *\n * assert.deepStrictEqual(\n *   pipe(\n *     fromNullable(employee1.company),\n *     chainNullableK(company => company.address),\n *     chainNullableK(address => address.street),\n *     chainNullableK(street => street.name)\n *   ),\n *   some('high street')\n * )\n *\n * const employee2: Employee = { company: { address: { street: {} } } }\n *\n * assert.deepStrictEqual(\n *   pipe(\n *     fromNullable(employee2.company),\n *     chainNullableK(company => company.address),\n *     chainNullableK(address => address.street),\n *     chainNullableK(street => street.name)\n *   ),\n *   none\n * )\n *\n * @category combinators\n * @since 2.9.0\n */\nfunction chainNullableK(f) {\n  return function (ma) {\n    return exports.isNone(ma) ? exports.none : fromNullable(f(ma.value));\n  };\n}\nexports.chainNullableK = chainNullableK;\n// -------------------------------------------------------------------------------------\n// non-pipeables\n// -------------------------------------------------------------------------------------\nvar map_ = function (fa, f) {\n  return function_1.pipe(fa, exports.map(f));\n};\nvar ap_ = function (fab, fa) {\n  return function_1.pipe(fab, exports.ap(fa));\n};\nvar chain_ = function (ma, f) {\n  return function_1.pipe(ma, exports.chain(f));\n};\nvar reduce_ = function (fa, b, f) {\n  return function_1.pipe(fa, exports.reduce(b, f));\n};\nvar foldMap_ = function (M) {\n  var foldMapM = exports.foldMap(M);\n  return function (fa, f) {\n    return function_1.pipe(fa, foldMapM(f));\n  };\n};\nvar reduceRight_ = function (fa, b, f) {\n  return function_1.pipe(fa, exports.reduceRight(b, f));\n};\nvar traverse_ = function (F) {\n  var traverseF = exports.traverse(F);\n  return function (ta, f) {\n    return function_1.pipe(ta, traverseF(f));\n  };\n};\n/* istanbul ignore next */\nvar alt_ = function (fa, that) {\n  return function_1.pipe(fa, exports.alt(that));\n};\nvar filter_ = function (fa, predicate) {\n  return function_1.pipe(fa, exports.filter(predicate));\n};\n/* istanbul ignore next */\nvar filterMap_ = function (fa, f) {\n  return function_1.pipe(fa, exports.filterMap(f));\n};\n/* istanbul ignore next */\nvar extend_ = function (wa, f) {\n  return function_1.pipe(wa, exports.extend(f));\n};\n/* istanbul ignore next */\nvar partition_ = function (fa, predicate) {\n  return function_1.pipe(fa, exports.partition(predicate));\n};\n/* istanbul ignore next */\nvar partitionMap_ = function (fa, f) {\n  return function_1.pipe(fa, exports.partitionMap(f));\n};\n/* istanbul ignore next */\nvar wither_ = function (F) {\n  var witherF = exports.wither(F);\n  return function (fa, f) {\n    return function_1.pipe(fa, witherF(f));\n  };\n};\n/* istanbul ignore next */\nvar wilt_ = function (F) {\n  var wiltF = exports.wilt(F);\n  return function (fa, f) {\n    return function_1.pipe(fa, wiltF(f));\n  };\n};\n// -------------------------------------------------------------------------------------\n// pipeables\n// -------------------------------------------------------------------------------------\n/**\n * `map` can be used to turn functions `(a: A) => B` into functions `(fa: F<A>) => F<B>` whose argument and return types\n * use the type constructor `F` to represent some computational context.\n *\n * @category Functor\n * @since 2.0.0\n */\nvar map = function (f) {\n  return function (fa) {\n    return exports.isNone(fa) ? exports.none : exports.some(f(fa.value));\n  };\n};\nexports.map = map;\n/**\n * Apply a function to an argument under a type constructor.\n *\n * @category Apply\n * @since 2.0.0\n */\nvar ap = function (fa) {\n  return function (fab) {\n    return exports.isNone(fab) ? exports.none : exports.isNone(fa) ? exports.none : exports.some(fab.value(fa.value));\n  };\n};\nexports.ap = ap;\n/**\n * Combine two effectful actions, keeping only the result of the first.\n *\n * Derivable from `Apply`.\n *\n * @category combinators\n * @since 2.0.0\n */\nvar apFirst = function (fb) {\n  return function_1.flow(exports.map(function (a) {\n    return function () {\n      return a;\n    };\n  }), exports.ap(fb));\n};\nexports.apFirst = apFirst;\n/**\n * Combine two effectful actions, keeping only the result of the second.\n *\n * Derivable from `Apply`.\n *\n * @category combinators\n * @since 2.0.0\n */\nvar apSecond = function (fb) {\n  return function_1.flow(exports.map(function () {\n    return function (b) {\n      return b;\n    };\n  }), exports.ap(fb));\n};\nexports.apSecond = apSecond;\n/**\n * Wrap a value into the type constructor.\n *\n * @category Applicative\n * @since 2.7.0\n */\nexports.of = exports.some;\n/**\n * Composes computations in sequence, using the return value of one computation to determine the next computation.\n *\n * @category Monad\n * @since 2.0.0\n */\nvar chain = function (f) {\n  return function (ma) {\n    return exports.isNone(ma) ? exports.none : f(ma.value);\n  };\n};\nexports.chain = chain;\n/**\n * Composes computations in sequence, using the return value of one computation to determine the next computation and\n * keeping only the result of the first.\n *\n * Derivable from `Monad`.\n *\n * @category combinators\n * @since 2.0.0\n */\nvar chainFirst = function (f) {\n  return exports.chain(function (a) {\n    return function_1.pipe(f(a), exports.map(function () {\n      return a;\n    }));\n  });\n};\nexports.chainFirst = chainFirst;\n/**\n * Derivable from `Monad`.\n *\n * @category combinators\n * @since 2.0.0\n */\nexports.flatten = /*#__PURE__*/\nexports.chain(function_1.identity);\n/**\n * Less strict version of [`alt`](#alt).\n *\n * @category Alt\n * @since 2.9.0\n */\nvar altW = function (that) {\n  return function (fa) {\n    return exports.isNone(fa) ? that() : fa;\n  };\n};\nexports.altW = altW;\n/**\n * Identifies an associative operation on a type constructor. It is similar to `Semigroup`, except that it applies to\n * types of kind `* -> *`.\n *\n * In case of `Option` returns the left-most non-`None` value.\n *\n * @example\n * import * as O from 'fp-ts/Option'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(\n *   pipe(\n *     O.some('a'),\n *     O.alt(() => O.some('b'))\n *   ),\n *   O.some('a')\n * )\n * assert.deepStrictEqual(\n *   pipe(\n *     O.none,\n *     O.alt(() => O.some('b'))\n *   ),\n *   O.some('b')\n * )\n *\n * @category Alt\n * @since 2.0.0\n */\nexports.alt = exports.altW;\n/**\n * @category Alternative\n * @since 2.7.0\n */\nvar zero = function () {\n  return exports.none;\n};\nexports.zero = zero;\n/**\n * @category MonadThrow\n * @since 2.7.0\n */\nvar throwError = function () {\n  return exports.none;\n};\nexports.throwError = throwError;\n/**\n * @category Extend\n * @since 2.0.0\n */\nvar extend = function (f) {\n  return function (wa) {\n    return exports.isNone(wa) ? exports.none : exports.some(f(wa));\n  };\n};\nexports.extend = extend;\n/**\n * Derivable from `Extend`.\n *\n * @category combinators\n * @since 2.0.0\n */\nexports.duplicate = /*#__PURE__*/\nexports.extend(function_1.identity);\n/**\n * @category Foldable\n * @since 2.0.0\n */\nvar reduce = function (b, f) {\n  return function (fa) {\n    return exports.isNone(fa) ? b : f(b, fa.value);\n  };\n};\nexports.reduce = reduce;\n/**\n * @category Foldable\n * @since 2.0.0\n */\nvar foldMap = function (M) {\n  return function (f) {\n    return function (fa) {\n      return exports.isNone(fa) ? M.empty : f(fa.value);\n    };\n  };\n};\nexports.foldMap = foldMap;\n/**\n * @category Foldable\n * @since 2.0.0\n */\nvar reduceRight = function (b, f) {\n  return function (fa) {\n    return exports.isNone(fa) ? b : f(fa.value, b);\n  };\n};\nexports.reduceRight = reduceRight;\n/**\n * @category Compactable\n * @since 2.0.0\n */\nexports.compact = exports.flatten;\nvar defaultSeparate = {\n  left: exports.none,\n  right: exports.none\n};\n/**\n * @category Compactable\n * @since 2.0.0\n */\nvar separate = function (ma) {\n  var o = function_1.pipe(ma, exports.map(function (e) {\n    return {\n      left: getLeft(e),\n      right: getRight(e)\n    };\n  }));\n  return exports.isNone(o) ? defaultSeparate : o.value;\n};\nexports.separate = separate;\n/**\n * @category Filterable\n * @since 2.0.0\n */\nvar filter = function (predicate) {\n  return function (fa) {\n    return exports.isNone(fa) ? exports.none : predicate(fa.value) ? fa : exports.none;\n  };\n};\nexports.filter = filter;\n/**\n * @category Filterable\n * @since 2.0.0\n */\nvar filterMap = function (f) {\n  return function (fa) {\n    return exports.isNone(fa) ? exports.none : f(fa.value);\n  };\n};\nexports.filterMap = filterMap;\n/**\n * @category Filterable\n * @since 2.0.0\n */\nvar partition = function (predicate) {\n  return function (fa) {\n    return {\n      left: filter_(fa, function (a) {\n        return !predicate(a);\n      }),\n      right: filter_(fa, predicate)\n    };\n  };\n};\nexports.partition = partition;\n/**\n * @category Filterable\n * @since 2.0.0\n */\nvar partitionMap = function (f) {\n  return function_1.flow(exports.map(f), exports.separate);\n};\nexports.partitionMap = partitionMap;\n/**\n * @category Traversable\n * @since 2.6.3\n */\nvar traverse = function (F) {\n  return function (f) {\n    return function (ta) {\n      return exports.isNone(ta) ? F.of(exports.none) : F.map(f(ta.value), exports.some);\n    };\n  };\n};\nexports.traverse = traverse;\n/**\n * @category Traversable\n * @since 2.6.3\n */\nvar sequence = function (F) {\n  return function (ta) {\n    return exports.isNone(ta) ? F.of(exports.none) : F.map(ta.value, exports.some);\n  };\n};\nexports.sequence = sequence;\n/**\n * @category Witherable\n * @since 2.6.5\n */\nvar wither = function (F) {\n  return function (f) {\n    return function (fa) {\n      return exports.isNone(fa) ? F.of(exports.none) : f(fa.value);\n    };\n  };\n};\nexports.wither = wither;\n/**\n * @category Witherable\n * @since 2.6.5\n */\nvar wilt = function (F) {\n  return function (f) {\n    return function (fa) {\n      return exports.isNone(fa) ? F.of({\n        left: exports.none,\n        right: exports.none\n      }) : F.map(f(fa.value), function (e) {\n        return {\n          left: getLeft(e),\n          right: getRight(e)\n        };\n      });\n    };\n  };\n};\nexports.wilt = wilt;\n// -------------------------------------------------------------------------------------\n// instances\n// -------------------------------------------------------------------------------------\n/**\n * @category instances\n * @since 2.0.0\n */\nexports.URI = 'Option';\n/**\n * @category instances\n * @since 2.0.0\n */\nfunction getShow(S) {\n  return {\n    show: function (ma) {\n      return exports.isNone(ma) ? 'none' : \"some(\" + S.show(ma.value) + \")\";\n    }\n  };\n}\nexports.getShow = getShow;\n/**\n * @example\n * import { none, some, getEq } from 'fp-ts/Option'\n * import { eqNumber } from 'fp-ts/Eq'\n *\n * const E = getEq(eqNumber)\n * assert.strictEqual(E.equals(none, none), true)\n * assert.strictEqual(E.equals(none, some(1)), false)\n * assert.strictEqual(E.equals(some(1), none), false)\n * assert.strictEqual(E.equals(some(1), some(2)), false)\n * assert.strictEqual(E.equals(some(1), some(1)), true)\n *\n * @category instances\n * @since 2.0.0\n */\nfunction getEq(E) {\n  return {\n    equals: function (x, y) {\n      return x === y || (exports.isNone(x) ? exports.isNone(y) : exports.isNone(y) ? false : E.equals(x.value, y.value));\n    }\n  };\n}\nexports.getEq = getEq;\n/**\n * The `Ord` instance allows `Option` values to be compared with\n * `compare`, whenever there is an `Ord` instance for\n * the type the `Option` contains.\n *\n * `None` is considered to be less than any `Some` value.\n *\n *\n * @example\n * import { none, some, getOrd } from 'fp-ts/Option'\n * import { ordNumber } from 'fp-ts/Ord'\n *\n * const O = getOrd(ordNumber)\n * assert.strictEqual(O.compare(none, none), 0)\n * assert.strictEqual(O.compare(none, some(1)), -1)\n * assert.strictEqual(O.compare(some(1), none), 1)\n * assert.strictEqual(O.compare(some(1), some(2)), -1)\n * assert.strictEqual(O.compare(some(1), some(1)), 0)\n *\n * @category instances\n * @since 2.0.0\n */\nfunction getOrd(O) {\n  return {\n    equals: getEq(O).equals,\n    compare: function (x, y) {\n      return x === y ? 0 : exports.isSome(x) ? exports.isSome(y) ? O.compare(x.value, y.value) : 1 : -1;\n    }\n  };\n}\nexports.getOrd = getOrd;\n/**\n * `Apply` semigroup\n *\n * | x       | y       | concat(x, y)       |\n * | ------- | ------- | ------------------ |\n * | none    | none    | none               |\n * | some(a) | none    | none               |\n * | none    | some(a) | none               |\n * | some(a) | some(b) | some(concat(a, b)) |\n *\n * @example\n * import { getApplySemigroup, some, none } from 'fp-ts/Option'\n * import { semigroupSum } from 'fp-ts/Semigroup'\n *\n * const S = getApplySemigroup(semigroupSum)\n * assert.deepStrictEqual(S.concat(none, none), none)\n * assert.deepStrictEqual(S.concat(some(1), none), none)\n * assert.deepStrictEqual(S.concat(none, some(1)), none)\n * assert.deepStrictEqual(S.concat(some(1), some(2)), some(3))\n *\n * @category instances\n * @since 2.0.0\n */\nfunction getApplySemigroup(S) {\n  return {\n    concat: function (x, y) {\n      return exports.isSome(x) && exports.isSome(y) ? exports.some(S.concat(x.value, y.value)) : exports.none;\n    }\n  };\n}\nexports.getApplySemigroup = getApplySemigroup;\n/**\n * @category instances\n * @since 2.0.0\n */\nfunction getApplyMonoid(M) {\n  return {\n    concat: getApplySemigroup(M).concat,\n    empty: exports.some(M.empty)\n  };\n}\nexports.getApplyMonoid = getApplyMonoid;\n/**\n * Monoid returning the left-most non-`None` value\n *\n * | x       | y       | concat(x, y) |\n * | ------- | ------- | ------------ |\n * | none    | none    | none         |\n * | some(a) | none    | some(a)      |\n * | none    | some(a) | some(a)      |\n * | some(a) | some(b) | some(a)      |\n *\n * @example\n * import { getFirstMonoid, some, none } from 'fp-ts/Option'\n *\n * const M = getFirstMonoid<number>()\n * assert.deepStrictEqual(M.concat(none, none), none)\n * assert.deepStrictEqual(M.concat(some(1), none), some(1))\n * assert.deepStrictEqual(M.concat(none, some(1)), some(1))\n * assert.deepStrictEqual(M.concat(some(1), some(2)), some(1))\n *\n * @category instances\n * @since 2.0.0\n */\nfunction getFirstMonoid() {\n  return {\n    concat: function (x, y) {\n      return exports.isNone(x) ? y : x;\n    },\n    empty: exports.none\n  };\n}\nexports.getFirstMonoid = getFirstMonoid;\n/**\n * Monoid returning the right-most non-`None` value\n *\n * | x       | y       | concat(x, y) |\n * | ------- | ------- | ------------ |\n * | none    | none    | none         |\n * | some(a) | none    | some(a)      |\n * | none    | some(a) | some(a)      |\n * | some(a) | some(b) | some(b)      |\n *\n * @example\n * import { getLastMonoid, some, none } from 'fp-ts/Option'\n *\n * const M = getLastMonoid<number>()\n * assert.deepStrictEqual(M.concat(none, none), none)\n * assert.deepStrictEqual(M.concat(some(1), none), some(1))\n * assert.deepStrictEqual(M.concat(none, some(1)), some(1))\n * assert.deepStrictEqual(M.concat(some(1), some(2)), some(2))\n *\n * @category instances\n * @since 2.0.0\n */\nfunction getLastMonoid() {\n  return {\n    concat: function (x, y) {\n      return exports.isNone(y) ? x : y;\n    },\n    empty: exports.none\n  };\n}\nexports.getLastMonoid = getLastMonoid;\n/**\n * Monoid returning the left-most non-`None` value. If both operands are `Some`s then the inner values are\n * concatenated using the provided `Semigroup`\n *\n * | x       | y       | concat(x, y)       |\n * | ------- | ------- | ------------------ |\n * | none    | none    | none               |\n * | some(a) | none    | some(a)            |\n * | none    | some(a) | some(a)            |\n * | some(a) | some(b) | some(concat(a, b)) |\n *\n * @example\n * import { getMonoid, some, none } from 'fp-ts/Option'\n * import { semigroupSum } from 'fp-ts/Semigroup'\n *\n * const M = getMonoid(semigroupSum)\n * assert.deepStrictEqual(M.concat(none, none), none)\n * assert.deepStrictEqual(M.concat(some(1), none), some(1))\n * assert.deepStrictEqual(M.concat(none, some(1)), some(1))\n * assert.deepStrictEqual(M.concat(some(1), some(2)), some(3))\n *\n * @category instances\n * @since 2.0.0\n */\nfunction getMonoid(S) {\n  return {\n    concat: function (x, y) {\n      return exports.isNone(x) ? y : exports.isNone(y) ? x : exports.some(S.concat(x.value, y.value));\n    },\n    empty: exports.none\n  };\n}\nexports.getMonoid = getMonoid;\n/**\n * @category instances\n * @since 2.7.0\n */\nexports.Functor = {\n  URI: exports.URI,\n  map: map_\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexports.Applicative = {\n  URI: exports.URI,\n  map: map_,\n  ap: ap_,\n  of: exports.of\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexports.Monad = {\n  URI: exports.URI,\n  map: map_,\n  ap: ap_,\n  of: exports.of,\n  chain: chain_\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexports.Foldable = {\n  URI: exports.URI,\n  reduce: reduce_,\n  foldMap: foldMap_,\n  reduceRight: reduceRight_\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexports.Alt = {\n  URI: exports.URI,\n  map: map_,\n  alt: alt_\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexports.Alternative = {\n  URI: exports.URI,\n  map: map_,\n  ap: ap_,\n  of: exports.of,\n  alt: alt_,\n  zero: exports.zero\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexports.Extend = {\n  URI: exports.URI,\n  map: map_,\n  extend: extend_\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexports.Compactable = {\n  URI: exports.URI,\n  compact: exports.compact,\n  separate: exports.separate\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexports.Filterable = {\n  URI: exports.URI,\n  map: map_,\n  compact: exports.compact,\n  separate: exports.separate,\n  filter: filter_,\n  filterMap: filterMap_,\n  partition: partition_,\n  partitionMap: partitionMap_\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexports.Traversable = {\n  URI: exports.URI,\n  map: map_,\n  reduce: reduce_,\n  foldMap: foldMap_,\n  reduceRight: reduceRight_,\n  traverse: traverse_,\n  sequence: exports.sequence\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexports.Witherable = {\n  URI: exports.URI,\n  map: map_,\n  reduce: reduce_,\n  foldMap: foldMap_,\n  reduceRight: reduceRight_,\n  traverse: traverse_,\n  sequence: exports.sequence,\n  compact: exports.compact,\n  separate: exports.separate,\n  filter: filter_,\n  filterMap: filterMap_,\n  partition: partition_,\n  partitionMap: partitionMap_,\n  wither: wither_,\n  wilt: wilt_\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexports.MonadThrow = {\n  URI: exports.URI,\n  map: map_,\n  ap: ap_,\n  of: exports.of,\n  chain: chain_,\n  throwError: exports.throwError\n};\n// TODO: remove in v3\n/**\n * @category instances\n * @since 2.0.0\n */\nexports.option = {\n  URI: exports.URI,\n  map: map_,\n  of: exports.of,\n  ap: ap_,\n  chain: chain_,\n  reduce: reduce_,\n  foldMap: foldMap_,\n  reduceRight: reduceRight_,\n  traverse: traverse_,\n  sequence: exports.sequence,\n  zero: exports.zero,\n  alt: alt_,\n  extend: extend_,\n  compact: exports.compact,\n  separate: exports.separate,\n  filter: filter_,\n  filterMap: filterMap_,\n  partition: partition_,\n  partitionMap: partitionMap_,\n  wither: wither_,\n  wilt: wilt_,\n  throwError: exports.throwError\n};\n// -------------------------------------------------------------------------------------\n// utils\n// -------------------------------------------------------------------------------------\n/**\n * Returns `true` if `ma` contains `a`\n *\n * @example\n * import { some, none, elem } from 'fp-ts/Option'\n * import { eqNumber } from 'fp-ts/Eq'\n *\n * assert.strictEqual(elem(eqNumber)(1, some(1)), true)\n * assert.strictEqual(elem(eqNumber)(2, some(1)), false)\n * assert.strictEqual(elem(eqNumber)(1, none), false)\n *\n * @since 2.0.0\n */\nfunction elem(E) {\n  return function (a, ma) {\n    return exports.isNone(ma) ? false : E.equals(a, ma.value);\n  };\n}\nexports.elem = elem;\n/**\n * Returns `true` if the predicate is satisfied by the wrapped value\n *\n * @example\n * import { some, none, exists } from 'fp-ts/Option'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.strictEqual(\n *   pipe(\n *     some(1),\n *     exists(n => n > 0)\n *   ),\n *   true\n * )\n * assert.strictEqual(\n *   pipe(\n *     some(1),\n *     exists(n => n > 1)\n *   ),\n *   false\n * )\n * assert.strictEqual(\n *   pipe(\n *     none,\n *     exists(n => n > 0)\n *   ),\n *   false\n * )\n *\n * @since 2.0.0\n */\nfunction exists(predicate) {\n  return function (ma) {\n    return exports.isNone(ma) ? false : predicate(ma.value);\n  };\n}\nexports.exists = exists;\n/**\n * Returns a `Refinement` (i.e. a custom type guard) from a `Option` returning function.\n * This function ensures that a custom type guard definition is type-safe.\n *\n * ```ts\n * import { some, none, getRefinement } from 'fp-ts/Option'\n *\n * type A = { type: 'A' }\n * type B = { type: 'B' }\n * type C = A | B\n *\n * const isA = (c: C): c is A => c.type === 'B' // <= typo but typescript doesn't complain\n * const isA = getRefinement<C, A>(c => (c.type === 'B' ? some(c) : none)) // static error: Type '\"B\"' is not assignable to type '\"A\"'\n * ```\n *\n * @since 2.0.0\n */\nfunction getRefinement(getOption) {\n  return function (a) {\n    return exports.isSome(getOption(a));\n  };\n}\nexports.getRefinement = getRefinement;\n// -------------------------------------------------------------------------------------\n// do notation\n// -------------------------------------------------------------------------------------\n/**\n * @since 2.9.0\n */\nexports.Do = /*#__PURE__*/\nexports.of({});\n/**\n * @since 2.8.0\n */\nvar bindTo = function (name) {\n  return exports.map(function_1.bindTo_(name));\n};\nexports.bindTo = bindTo;\n/**\n * @since 2.8.0\n */\nvar bind = function (name, f) {\n  return exports.chain(function (a) {\n    return function_1.pipe(f(a), exports.map(function (b) {\n      return function_1.bind_(a, name, b);\n    }));\n  });\n};\nexports.bind = bind;\n// -------------------------------------------------------------------------------------\n// pipeable sequence S\n// -------------------------------------------------------------------------------------\n/**\n * @since 2.8.0\n */\nvar apS = function (name, fb) {\n  return function_1.flow(exports.map(function (a) {\n    return function (b) {\n      return function_1.bind_(a, name, b);\n    };\n  }), exports.ap(fb));\n};\nexports.apS = apS;\n// -------------------------------------------------------------------------------------\n// array utils\n// -------------------------------------------------------------------------------------\n/**\n *\n * @since 2.9.0\n */\nvar traverseArrayWithIndex = function (f) {\n  return function (arr) {\n    // tslint:disable-next-line: readonly-array\n    var result = [];\n    for (var i = 0; i < arr.length; i++) {\n      var b = f(i, arr[i]);\n      if (exports.isNone(b)) {\n        return exports.none;\n      }\n      result.push(b.value);\n    }\n    return exports.some(result);\n  };\n};\nexports.traverseArrayWithIndex = traverseArrayWithIndex;\n/**\n * Runs an action for every element in array and accumulates the results in option\n *\n * this function have the same behavior of `A.sequence(O.option)` but it's optimized and perform better\n *\n * @example\n *\n * import * as A from 'fp-ts/Array'\n * import { traverseArray, some, fromPredicate, none } from 'fp-ts/Option'\n * import { pipe } from 'fp-ts/function'\n *\n * const arr = A.range(0, 10)\n * assert.deepStrictEqual(pipe(arr, traverseArray(some)), some(arr))\n * assert.deepStrictEqual(pipe(arr, traverseArray(fromPredicate((x) => x > 5))), none)\n *\n * @since 2.9.0\n */\nvar traverseArray = function (f) {\n  return exports.traverseArrayWithIndex(function (_, a) {\n    return f(a);\n  });\n};\nexports.traverseArray = traverseArray;\n/**\n * get an array of option and convert it to option of array\n *\n * this function have the same behavior of `A.sequence(O.option)` but it's optimized and perform better\n *\n * @example\n *\n * import * as A from 'fp-ts/Array'\n * import { sequenceArray, some, none, fromPredicate } from 'fp-ts/Option'\n * import { pipe } from 'fp-ts/function'\n *\n * const arr = A.range(0, 10)\n * assert.deepStrictEqual(pipe(arr, A.map(some), sequenceArray), some(arr))\n * assert.deepStrictEqual(pipe(arr, A.map(fromPredicate(x => x > 8)), sequenceArray), none)\n *\n * @since 2.9.0\n */\nexports.sequenceArray = /*#__PURE__*/\nexports.traverseArray(function_1.identity);","map":{"version":3,"names":["Object","defineProperty","exports","value","getApplySemigroup","getOrd","getEq","getShow","URI","wilt","wither","sequence","traverse","partitionMap","partition","filterMap","filter","separate","compact","reduceRight","foldMap","reduce","duplicate","extend","throwError","zero","alt","altW","flatten","chainFirst","chain","of","apSecond","apFirst","ap","map","chainNullableK","mapNullable","fromNullableK","getOrElse","getOrElseW","toUndefined","toNullable","fold","fromEither","getRight","getLeft","tryCatch","fromPredicate","fromNullable","some","none","isNone","isSome","sequenceArray","traverseArray","traverseArrayWithIndex","apS","bind","bindTo","Do","getRefinement","exists","elem","option","MonadThrow","Witherable","Traversable","Filterable","Compactable","Extend","Alternative","Alt","Foldable","Monad","Applicative","Functor","getMonoid","getLastMonoid","getFirstMonoid","getApplyMonoid","function_1","require","fa","_tag","a","predicate","f","e","ma","left","right","onNone","onSome","undefined","_i","arguments","length","apply","map_","pipe","ap_","fab","chain_","reduce_","b","foldMap_","M","foldMapM","reduceRight_","traverse_","F","traverseF","ta","alt_","that","filter_","filterMap_","extend_","wa","partition_","partitionMap_","wither_","witherF","wilt_","wiltF","fb","flow","identity","empty","defaultSeparate","o","S","show","E","equals","x","y","O","compare","concat","getOption","name","bindTo_","bind_","arr","result","i","push","_"],"sources":["/Users/arthurfrancis/Documents/repo/imx-learning/workflows/link-app/react/node_modules/fp-ts/lib/Option.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getApplySemigroup = exports.getOrd = exports.getEq = exports.getShow = exports.URI = exports.wilt = exports.wither = exports.sequence = exports.traverse = exports.partitionMap = exports.partition = exports.filterMap = exports.filter = exports.separate = exports.compact = exports.reduceRight = exports.foldMap = exports.reduce = exports.duplicate = exports.extend = exports.throwError = exports.zero = exports.alt = exports.altW = exports.flatten = exports.chainFirst = exports.chain = exports.of = exports.apSecond = exports.apFirst = exports.ap = exports.map = exports.chainNullableK = exports.mapNullable = exports.fromNullableK = exports.getOrElse = exports.getOrElseW = exports.toUndefined = exports.toNullable = exports.fold = exports.fromEither = exports.getRight = exports.getLeft = exports.tryCatch = exports.fromPredicate = exports.fromNullable = exports.some = exports.none = exports.isNone = exports.isSome = void 0;\nexports.sequenceArray = exports.traverseArray = exports.traverseArrayWithIndex = exports.apS = exports.bind = exports.bindTo = exports.Do = exports.getRefinement = exports.exists = exports.elem = exports.option = exports.MonadThrow = exports.Witherable = exports.Traversable = exports.Filterable = exports.Compactable = exports.Extend = exports.Alternative = exports.Alt = exports.Foldable = exports.Monad = exports.Applicative = exports.Functor = exports.getMonoid = exports.getLastMonoid = exports.getFirstMonoid = exports.getApplyMonoid = void 0;\nvar function_1 = require(\"./function\");\n// -------------------------------------------------------------------------------------\n// guards\n// -------------------------------------------------------------------------------------\n/**\n * Returns `true` if the option is an instance of `Some`, `false` otherwise.\n *\n * @example\n * import { some, none, isSome } from 'fp-ts/Option'\n *\n * assert.strictEqual(isSome(some(1)), true)\n * assert.strictEqual(isSome(none), false)\n *\n * @category guards\n * @since 2.0.0\n */\nvar isSome = function (fa) { return fa._tag === 'Some'; };\nexports.isSome = isSome;\n/**\n * Returns `true` if the option is `None`, `false` otherwise.\n *\n * @example\n * import { some, none, isNone } from 'fp-ts/Option'\n *\n * assert.strictEqual(isNone(some(1)), false)\n * assert.strictEqual(isNone(none), true)\n *\n * @category guards\n * @since 2.0.0\n */\nvar isNone = function (fa) { return fa._tag === 'None'; };\nexports.isNone = isNone;\n// -------------------------------------------------------------------------------------\n// constructors\n// -------------------------------------------------------------------------------------\n/**\n * `None` doesn't have a constructor, instead you can use it directly as a value. Represents a missing value.\n *\n * @category constructors\n * @since 2.0.0\n */\nexports.none = { _tag: 'None' };\n/**\n * Constructs a `Some`. Represents an optional value that exists.\n *\n * @category constructors\n * @since 2.0.0\n */\nvar some = function (a) { return ({ _tag: 'Some', value: a }); };\nexports.some = some;\n/**\n * Constructs a new `Option` from a nullable type. If the value is `null` or `undefined`, returns `None`, otherwise\n * returns the value wrapped in a `Some`.\n *\n * @example\n * import { none, some, fromNullable } from 'fp-ts/Option'\n *\n * assert.deepStrictEqual(fromNullable(undefined), none)\n * assert.deepStrictEqual(fromNullable(null), none)\n * assert.deepStrictEqual(fromNullable(1), some(1))\n *\n * @category constructors\n * @since 2.0.0\n */\nfunction fromNullable(a) {\n    return a == null ? exports.none : exports.some(a);\n}\nexports.fromNullable = fromNullable;\nfunction fromPredicate(predicate) {\n    return function (a) { return (predicate(a) ? exports.some(a) : exports.none); };\n}\nexports.fromPredicate = fromPredicate;\n/**\n * Transforms an exception into an `Option`. If `f` throws, returns `None`, otherwise returns the output wrapped in a\n * `Some`.\n *\n * @example\n * import { none, some, tryCatch } from 'fp-ts/Option'\n *\n * assert.deepStrictEqual(\n *   tryCatch(() => {\n *     throw new Error()\n *   }),\n *   none\n * )\n * assert.deepStrictEqual(tryCatch(() => 1), some(1))\n *\n * @category constructors\n * @since 2.0.0\n */\nfunction tryCatch(f) {\n    try {\n        return exports.some(f());\n    }\n    catch (e) {\n        return exports.none;\n    }\n}\nexports.tryCatch = tryCatch;\n/**\n * Returns the `Left` value of an `Either` if possible.\n *\n * @example\n * import { getLeft, none, some } from 'fp-ts/Option'\n * import { right, left } from 'fp-ts/Either'\n *\n * assert.deepStrictEqual(getLeft(right(1)), none)\n * assert.deepStrictEqual(getLeft(left('a')), some('a'))\n *\n * @category constructors\n * @since 2.0.0\n */\nfunction getLeft(ma) {\n    return ma._tag === 'Right' ? exports.none : exports.some(ma.left);\n}\nexports.getLeft = getLeft;\n/**\n * Returns the `Right` value of an `Either` if possible.\n *\n * @example\n * import { getRight, none, some } from 'fp-ts/Option'\n * import { right, left } from 'fp-ts/Either'\n *\n * assert.deepStrictEqual(getRight(right(1)), some(1))\n * assert.deepStrictEqual(getRight(left('a')), none)\n *\n * @category constructors\n * @since 2.0.0\n */\nfunction getRight(ma) {\n    return ma._tag === 'Left' ? exports.none : exports.some(ma.right);\n}\nexports.getRight = getRight;\n/**\n * Transforms an `Either` to an `Option` discarding the error.\n *\n * Alias of [getRight](#getRight)\n *\n * Derivable from `MonadThrow`.\n *\n * @category constructors\n * @since 2.0.0\n */\nexports.fromEither = getRight;\n// -------------------------------------------------------------------------------------\n// destructors\n// -------------------------------------------------------------------------------------\n/**\n * Takes a (lazy) default value, a function, and an `Option` value, if the `Option` value is `None` the default value is\n * returned, otherwise the function is applied to the value inside the `Some` and the result is returned.\n *\n * @example\n * import { some, none, fold } from 'fp-ts/Option'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.strictEqual(\n *   pipe(\n *     some(1),\n *     fold(() => 'a none', a => `a some containing ${a}`)\n *   ),\n *   'a some containing 1'\n * )\n *\n * assert.strictEqual(\n *   pipe(\n *     none,\n *     fold(() => 'a none', a => `a some containing ${a}`)\n *   ),\n *   'a none'\n * )\n *\n * @category destructors\n * @since 2.0.0\n */\nfunction fold(onNone, onSome) {\n    return function (ma) { return (exports.isNone(ma) ? onNone() : onSome(ma.value)); };\n}\nexports.fold = fold;\n/**\n * Extracts the value out of the structure, if it exists. Otherwise returns `null`.\n *\n * @example\n * import { some, none, toNullable } from 'fp-ts/Option'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.strictEqual(\n *   pipe(\n *     some(1),\n *     toNullable\n *   ),\n *   1\n * )\n * assert.strictEqual(\n *   pipe(\n *     none,\n *     toNullable\n *   ),\n *   null\n * )\n *\n * @category destructors\n * @since 2.0.0\n */\nfunction toNullable(ma) {\n    return exports.isNone(ma) ? null : ma.value;\n}\nexports.toNullable = toNullable;\n/**\n * Extracts the value out of the structure, if it exists. Otherwise returns `undefined`.\n *\n * @example\n * import { some, none, toUndefined } from 'fp-ts/Option'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.strictEqual(\n *   pipe(\n *     some(1),\n *     toUndefined\n *   ),\n *   1\n * )\n * assert.strictEqual(\n *   pipe(\n *     none,\n *     toUndefined\n *   ),\n *   undefined\n * )\n *\n * @category destructors\n * @since 2.0.0\n */\nfunction toUndefined(ma) {\n    return exports.isNone(ma) ? undefined : ma.value;\n}\nexports.toUndefined = toUndefined;\n/**\n * Less strict version of [`getOrElse`](#getOrElse).\n *\n * @category destructors\n * @since 2.6.0\n */\nvar getOrElseW = function (onNone) { return function (ma) { return (exports.isNone(ma) ? onNone() : ma.value); }; };\nexports.getOrElseW = getOrElseW;\n/**\n * Extracts the value out of the structure, if it exists. Otherwise returns the given default value\n *\n * @example\n * import { some, none, getOrElse } from 'fp-ts/Option'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.strictEqual(\n *   pipe(\n *     some(1),\n *     getOrElse(() => 0)\n *   ),\n *   1\n * )\n * assert.strictEqual(\n *   pipe(\n *     none,\n *     getOrElse(() => 0)\n *   ),\n *   0\n * )\n *\n * @category destructors\n * @since 2.0.0\n */\nexports.getOrElse = exports.getOrElseW;\n// -------------------------------------------------------------------------------------\n// combinators\n// -------------------------------------------------------------------------------------\n/**\n * Returns a *smart constructor* from a function that returns a nullable value.\n *\n * @example\n * import { fromNullableK, none, some } from 'fp-ts/Option'\n *\n * const f = (s: string): number | undefined => {\n *   const n = parseFloat(s)\n *   return isNaN(n) ? undefined : n\n * }\n *\n * const g = fromNullableK(f)\n *\n * assert.deepStrictEqual(g('1'), some(1))\n * assert.deepStrictEqual(g('a'), none)\n *\n * @category combinators\n * @since 2.9.0\n */\nfunction fromNullableK(f) {\n    return function () {\n        var a = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            a[_i] = arguments[_i];\n        }\n        return fromNullable(f.apply(void 0, a));\n    };\n}\nexports.fromNullableK = fromNullableK;\n/**\n * @category combinators\n * @since 2.0.0\n * @deprecated\n */\nexports.mapNullable = chainNullableK;\n/**\n * This is `chain` + `fromNullable`, useful when working with optional values.\n *\n * @example\n * import { some, none, fromNullable, chainNullableK } from 'fp-ts/Option'\n * import { pipe } from 'fp-ts/function'\n *\n * interface Employee {\n *   company?: {\n *     address?: {\n *       street?: {\n *         name?: string\n *       }\n *     }\n *   }\n * }\n *\n * const employee1: Employee = { company: { address: { street: { name: 'high street' } } } }\n *\n * assert.deepStrictEqual(\n *   pipe(\n *     fromNullable(employee1.company),\n *     chainNullableK(company => company.address),\n *     chainNullableK(address => address.street),\n *     chainNullableK(street => street.name)\n *   ),\n *   some('high street')\n * )\n *\n * const employee2: Employee = { company: { address: { street: {} } } }\n *\n * assert.deepStrictEqual(\n *   pipe(\n *     fromNullable(employee2.company),\n *     chainNullableK(company => company.address),\n *     chainNullableK(address => address.street),\n *     chainNullableK(street => street.name)\n *   ),\n *   none\n * )\n *\n * @category combinators\n * @since 2.9.0\n */\nfunction chainNullableK(f) {\n    return function (ma) { return (exports.isNone(ma) ? exports.none : fromNullable(f(ma.value))); };\n}\nexports.chainNullableK = chainNullableK;\n// -------------------------------------------------------------------------------------\n// non-pipeables\n// -------------------------------------------------------------------------------------\nvar map_ = function (fa, f) { return function_1.pipe(fa, exports.map(f)); };\nvar ap_ = function (fab, fa) { return function_1.pipe(fab, exports.ap(fa)); };\nvar chain_ = function (ma, f) { return function_1.pipe(ma, exports.chain(f)); };\nvar reduce_ = function (fa, b, f) { return function_1.pipe(fa, exports.reduce(b, f)); };\nvar foldMap_ = function (M) {\n    var foldMapM = exports.foldMap(M);\n    return function (fa, f) { return function_1.pipe(fa, foldMapM(f)); };\n};\nvar reduceRight_ = function (fa, b, f) { return function_1.pipe(fa, exports.reduceRight(b, f)); };\nvar traverse_ = function (F) {\n    var traverseF = exports.traverse(F);\n    return function (ta, f) { return function_1.pipe(ta, traverseF(f)); };\n};\n/* istanbul ignore next */\nvar alt_ = function (fa, that) { return function_1.pipe(fa, exports.alt(that)); };\nvar filter_ = function (fa, predicate) {\n    return function_1.pipe(fa, exports.filter(predicate));\n};\n/* istanbul ignore next */\nvar filterMap_ = function (fa, f) { return function_1.pipe(fa, exports.filterMap(f)); };\n/* istanbul ignore next */\nvar extend_ = function (wa, f) { return function_1.pipe(wa, exports.extend(f)); };\n/* istanbul ignore next */\nvar partition_ = function (fa, predicate) { return function_1.pipe(fa, exports.partition(predicate)); };\n/* istanbul ignore next */\nvar partitionMap_ = function (fa, f) { return function_1.pipe(fa, exports.partitionMap(f)); };\n/* istanbul ignore next */\nvar wither_ = function (F) {\n    var witherF = exports.wither(F);\n    return function (fa, f) { return function_1.pipe(fa, witherF(f)); };\n};\n/* istanbul ignore next */\nvar wilt_ = function (F) {\n    var wiltF = exports.wilt(F);\n    return function (fa, f) { return function_1.pipe(fa, wiltF(f)); };\n};\n// -------------------------------------------------------------------------------------\n// pipeables\n// -------------------------------------------------------------------------------------\n/**\n * `map` can be used to turn functions `(a: A) => B` into functions `(fa: F<A>) => F<B>` whose argument and return types\n * use the type constructor `F` to represent some computational context.\n *\n * @category Functor\n * @since 2.0.0\n */\nvar map = function (f) { return function (fa) {\n    return exports.isNone(fa) ? exports.none : exports.some(f(fa.value));\n}; };\nexports.map = map;\n/**\n * Apply a function to an argument under a type constructor.\n *\n * @category Apply\n * @since 2.0.0\n */\nvar ap = function (fa) { return function (fab) {\n    return exports.isNone(fab) ? exports.none : exports.isNone(fa) ? exports.none : exports.some(fab.value(fa.value));\n}; };\nexports.ap = ap;\n/**\n * Combine two effectful actions, keeping only the result of the first.\n *\n * Derivable from `Apply`.\n *\n * @category combinators\n * @since 2.0.0\n */\nvar apFirst = function (fb) {\n    return function_1.flow(exports.map(function (a) { return function () { return a; }; }), exports.ap(fb));\n};\nexports.apFirst = apFirst;\n/**\n * Combine two effectful actions, keeping only the result of the second.\n *\n * Derivable from `Apply`.\n *\n * @category combinators\n * @since 2.0.0\n */\nvar apSecond = function (fb) {\n    return function_1.flow(exports.map(function () { return function (b) { return b; }; }), exports.ap(fb));\n};\nexports.apSecond = apSecond;\n/**\n * Wrap a value into the type constructor.\n *\n * @category Applicative\n * @since 2.7.0\n */\nexports.of = exports.some;\n/**\n * Composes computations in sequence, using the return value of one computation to determine the next computation.\n *\n * @category Monad\n * @since 2.0.0\n */\nvar chain = function (f) { return function (ma) {\n    return exports.isNone(ma) ? exports.none : f(ma.value);\n}; };\nexports.chain = chain;\n/**\n * Composes computations in sequence, using the return value of one computation to determine the next computation and\n * keeping only the result of the first.\n *\n * Derivable from `Monad`.\n *\n * @category combinators\n * @since 2.0.0\n */\nvar chainFirst = function (f) {\n    return exports.chain(function (a) {\n        return function_1.pipe(f(a), exports.map(function () { return a; }));\n    });\n};\nexports.chainFirst = chainFirst;\n/**\n * Derivable from `Monad`.\n *\n * @category combinators\n * @since 2.0.0\n */\nexports.flatten = \n/*#__PURE__*/\nexports.chain(function_1.identity);\n/**\n * Less strict version of [`alt`](#alt).\n *\n * @category Alt\n * @since 2.9.0\n */\nvar altW = function (that) { return function (fa) {\n    return exports.isNone(fa) ? that() : fa;\n}; };\nexports.altW = altW;\n/**\n * Identifies an associative operation on a type constructor. It is similar to `Semigroup`, except that it applies to\n * types of kind `* -> *`.\n *\n * In case of `Option` returns the left-most non-`None` value.\n *\n * @example\n * import * as O from 'fp-ts/Option'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(\n *   pipe(\n *     O.some('a'),\n *     O.alt(() => O.some('b'))\n *   ),\n *   O.some('a')\n * )\n * assert.deepStrictEqual(\n *   pipe(\n *     O.none,\n *     O.alt(() => O.some('b'))\n *   ),\n *   O.some('b')\n * )\n *\n * @category Alt\n * @since 2.0.0\n */\nexports.alt = exports.altW;\n/**\n * @category Alternative\n * @since 2.7.0\n */\nvar zero = function () { return exports.none; };\nexports.zero = zero;\n/**\n * @category MonadThrow\n * @since 2.7.0\n */\nvar throwError = function () { return exports.none; };\nexports.throwError = throwError;\n/**\n * @category Extend\n * @since 2.0.0\n */\nvar extend = function (f) { return function (wa) {\n    return exports.isNone(wa) ? exports.none : exports.some(f(wa));\n}; };\nexports.extend = extend;\n/**\n * Derivable from `Extend`.\n *\n * @category combinators\n * @since 2.0.0\n */\nexports.duplicate = \n/*#__PURE__*/\nexports.extend(function_1.identity);\n/**\n * @category Foldable\n * @since 2.0.0\n */\nvar reduce = function (b, f) { return function (fa) {\n    return exports.isNone(fa) ? b : f(b, fa.value);\n}; };\nexports.reduce = reduce;\n/**\n * @category Foldable\n * @since 2.0.0\n */\nvar foldMap = function (M) { return function (f) { return function (fa) {\n    return exports.isNone(fa) ? M.empty : f(fa.value);\n}; }; };\nexports.foldMap = foldMap;\n/**\n * @category Foldable\n * @since 2.0.0\n */\nvar reduceRight = function (b, f) { return function (fa) {\n    return exports.isNone(fa) ? b : f(fa.value, b);\n}; };\nexports.reduceRight = reduceRight;\n/**\n * @category Compactable\n * @since 2.0.0\n */\nexports.compact = exports.flatten;\nvar defaultSeparate = { left: exports.none, right: exports.none };\n/**\n * @category Compactable\n * @since 2.0.0\n */\nvar separate = function (ma) {\n    var o = function_1.pipe(ma, exports.map(function (e) { return ({\n        left: getLeft(e),\n        right: getRight(e)\n    }); }));\n    return exports.isNone(o) ? defaultSeparate : o.value;\n};\nexports.separate = separate;\n/**\n * @category Filterable\n * @since 2.0.0\n */\nvar filter = function (predicate) { return function (fa) { return (exports.isNone(fa) ? exports.none : predicate(fa.value) ? fa : exports.none); }; };\nexports.filter = filter;\n/**\n * @category Filterable\n * @since 2.0.0\n */\nvar filterMap = function (f) { return function (fa) {\n    return exports.isNone(fa) ? exports.none : f(fa.value);\n}; };\nexports.filterMap = filterMap;\n/**\n * @category Filterable\n * @since 2.0.0\n */\nvar partition = function (predicate) { return function (fa) {\n    return {\n        left: filter_(fa, function (a) { return !predicate(a); }),\n        right: filter_(fa, predicate)\n    };\n}; };\nexports.partition = partition;\n/**\n * @category Filterable\n * @since 2.0.0\n */\nvar partitionMap = function (f) { return function_1.flow(exports.map(f), exports.separate); };\nexports.partitionMap = partitionMap;\n/**\n * @category Traversable\n * @since 2.6.3\n */\nvar traverse = function (F) { return function (f) { return function (ta) { return (exports.isNone(ta) ? F.of(exports.none) : F.map(f(ta.value), exports.some)); }; }; };\nexports.traverse = traverse;\n/**\n * @category Traversable\n * @since 2.6.3\n */\nvar sequence = function (F) { return function (ta) { return (exports.isNone(ta) ? F.of(exports.none) : F.map(ta.value, exports.some)); }; };\nexports.sequence = sequence;\n/**\n * @category Witherable\n * @since 2.6.5\n */\nvar wither = function (F) { return function (f) { return function (fa) { return (exports.isNone(fa) ? F.of(exports.none) : f(fa.value)); }; }; };\nexports.wither = wither;\n/**\n * @category Witherable\n * @since 2.6.5\n */\nvar wilt = function (F) { return function (f) { return function (fa) {\n    return exports.isNone(fa)\n        ? F.of({\n            left: exports.none,\n            right: exports.none\n        })\n        : F.map(f(fa.value), function (e) { return ({\n            left: getLeft(e),\n            right: getRight(e)\n        }); });\n}; }; };\nexports.wilt = wilt;\n// -------------------------------------------------------------------------------------\n// instances\n// -------------------------------------------------------------------------------------\n/**\n * @category instances\n * @since 2.0.0\n */\nexports.URI = 'Option';\n/**\n * @category instances\n * @since 2.0.0\n */\nfunction getShow(S) {\n    return {\n        show: function (ma) { return (exports.isNone(ma) ? 'none' : \"some(\" + S.show(ma.value) + \")\"); }\n    };\n}\nexports.getShow = getShow;\n/**\n * @example\n * import { none, some, getEq } from 'fp-ts/Option'\n * import { eqNumber } from 'fp-ts/Eq'\n *\n * const E = getEq(eqNumber)\n * assert.strictEqual(E.equals(none, none), true)\n * assert.strictEqual(E.equals(none, some(1)), false)\n * assert.strictEqual(E.equals(some(1), none), false)\n * assert.strictEqual(E.equals(some(1), some(2)), false)\n * assert.strictEqual(E.equals(some(1), some(1)), true)\n *\n * @category instances\n * @since 2.0.0\n */\nfunction getEq(E) {\n    return {\n        equals: function (x, y) { return x === y || (exports.isNone(x) ? exports.isNone(y) : exports.isNone(y) ? false : E.equals(x.value, y.value)); }\n    };\n}\nexports.getEq = getEq;\n/**\n * The `Ord` instance allows `Option` values to be compared with\n * `compare`, whenever there is an `Ord` instance for\n * the type the `Option` contains.\n *\n * `None` is considered to be less than any `Some` value.\n *\n *\n * @example\n * import { none, some, getOrd } from 'fp-ts/Option'\n * import { ordNumber } from 'fp-ts/Ord'\n *\n * const O = getOrd(ordNumber)\n * assert.strictEqual(O.compare(none, none), 0)\n * assert.strictEqual(O.compare(none, some(1)), -1)\n * assert.strictEqual(O.compare(some(1), none), 1)\n * assert.strictEqual(O.compare(some(1), some(2)), -1)\n * assert.strictEqual(O.compare(some(1), some(1)), 0)\n *\n * @category instances\n * @since 2.0.0\n */\nfunction getOrd(O) {\n    return {\n        equals: getEq(O).equals,\n        compare: function (x, y) { return (x === y ? 0 : exports.isSome(x) ? (exports.isSome(y) ? O.compare(x.value, y.value) : 1) : -1); }\n    };\n}\nexports.getOrd = getOrd;\n/**\n * `Apply` semigroup\n *\n * | x       | y       | concat(x, y)       |\n * | ------- | ------- | ------------------ |\n * | none    | none    | none               |\n * | some(a) | none    | none               |\n * | none    | some(a) | none               |\n * | some(a) | some(b) | some(concat(a, b)) |\n *\n * @example\n * import { getApplySemigroup, some, none } from 'fp-ts/Option'\n * import { semigroupSum } from 'fp-ts/Semigroup'\n *\n * const S = getApplySemigroup(semigroupSum)\n * assert.deepStrictEqual(S.concat(none, none), none)\n * assert.deepStrictEqual(S.concat(some(1), none), none)\n * assert.deepStrictEqual(S.concat(none, some(1)), none)\n * assert.deepStrictEqual(S.concat(some(1), some(2)), some(3))\n *\n * @category instances\n * @since 2.0.0\n */\nfunction getApplySemigroup(S) {\n    return {\n        concat: function (x, y) { return (exports.isSome(x) && exports.isSome(y) ? exports.some(S.concat(x.value, y.value)) : exports.none); }\n    };\n}\nexports.getApplySemigroup = getApplySemigroup;\n/**\n * @category instances\n * @since 2.0.0\n */\nfunction getApplyMonoid(M) {\n    return {\n        concat: getApplySemigroup(M).concat,\n        empty: exports.some(M.empty)\n    };\n}\nexports.getApplyMonoid = getApplyMonoid;\n/**\n * Monoid returning the left-most non-`None` value\n *\n * | x       | y       | concat(x, y) |\n * | ------- | ------- | ------------ |\n * | none    | none    | none         |\n * | some(a) | none    | some(a)      |\n * | none    | some(a) | some(a)      |\n * | some(a) | some(b) | some(a)      |\n *\n * @example\n * import { getFirstMonoid, some, none } from 'fp-ts/Option'\n *\n * const M = getFirstMonoid<number>()\n * assert.deepStrictEqual(M.concat(none, none), none)\n * assert.deepStrictEqual(M.concat(some(1), none), some(1))\n * assert.deepStrictEqual(M.concat(none, some(1)), some(1))\n * assert.deepStrictEqual(M.concat(some(1), some(2)), some(1))\n *\n * @category instances\n * @since 2.0.0\n */\nfunction getFirstMonoid() {\n    return {\n        concat: function (x, y) { return (exports.isNone(x) ? y : x); },\n        empty: exports.none\n    };\n}\nexports.getFirstMonoid = getFirstMonoid;\n/**\n * Monoid returning the right-most non-`None` value\n *\n * | x       | y       | concat(x, y) |\n * | ------- | ------- | ------------ |\n * | none    | none    | none         |\n * | some(a) | none    | some(a)      |\n * | none    | some(a) | some(a)      |\n * | some(a) | some(b) | some(b)      |\n *\n * @example\n * import { getLastMonoid, some, none } from 'fp-ts/Option'\n *\n * const M = getLastMonoid<number>()\n * assert.deepStrictEqual(M.concat(none, none), none)\n * assert.deepStrictEqual(M.concat(some(1), none), some(1))\n * assert.deepStrictEqual(M.concat(none, some(1)), some(1))\n * assert.deepStrictEqual(M.concat(some(1), some(2)), some(2))\n *\n * @category instances\n * @since 2.0.0\n */\nfunction getLastMonoid() {\n    return {\n        concat: function (x, y) { return (exports.isNone(y) ? x : y); },\n        empty: exports.none\n    };\n}\nexports.getLastMonoid = getLastMonoid;\n/**\n * Monoid returning the left-most non-`None` value. If both operands are `Some`s then the inner values are\n * concatenated using the provided `Semigroup`\n *\n * | x       | y       | concat(x, y)       |\n * | ------- | ------- | ------------------ |\n * | none    | none    | none               |\n * | some(a) | none    | some(a)            |\n * | none    | some(a) | some(a)            |\n * | some(a) | some(b) | some(concat(a, b)) |\n *\n * @example\n * import { getMonoid, some, none } from 'fp-ts/Option'\n * import { semigroupSum } from 'fp-ts/Semigroup'\n *\n * const M = getMonoid(semigroupSum)\n * assert.deepStrictEqual(M.concat(none, none), none)\n * assert.deepStrictEqual(M.concat(some(1), none), some(1))\n * assert.deepStrictEqual(M.concat(none, some(1)), some(1))\n * assert.deepStrictEqual(M.concat(some(1), some(2)), some(3))\n *\n * @category instances\n * @since 2.0.0\n */\nfunction getMonoid(S) {\n    return {\n        concat: function (x, y) { return (exports.isNone(x) ? y : exports.isNone(y) ? x : exports.some(S.concat(x.value, y.value))); },\n        empty: exports.none\n    };\n}\nexports.getMonoid = getMonoid;\n/**\n * @category instances\n * @since 2.7.0\n */\nexports.Functor = {\n    URI: exports.URI,\n    map: map_\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexports.Applicative = {\n    URI: exports.URI,\n    map: map_,\n    ap: ap_,\n    of: exports.of\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexports.Monad = {\n    URI: exports.URI,\n    map: map_,\n    ap: ap_,\n    of: exports.of,\n    chain: chain_\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexports.Foldable = {\n    URI: exports.URI,\n    reduce: reduce_,\n    foldMap: foldMap_,\n    reduceRight: reduceRight_\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexports.Alt = {\n    URI: exports.URI,\n    map: map_,\n    alt: alt_\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexports.Alternative = {\n    URI: exports.URI,\n    map: map_,\n    ap: ap_,\n    of: exports.of,\n    alt: alt_,\n    zero: exports.zero\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexports.Extend = {\n    URI: exports.URI,\n    map: map_,\n    extend: extend_\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexports.Compactable = {\n    URI: exports.URI,\n    compact: exports.compact,\n    separate: exports.separate\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexports.Filterable = {\n    URI: exports.URI,\n    map: map_,\n    compact: exports.compact,\n    separate: exports.separate,\n    filter: filter_,\n    filterMap: filterMap_,\n    partition: partition_,\n    partitionMap: partitionMap_\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexports.Traversable = {\n    URI: exports.URI,\n    map: map_,\n    reduce: reduce_,\n    foldMap: foldMap_,\n    reduceRight: reduceRight_,\n    traverse: traverse_,\n    sequence: exports.sequence\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexports.Witherable = {\n    URI: exports.URI,\n    map: map_,\n    reduce: reduce_,\n    foldMap: foldMap_,\n    reduceRight: reduceRight_,\n    traverse: traverse_,\n    sequence: exports.sequence,\n    compact: exports.compact,\n    separate: exports.separate,\n    filter: filter_,\n    filterMap: filterMap_,\n    partition: partition_,\n    partitionMap: partitionMap_,\n    wither: wither_,\n    wilt: wilt_\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexports.MonadThrow = {\n    URI: exports.URI,\n    map: map_,\n    ap: ap_,\n    of: exports.of,\n    chain: chain_,\n    throwError: exports.throwError\n};\n// TODO: remove in v3\n/**\n * @category instances\n * @since 2.0.0\n */\nexports.option = {\n    URI: exports.URI,\n    map: map_,\n    of: exports.of,\n    ap: ap_,\n    chain: chain_,\n    reduce: reduce_,\n    foldMap: foldMap_,\n    reduceRight: reduceRight_,\n    traverse: traverse_,\n    sequence: exports.sequence,\n    zero: exports.zero,\n    alt: alt_,\n    extend: extend_,\n    compact: exports.compact,\n    separate: exports.separate,\n    filter: filter_,\n    filterMap: filterMap_,\n    partition: partition_,\n    partitionMap: partitionMap_,\n    wither: wither_,\n    wilt: wilt_,\n    throwError: exports.throwError\n};\n// -------------------------------------------------------------------------------------\n// utils\n// -------------------------------------------------------------------------------------\n/**\n * Returns `true` if `ma` contains `a`\n *\n * @example\n * import { some, none, elem } from 'fp-ts/Option'\n * import { eqNumber } from 'fp-ts/Eq'\n *\n * assert.strictEqual(elem(eqNumber)(1, some(1)), true)\n * assert.strictEqual(elem(eqNumber)(2, some(1)), false)\n * assert.strictEqual(elem(eqNumber)(1, none), false)\n *\n * @since 2.0.0\n */\nfunction elem(E) {\n    return function (a, ma) { return (exports.isNone(ma) ? false : E.equals(a, ma.value)); };\n}\nexports.elem = elem;\n/**\n * Returns `true` if the predicate is satisfied by the wrapped value\n *\n * @example\n * import { some, none, exists } from 'fp-ts/Option'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.strictEqual(\n *   pipe(\n *     some(1),\n *     exists(n => n > 0)\n *   ),\n *   true\n * )\n * assert.strictEqual(\n *   pipe(\n *     some(1),\n *     exists(n => n > 1)\n *   ),\n *   false\n * )\n * assert.strictEqual(\n *   pipe(\n *     none,\n *     exists(n => n > 0)\n *   ),\n *   false\n * )\n *\n * @since 2.0.0\n */\nfunction exists(predicate) {\n    return function (ma) { return (exports.isNone(ma) ? false : predicate(ma.value)); };\n}\nexports.exists = exists;\n/**\n * Returns a `Refinement` (i.e. a custom type guard) from a `Option` returning function.\n * This function ensures that a custom type guard definition is type-safe.\n *\n * ```ts\n * import { some, none, getRefinement } from 'fp-ts/Option'\n *\n * type A = { type: 'A' }\n * type B = { type: 'B' }\n * type C = A | B\n *\n * const isA = (c: C): c is A => c.type === 'B' // <= typo but typescript doesn't complain\n * const isA = getRefinement<C, A>(c => (c.type === 'B' ? some(c) : none)) // static error: Type '\"B\"' is not assignable to type '\"A\"'\n * ```\n *\n * @since 2.0.0\n */\nfunction getRefinement(getOption) {\n    return function (a) { return exports.isSome(getOption(a)); };\n}\nexports.getRefinement = getRefinement;\n// -------------------------------------------------------------------------------------\n// do notation\n// -------------------------------------------------------------------------------------\n/**\n * @since 2.9.0\n */\nexports.Do = \n/*#__PURE__*/\nexports.of({});\n/**\n * @since 2.8.0\n */\nvar bindTo = function (name) { return exports.map(function_1.bindTo_(name)); };\nexports.bindTo = bindTo;\n/**\n * @since 2.8.0\n */\nvar bind = function (name, f) {\n    return exports.chain(function (a) {\n        return function_1.pipe(f(a), exports.map(function (b) { return function_1.bind_(a, name, b); }));\n    });\n};\nexports.bind = bind;\n// -------------------------------------------------------------------------------------\n// pipeable sequence S\n// -------------------------------------------------------------------------------------\n/**\n * @since 2.8.0\n */\nvar apS = function (name, fb) {\n    return function_1.flow(exports.map(function (a) { return function (b) { return function_1.bind_(a, name, b); }; }), exports.ap(fb));\n};\nexports.apS = apS;\n// -------------------------------------------------------------------------------------\n// array utils\n// -------------------------------------------------------------------------------------\n/**\n *\n * @since 2.9.0\n */\nvar traverseArrayWithIndex = function (f) { return function (arr) {\n    // tslint:disable-next-line: readonly-array\n    var result = [];\n    for (var i = 0; i < arr.length; i++) {\n        var b = f(i, arr[i]);\n        if (exports.isNone(b)) {\n            return exports.none;\n        }\n        result.push(b.value);\n    }\n    return exports.some(result);\n}; };\nexports.traverseArrayWithIndex = traverseArrayWithIndex;\n/**\n * Runs an action for every element in array and accumulates the results in option\n *\n * this function have the same behavior of `A.sequence(O.option)` but it's optimized and perform better\n *\n * @example\n *\n * import * as A from 'fp-ts/Array'\n * import { traverseArray, some, fromPredicate, none } from 'fp-ts/Option'\n * import { pipe } from 'fp-ts/function'\n *\n * const arr = A.range(0, 10)\n * assert.deepStrictEqual(pipe(arr, traverseArray(some)), some(arr))\n * assert.deepStrictEqual(pipe(arr, traverseArray(fromPredicate((x) => x > 5))), none)\n *\n * @since 2.9.0\n */\nvar traverseArray = function (f) { return exports.traverseArrayWithIndex(function (_, a) { return f(a); }); };\nexports.traverseArray = traverseArray;\n/**\n * get an array of option and convert it to option of array\n *\n * this function have the same behavior of `A.sequence(O.option)` but it's optimized and perform better\n *\n * @example\n *\n * import * as A from 'fp-ts/Array'\n * import { sequenceArray, some, none, fromPredicate } from 'fp-ts/Option'\n * import { pipe } from 'fp-ts/function'\n *\n * const arr = A.range(0, 10)\n * assert.deepStrictEqual(pipe(arr, A.map(some), sequenceArray), some(arr))\n * assert.deepStrictEqual(pipe(arr, A.map(fromPredicate(x => x > 8)), sequenceArray), none)\n *\n * @since 2.9.0\n */\nexports.sequenceArray = \n/*#__PURE__*/\nexports.traverseArray(function_1.identity);\n"],"mappings":"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AACrE;AACAxF,OAAO,CAAC4C,OAAO,GAAGA,OAAO;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASD,QAAQ,CAAC4C,EAAE,EAAE;EAClB,OAAOA,EAAE,CAACL,IAAI,KAAK,MAAM,GAAGlF,OAAO,CAACiD,IAAI,GAAGjD,OAAO,CAACgD,IAAI,CAACuC,EAAE,CAACE,KAAK,CAAC;AACrE;AACAzF,OAAO,CAAC2C,QAAQ,GAAGA,QAAQ;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA3C,OAAO,CAAC0C,UAAU,GAAGC,QAAQ;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASF,IAAI,CAACiD,MAAM,EAAEC,MAAM,EAAE;EAC1B,OAAO,UAAUJ,EAAE,EAAE;IAAE,OAAQvF,OAAO,CAACkD,MAAM,CAACqC,EAAE,CAAC,GAAGG,MAAM,EAAE,GAAGC,MAAM,CAACJ,EAAE,CAACtF,KAAK,CAAC;EAAG,CAAC;AACvF;AACAD,OAAO,CAACyC,IAAI,GAAGA,IAAI;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASD,UAAU,CAAC+C,EAAE,EAAE;EACpB,OAAOvF,OAAO,CAACkD,MAAM,CAACqC,EAAE,CAAC,GAAG,IAAI,GAAGA,EAAE,CAACtF,KAAK;AAC/C;AACAD,OAAO,CAACwC,UAAU,GAAGA,UAAU;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASD,WAAW,CAACgD,EAAE,EAAE;EACrB,OAAOvF,OAAO,CAACkD,MAAM,CAACqC,EAAE,CAAC,GAAGK,SAAS,GAAGL,EAAE,CAACtF,KAAK;AACpD;AACAD,OAAO,CAACuC,WAAW,GAAGA,WAAW;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,IAAID,UAAU,GAAG,UAAUoD,MAAM,EAAE;EAAE,OAAO,UAAUH,EAAE,EAAE;IAAE,OAAQvF,OAAO,CAACkD,MAAM,CAACqC,EAAE,CAAC,GAAGG,MAAM,EAAE,GAAGH,EAAE,CAACtF,KAAK;EAAG,CAAC;AAAE,CAAC;AACnHD,OAAO,CAACsC,UAAU,GAAGA,UAAU;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAtC,OAAO,CAACqC,SAAS,GAAGrC,OAAO,CAACsC,UAAU;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASF,aAAa,CAACiD,CAAC,EAAE;EACtB,OAAO,YAAY;IACf,IAAIF,CAAC,GAAG,EAAE;IACV,KAAK,IAAIU,EAAE,GAAG,CAAC,EAAEA,EAAE,GAAGC,SAAS,CAACC,MAAM,EAAEF,EAAE,EAAE,EAAE;MAC1CV,CAAC,CAACU,EAAE,CAAC,GAAGC,SAAS,CAACD,EAAE,CAAC;IACzB;IACA,OAAO9C,YAAY,CAACsC,CAAC,CAACW,KAAK,CAAC,KAAK,CAAC,EAAEb,CAAC,CAAC,CAAC;EAC3C,CAAC;AACL;AACAnF,OAAO,CAACoC,aAAa,GAAGA,aAAa;AACrC;AACA;AACA;AACA;AACA;AACApC,OAAO,CAACmC,WAAW,GAAGD,cAAc;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,cAAc,CAACmD,CAAC,EAAE;EACvB,OAAO,UAAUE,EAAE,EAAE;IAAE,OAAQvF,OAAO,CAACkD,MAAM,CAACqC,EAAE,CAAC,GAAGvF,OAAO,CAACiD,IAAI,GAAGF,YAAY,CAACsC,CAAC,CAACE,EAAE,CAACtF,KAAK,CAAC,CAAC;EAAG,CAAC;AACpG;AACAD,OAAO,CAACkC,cAAc,GAAGA,cAAc;AACvC;AACA;AACA;AACA,IAAI+D,IAAI,GAAG,UAAUhB,EAAE,EAAEI,CAAC,EAAE;EAAE,OAAON,UAAU,CAACmB,IAAI,CAACjB,EAAE,EAAEjF,OAAO,CAACiC,GAAG,CAACoD,CAAC,CAAC,CAAC;AAAE,CAAC;AAC3E,IAAIc,GAAG,GAAG,UAAUC,GAAG,EAAEnB,EAAE,EAAE;EAAE,OAAOF,UAAU,CAACmB,IAAI,CAACE,GAAG,EAAEpG,OAAO,CAACgC,EAAE,CAACiD,EAAE,CAAC,CAAC;AAAE,CAAC;AAC7E,IAAIoB,MAAM,GAAG,UAAUd,EAAE,EAAEF,CAAC,EAAE;EAAE,OAAON,UAAU,CAACmB,IAAI,CAACX,EAAE,EAAEvF,OAAO,CAAC4B,KAAK,CAACyD,CAAC,CAAC,CAAC;AAAE,CAAC;AAC/E,IAAIiB,OAAO,GAAG,UAAUrB,EAAE,EAAEsB,CAAC,EAAElB,CAAC,EAAE;EAAE,OAAON,UAAU,CAACmB,IAAI,CAACjB,EAAE,EAAEjF,OAAO,CAACmB,MAAM,CAACoF,CAAC,EAAElB,CAAC,CAAC,CAAC;AAAE,CAAC;AACvF,IAAImB,QAAQ,GAAG,UAAUC,CAAC,EAAE;EACxB,IAAIC,QAAQ,GAAG1G,OAAO,CAACkB,OAAO,CAACuF,CAAC,CAAC;EACjC,OAAO,UAAUxB,EAAE,EAAEI,CAAC,EAAE;IAAE,OAAON,UAAU,CAACmB,IAAI,CAACjB,EAAE,EAAEyB,QAAQ,CAACrB,CAAC,CAAC,CAAC;EAAE,CAAC;AACxE,CAAC;AACD,IAAIsB,YAAY,GAAG,UAAU1B,EAAE,EAAEsB,CAAC,EAAElB,CAAC,EAAE;EAAE,OAAON,UAAU,CAACmB,IAAI,CAACjB,EAAE,EAAEjF,OAAO,CAACiB,WAAW,CAACsF,CAAC,EAAElB,CAAC,CAAC,CAAC;AAAE,CAAC;AACjG,IAAIuB,SAAS,GAAG,UAAUC,CAAC,EAAE;EACzB,IAAIC,SAAS,GAAG9G,OAAO,CAACU,QAAQ,CAACmG,CAAC,CAAC;EACnC,OAAO,UAAUE,EAAE,EAAE1B,CAAC,EAAE;IAAE,OAAON,UAAU,CAACmB,IAAI,CAACa,EAAE,EAAED,SAAS,CAACzB,CAAC,CAAC,CAAC;EAAE,CAAC;AACzE,CAAC;AACD;AACA,IAAI2B,IAAI,GAAG,UAAU/B,EAAE,EAAEgC,IAAI,EAAE;EAAE,OAAOlC,UAAU,CAACmB,IAAI,CAACjB,EAAE,EAAEjF,OAAO,CAACwB,GAAG,CAACyF,IAAI,CAAC,CAAC;AAAE,CAAC;AACjF,IAAIC,OAAO,GAAG,UAAUjC,EAAE,EAAEG,SAAS,EAAE;EACnC,OAAOL,UAAU,CAACmB,IAAI,CAACjB,EAAE,EAAEjF,OAAO,CAACc,MAAM,CAACsE,SAAS,CAAC,CAAC;AACzD,CAAC;AACD;AACA,IAAI+B,UAAU,GAAG,UAAUlC,EAAE,EAAEI,CAAC,EAAE;EAAE,OAAON,UAAU,CAACmB,IAAI,CAACjB,EAAE,EAAEjF,OAAO,CAACa,SAAS,CAACwE,CAAC,CAAC,CAAC;AAAE,CAAC;AACvF;AACA,IAAI+B,OAAO,GAAG,UAAUC,EAAE,EAAEhC,CAAC,EAAE;EAAE,OAAON,UAAU,CAACmB,IAAI,CAACmB,EAAE,EAAErH,OAAO,CAACqB,MAAM,CAACgE,CAAC,CAAC,CAAC;AAAE,CAAC;AACjF;AACA,IAAIiC,UAAU,GAAG,UAAUrC,EAAE,EAAEG,SAAS,EAAE;EAAE,OAAOL,UAAU,CAACmB,IAAI,CAACjB,EAAE,EAAEjF,OAAO,CAACY,SAAS,CAACwE,SAAS,CAAC,CAAC;AAAE,CAAC;AACvG;AACA,IAAImC,aAAa,GAAG,UAAUtC,EAAE,EAAEI,CAAC,EAAE;EAAE,OAAON,UAAU,CAACmB,IAAI,CAACjB,EAAE,EAAEjF,OAAO,CAACW,YAAY,CAAC0E,CAAC,CAAC,CAAC;AAAE,CAAC;AAC7F;AACA,IAAImC,OAAO,GAAG,UAAUX,CAAC,EAAE;EACvB,IAAIY,OAAO,GAAGzH,OAAO,CAACQ,MAAM,CAACqG,CAAC,CAAC;EAC/B,OAAO,UAAU5B,EAAE,EAAEI,CAAC,EAAE;IAAE,OAAON,UAAU,CAACmB,IAAI,CAACjB,EAAE,EAAEwC,OAAO,CAACpC,CAAC,CAAC,CAAC;EAAE,CAAC;AACvE,CAAC;AACD;AACA,IAAIqC,KAAK,GAAG,UAAUb,CAAC,EAAE;EACrB,IAAIc,KAAK,GAAG3H,OAAO,CAACO,IAAI,CAACsG,CAAC,CAAC;EAC3B,OAAO,UAAU5B,EAAE,EAAEI,CAAC,EAAE;IAAE,OAAON,UAAU,CAACmB,IAAI,CAACjB,EAAE,EAAE0C,KAAK,CAACtC,CAAC,CAAC,CAAC;EAAE,CAAC;AACrE,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIpD,GAAG,GAAG,UAAUoD,CAAC,EAAE;EAAE,OAAO,UAAUJ,EAAE,EAAE;IAC1C,OAAOjF,OAAO,CAACkD,MAAM,CAAC+B,EAAE,CAAC,GAAGjF,OAAO,CAACiD,IAAI,GAAGjD,OAAO,CAACgD,IAAI,CAACqC,CAAC,CAACJ,EAAE,CAAChF,KAAK,CAAC,CAAC;EACxE,CAAC;AAAE,CAAC;AACJD,OAAO,CAACiC,GAAG,GAAGA,GAAG;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,IAAID,EAAE,GAAG,UAAUiD,EAAE,EAAE;EAAE,OAAO,UAAUmB,GAAG,EAAE;IAC3C,OAAOpG,OAAO,CAACkD,MAAM,CAACkD,GAAG,CAAC,GAAGpG,OAAO,CAACiD,IAAI,GAAGjD,OAAO,CAACkD,MAAM,CAAC+B,EAAE,CAAC,GAAGjF,OAAO,CAACiD,IAAI,GAAGjD,OAAO,CAACgD,IAAI,CAACoD,GAAG,CAACnG,KAAK,CAACgF,EAAE,CAAChF,KAAK,CAAC,CAAC;EACrH,CAAC;AAAE,CAAC;AACJD,OAAO,CAACgC,EAAE,GAAGA,EAAE;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAID,OAAO,GAAG,UAAU6F,EAAE,EAAE;EACxB,OAAO7C,UAAU,CAAC8C,IAAI,CAAC7H,OAAO,CAACiC,GAAG,CAAC,UAAUkD,CAAC,EAAE;IAAE,OAAO,YAAY;MAAE,OAAOA,CAAC;IAAE,CAAC;EAAE,CAAC,CAAC,EAAEnF,OAAO,CAACgC,EAAE,CAAC4F,EAAE,CAAC,CAAC;AAC3G,CAAC;AACD5H,OAAO,CAAC+B,OAAO,GAAGA,OAAO;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAID,QAAQ,GAAG,UAAU8F,EAAE,EAAE;EACzB,OAAO7C,UAAU,CAAC8C,IAAI,CAAC7H,OAAO,CAACiC,GAAG,CAAC,YAAY;IAAE,OAAO,UAAUsE,CAAC,EAAE;MAAE,OAAOA,CAAC;IAAE,CAAC;EAAE,CAAC,CAAC,EAAEvG,OAAO,CAACgC,EAAE,CAAC4F,EAAE,CAAC,CAAC;AAC3G,CAAC;AACD5H,OAAO,CAAC8B,QAAQ,GAAGA,QAAQ;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA9B,OAAO,CAAC6B,EAAE,GAAG7B,OAAO,CAACgD,IAAI;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,IAAIpB,KAAK,GAAG,UAAUyD,CAAC,EAAE;EAAE,OAAO,UAAUE,EAAE,EAAE;IAC5C,OAAOvF,OAAO,CAACkD,MAAM,CAACqC,EAAE,CAAC,GAAGvF,OAAO,CAACiD,IAAI,GAAGoC,CAAC,CAACE,EAAE,CAACtF,KAAK,CAAC;EAC1D,CAAC;AAAE,CAAC;AACJD,OAAO,CAAC4B,KAAK,GAAGA,KAAK;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAID,UAAU,GAAG,UAAU0D,CAAC,EAAE;EAC1B,OAAOrF,OAAO,CAAC4B,KAAK,CAAC,UAAUuD,CAAC,EAAE;IAC9B,OAAOJ,UAAU,CAACmB,IAAI,CAACb,CAAC,CAACF,CAAC,CAAC,EAAEnF,OAAO,CAACiC,GAAG,CAAC,YAAY;MAAE,OAAOkD,CAAC;IAAE,CAAC,CAAC,CAAC;EACxE,CAAC,CAAC;AACN,CAAC;AACDnF,OAAO,CAAC2B,UAAU,GAAGA,UAAU;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA3B,OAAO,CAAC0B,OAAO,GACf;AACA1B,OAAO,CAAC4B,KAAK,CAACmD,UAAU,CAAC+C,QAAQ,CAAC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA,IAAIrG,IAAI,GAAG,UAAUwF,IAAI,EAAE;EAAE,OAAO,UAAUhC,EAAE,EAAE;IAC9C,OAAOjF,OAAO,CAACkD,MAAM,CAAC+B,EAAE,CAAC,GAAGgC,IAAI,EAAE,GAAGhC,EAAE;EAC3C,CAAC;AAAE,CAAC;AACJjF,OAAO,CAACyB,IAAI,GAAGA,IAAI;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAzB,OAAO,CAACwB,GAAG,GAAGxB,OAAO,CAACyB,IAAI;AAC1B;AACA;AACA;AACA;AACA,IAAIF,IAAI,GAAG,YAAY;EAAE,OAAOvB,OAAO,CAACiD,IAAI;AAAE,CAAC;AAC/CjD,OAAO,CAACuB,IAAI,GAAGA,IAAI;AACnB;AACA;AACA;AACA;AACA,IAAID,UAAU,GAAG,YAAY;EAAE,OAAOtB,OAAO,CAACiD,IAAI;AAAE,CAAC;AACrDjD,OAAO,CAACsB,UAAU,GAAGA,UAAU;AAC/B;AACA;AACA;AACA;AACA,IAAID,MAAM,GAAG,UAAUgE,CAAC,EAAE;EAAE,OAAO,UAAUgC,EAAE,EAAE;IAC7C,OAAOrH,OAAO,CAACkD,MAAM,CAACmE,EAAE,CAAC,GAAGrH,OAAO,CAACiD,IAAI,GAAGjD,OAAO,CAACgD,IAAI,CAACqC,CAAC,CAACgC,EAAE,CAAC,CAAC;EAClE,CAAC;AAAE,CAAC;AACJrH,OAAO,CAACqB,MAAM,GAAGA,MAAM;AACvB;AACA;AACA;AACA;AACA;AACA;AACArB,OAAO,CAACoB,SAAS,GACjB;AACApB,OAAO,CAACqB,MAAM,CAAC0D,UAAU,CAAC+C,QAAQ,CAAC;AACnC;AACA;AACA;AACA;AACA,IAAI3G,MAAM,GAAG,UAAUoF,CAAC,EAAElB,CAAC,EAAE;EAAE,OAAO,UAAUJ,EAAE,EAAE;IAChD,OAAOjF,OAAO,CAACkD,MAAM,CAAC+B,EAAE,CAAC,GAAGsB,CAAC,GAAGlB,CAAC,CAACkB,CAAC,EAAEtB,EAAE,CAAChF,KAAK,CAAC;EAClD,CAAC;AAAE,CAAC;AACJD,OAAO,CAACmB,MAAM,GAAGA,MAAM;AACvB;AACA;AACA;AACA;AACA,IAAID,OAAO,GAAG,UAAUuF,CAAC,EAAE;EAAE,OAAO,UAAUpB,CAAC,EAAE;IAAE,OAAO,UAAUJ,EAAE,EAAE;MACpE,OAAOjF,OAAO,CAACkD,MAAM,CAAC+B,EAAE,CAAC,GAAGwB,CAAC,CAACsB,KAAK,GAAG1C,CAAC,CAACJ,EAAE,CAAChF,KAAK,CAAC;IACrD,CAAC;EAAE,CAAC;AAAE,CAAC;AACPD,OAAO,CAACkB,OAAO,GAAGA,OAAO;AACzB;AACA;AACA;AACA;AACA,IAAID,WAAW,GAAG,UAAUsF,CAAC,EAAElB,CAAC,EAAE;EAAE,OAAO,UAAUJ,EAAE,EAAE;IACrD,OAAOjF,OAAO,CAACkD,MAAM,CAAC+B,EAAE,CAAC,GAAGsB,CAAC,GAAGlB,CAAC,CAACJ,EAAE,CAAChF,KAAK,EAAEsG,CAAC,CAAC;EAClD,CAAC;AAAE,CAAC;AACJvG,OAAO,CAACiB,WAAW,GAAGA,WAAW;AACjC;AACA;AACA;AACA;AACAjB,OAAO,CAACgB,OAAO,GAAGhB,OAAO,CAAC0B,OAAO;AACjC,IAAIsG,eAAe,GAAG;EAAExC,IAAI,EAAExF,OAAO,CAACiD,IAAI;EAAEwC,KAAK,EAAEzF,OAAO,CAACiD;AAAK,CAAC;AACjE;AACA;AACA;AACA;AACA,IAAIlC,QAAQ,GAAG,UAAUwE,EAAE,EAAE;EACzB,IAAI0C,CAAC,GAAGlD,UAAU,CAACmB,IAAI,CAACX,EAAE,EAAEvF,OAAO,CAACiC,GAAG,CAAC,UAAUqD,CAAC,EAAE;IAAE,OAAQ;MAC3DE,IAAI,EAAE5C,OAAO,CAAC0C,CAAC,CAAC;MAChBG,KAAK,EAAE9C,QAAQ,CAAC2C,CAAC;IACrB,CAAC;EAAG,CAAC,CAAC,CAAC;EACP,OAAOtF,OAAO,CAACkD,MAAM,CAAC+E,CAAC,CAAC,GAAGD,eAAe,GAAGC,CAAC,CAAChI,KAAK;AACxD,CAAC;AACDD,OAAO,CAACe,QAAQ,GAAGA,QAAQ;AAC3B;AACA;AACA;AACA;AACA,IAAID,MAAM,GAAG,UAAUsE,SAAS,EAAE;EAAE,OAAO,UAAUH,EAAE,EAAE;IAAE,OAAQjF,OAAO,CAACkD,MAAM,CAAC+B,EAAE,CAAC,GAAGjF,OAAO,CAACiD,IAAI,GAAGmC,SAAS,CAACH,EAAE,CAAChF,KAAK,CAAC,GAAGgF,EAAE,GAAGjF,OAAO,CAACiD,IAAI;EAAG,CAAC;AAAE,CAAC;AACrJjD,OAAO,CAACc,MAAM,GAAGA,MAAM;AACvB;AACA;AACA;AACA;AACA,IAAID,SAAS,GAAG,UAAUwE,CAAC,EAAE;EAAE,OAAO,UAAUJ,EAAE,EAAE;IAChD,OAAOjF,OAAO,CAACkD,MAAM,CAAC+B,EAAE,CAAC,GAAGjF,OAAO,CAACiD,IAAI,GAAGoC,CAAC,CAACJ,EAAE,CAAChF,KAAK,CAAC;EAC1D,CAAC;AAAE,CAAC;AACJD,OAAO,CAACa,SAAS,GAAGA,SAAS;AAC7B;AACA;AACA;AACA;AACA,IAAID,SAAS,GAAG,UAAUwE,SAAS,EAAE;EAAE,OAAO,UAAUH,EAAE,EAAE;IACxD,OAAO;MACHO,IAAI,EAAE0B,OAAO,CAACjC,EAAE,EAAE,UAAUE,CAAC,EAAE;QAAE,OAAO,CAACC,SAAS,CAACD,CAAC,CAAC;MAAE,CAAC,CAAC;MACzDM,KAAK,EAAEyB,OAAO,CAACjC,EAAE,EAAEG,SAAS;IAChC,CAAC;EACL,CAAC;AAAE,CAAC;AACJpF,OAAO,CAACY,SAAS,GAAGA,SAAS;AAC7B;AACA;AACA;AACA;AACA,IAAID,YAAY,GAAG,UAAU0E,CAAC,EAAE;EAAE,OAAON,UAAU,CAAC8C,IAAI,CAAC7H,OAAO,CAACiC,GAAG,CAACoD,CAAC,CAAC,EAAErF,OAAO,CAACe,QAAQ,CAAC;AAAE,CAAC;AAC7Ff,OAAO,CAACW,YAAY,GAAGA,YAAY;AACnC;AACA;AACA;AACA;AACA,IAAID,QAAQ,GAAG,UAAUmG,CAAC,EAAE;EAAE,OAAO,UAAUxB,CAAC,EAAE;IAAE,OAAO,UAAU0B,EAAE,EAAE;MAAE,OAAQ/G,OAAO,CAACkD,MAAM,CAAC6D,EAAE,CAAC,GAAGF,CAAC,CAAChF,EAAE,CAAC7B,OAAO,CAACiD,IAAI,CAAC,GAAG4D,CAAC,CAAC5E,GAAG,CAACoD,CAAC,CAAC0B,EAAE,CAAC9G,KAAK,CAAC,EAAED,OAAO,CAACgD,IAAI,CAAC;IAAG,CAAC;EAAE,CAAC;AAAE,CAAC;AACvKhD,OAAO,CAACU,QAAQ,GAAGA,QAAQ;AAC3B;AACA;AACA;AACA;AACA,IAAID,QAAQ,GAAG,UAAUoG,CAAC,EAAE;EAAE,OAAO,UAAUE,EAAE,EAAE;IAAE,OAAQ/G,OAAO,CAACkD,MAAM,CAAC6D,EAAE,CAAC,GAAGF,CAAC,CAAChF,EAAE,CAAC7B,OAAO,CAACiD,IAAI,CAAC,GAAG4D,CAAC,CAAC5E,GAAG,CAAC8E,EAAE,CAAC9G,KAAK,EAAED,OAAO,CAACgD,IAAI,CAAC;EAAG,CAAC;AAAE,CAAC;AAC3IhD,OAAO,CAACS,QAAQ,GAAGA,QAAQ;AAC3B;AACA;AACA;AACA;AACA,IAAID,MAAM,GAAG,UAAUqG,CAAC,EAAE;EAAE,OAAO,UAAUxB,CAAC,EAAE;IAAE,OAAO,UAAUJ,EAAE,EAAE;MAAE,OAAQjF,OAAO,CAACkD,MAAM,CAAC+B,EAAE,CAAC,GAAG4B,CAAC,CAAChF,EAAE,CAAC7B,OAAO,CAACiD,IAAI,CAAC,GAAGoC,CAAC,CAACJ,EAAE,CAAChF,KAAK,CAAC;IAAG,CAAC;EAAE,CAAC;AAAE,CAAC;AAChJD,OAAO,CAACQ,MAAM,GAAGA,MAAM;AACvB;AACA;AACA;AACA;AACA,IAAID,IAAI,GAAG,UAAUsG,CAAC,EAAE;EAAE,OAAO,UAAUxB,CAAC,EAAE;IAAE,OAAO,UAAUJ,EAAE,EAAE;MACjE,OAAOjF,OAAO,CAACkD,MAAM,CAAC+B,EAAE,CAAC,GACnB4B,CAAC,CAAChF,EAAE,CAAC;QACH2D,IAAI,EAAExF,OAAO,CAACiD,IAAI;QAClBwC,KAAK,EAAEzF,OAAO,CAACiD;MACnB,CAAC,CAAC,GACA4D,CAAC,CAAC5E,GAAG,CAACoD,CAAC,CAACJ,EAAE,CAAChF,KAAK,CAAC,EAAE,UAAUqF,CAAC,EAAE;QAAE,OAAQ;UACxCE,IAAI,EAAE5C,OAAO,CAAC0C,CAAC,CAAC;UAChBG,KAAK,EAAE9C,QAAQ,CAAC2C,CAAC;QACrB,CAAC;MAAG,CAAC,CAAC;IACd,CAAC;EAAE,CAAC;AAAE,CAAC;AACPtF,OAAO,CAACO,IAAI,GAAGA,IAAI;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACAP,OAAO,CAACM,GAAG,GAAG,QAAQ;AACtB;AACA;AACA;AACA;AACA,SAASD,OAAO,CAAC6H,CAAC,EAAE;EAChB,OAAO;IACHC,IAAI,EAAE,UAAU5C,EAAE,EAAE;MAAE,OAAQvF,OAAO,CAACkD,MAAM,CAACqC,EAAE,CAAC,GAAG,MAAM,GAAG,OAAO,GAAG2C,CAAC,CAACC,IAAI,CAAC5C,EAAE,CAACtF,KAAK,CAAC,GAAG,GAAG;IAAG;EACnG,CAAC;AACL;AACAD,OAAO,CAACK,OAAO,GAAGA,OAAO;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASD,KAAK,CAACgI,CAAC,EAAE;EACd,OAAO;IACHC,MAAM,EAAE,UAAUC,CAAC,EAAEC,CAAC,EAAE;MAAE,OAAOD,CAAC,KAAKC,CAAC,KAAKvI,OAAO,CAACkD,MAAM,CAACoF,CAAC,CAAC,GAAGtI,OAAO,CAACkD,MAAM,CAACqF,CAAC,CAAC,GAAGvI,OAAO,CAACkD,MAAM,CAACqF,CAAC,CAAC,GAAG,KAAK,GAAGH,CAAC,CAACC,MAAM,CAACC,CAAC,CAACrI,KAAK,EAAEsI,CAAC,CAACtI,KAAK,CAAC,CAAC;IAAE;EAClJ,CAAC;AACL;AACAD,OAAO,CAACI,KAAK,GAAGA,KAAK;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASD,MAAM,CAACqI,CAAC,EAAE;EACf,OAAO;IACHH,MAAM,EAAEjI,KAAK,CAACoI,CAAC,CAAC,CAACH,MAAM;IACvBI,OAAO,EAAE,UAAUH,CAAC,EAAEC,CAAC,EAAE;MAAE,OAAQD,CAAC,KAAKC,CAAC,GAAG,CAAC,GAAGvI,OAAO,CAACmD,MAAM,CAACmF,CAAC,CAAC,GAAItI,OAAO,CAACmD,MAAM,CAACoF,CAAC,CAAC,GAAGC,CAAC,CAACC,OAAO,CAACH,CAAC,CAACrI,KAAK,EAAEsI,CAAC,CAACtI,KAAK,CAAC,GAAG,CAAC,GAAI,CAAC,CAAC;IAAG;EACtI,CAAC;AACL;AACAD,OAAO,CAACG,MAAM,GAAGA,MAAM;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASD,iBAAiB,CAACgI,CAAC,EAAE;EAC1B,OAAO;IACHQ,MAAM,EAAE,UAAUJ,CAAC,EAAEC,CAAC,EAAE;MAAE,OAAQvI,OAAO,CAACmD,MAAM,CAACmF,CAAC,CAAC,IAAItI,OAAO,CAACmD,MAAM,CAACoF,CAAC,CAAC,GAAGvI,OAAO,CAACgD,IAAI,CAACkF,CAAC,CAACQ,MAAM,CAACJ,CAAC,CAACrI,KAAK,EAAEsI,CAAC,CAACtI,KAAK,CAAC,CAAC,GAAGD,OAAO,CAACiD,IAAI;IAAG;EACzI,CAAC;AACL;AACAjD,OAAO,CAACE,iBAAiB,GAAGA,iBAAiB;AAC7C;AACA;AACA;AACA;AACA,SAAS4E,cAAc,CAAC2B,CAAC,EAAE;EACvB,OAAO;IACHiC,MAAM,EAAExI,iBAAiB,CAACuG,CAAC,CAAC,CAACiC,MAAM;IACnCX,KAAK,EAAE/H,OAAO,CAACgD,IAAI,CAACyD,CAAC,CAACsB,KAAK;EAC/B,CAAC;AACL;AACA/H,OAAO,CAAC8E,cAAc,GAAGA,cAAc;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASD,cAAc,GAAG;EACtB,OAAO;IACH6D,MAAM,EAAE,UAAUJ,CAAC,EAAEC,CAAC,EAAE;MAAE,OAAQvI,OAAO,CAACkD,MAAM,CAACoF,CAAC,CAAC,GAAGC,CAAC,GAAGD,CAAC;IAAG,CAAC;IAC/DP,KAAK,EAAE/H,OAAO,CAACiD;EACnB,CAAC;AACL;AACAjD,OAAO,CAAC6E,cAAc,GAAGA,cAAc;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASD,aAAa,GAAG;EACrB,OAAO;IACH8D,MAAM,EAAE,UAAUJ,CAAC,EAAEC,CAAC,EAAE;MAAE,OAAQvI,OAAO,CAACkD,MAAM,CAACqF,CAAC,CAAC,GAAGD,CAAC,GAAGC,CAAC;IAAG,CAAC;IAC/DR,KAAK,EAAE/H,OAAO,CAACiD;EACnB,CAAC;AACL;AACAjD,OAAO,CAAC4E,aAAa,GAAGA,aAAa;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASD,SAAS,CAACuD,CAAC,EAAE;EAClB,OAAO;IACHQ,MAAM,EAAE,UAAUJ,CAAC,EAAEC,CAAC,EAAE;MAAE,OAAQvI,OAAO,CAACkD,MAAM,CAACoF,CAAC,CAAC,GAAGC,CAAC,GAAGvI,OAAO,CAACkD,MAAM,CAACqF,CAAC,CAAC,GAAGD,CAAC,GAAGtI,OAAO,CAACgD,IAAI,CAACkF,CAAC,CAACQ,MAAM,CAACJ,CAAC,CAACrI,KAAK,EAAEsI,CAAC,CAACtI,KAAK,CAAC,CAAC;IAAG,CAAC;IAC9H8H,KAAK,EAAE/H,OAAO,CAACiD;EACnB,CAAC;AACL;AACAjD,OAAO,CAAC2E,SAAS,GAAGA,SAAS;AAC7B;AACA;AACA;AACA;AACA3E,OAAO,CAAC0E,OAAO,GAAG;EACdpE,GAAG,EAAEN,OAAO,CAACM,GAAG;EAChB2B,GAAG,EAAEgE;AACT,CAAC;AACD;AACA;AACA;AACA;AACAjG,OAAO,CAACyE,WAAW,GAAG;EAClBnE,GAAG,EAAEN,OAAO,CAACM,GAAG;EAChB2B,GAAG,EAAEgE,IAAI;EACTjE,EAAE,EAAEmE,GAAG;EACPtE,EAAE,EAAE7B,OAAO,CAAC6B;AAChB,CAAC;AACD;AACA;AACA;AACA;AACA7B,OAAO,CAACwE,KAAK,GAAG;EACZlE,GAAG,EAAEN,OAAO,CAACM,GAAG;EAChB2B,GAAG,EAAEgE,IAAI;EACTjE,EAAE,EAAEmE,GAAG;EACPtE,EAAE,EAAE7B,OAAO,CAAC6B,EAAE;EACdD,KAAK,EAAEyE;AACX,CAAC;AACD;AACA;AACA;AACA;AACArG,OAAO,CAACuE,QAAQ,GAAG;EACfjE,GAAG,EAAEN,OAAO,CAACM,GAAG;EAChBa,MAAM,EAAEmF,OAAO;EACfpF,OAAO,EAAEsF,QAAQ;EACjBvF,WAAW,EAAE0F;AACjB,CAAC;AACD;AACA;AACA;AACA;AACA3G,OAAO,CAACsE,GAAG,GAAG;EACVhE,GAAG,EAAEN,OAAO,CAACM,GAAG;EAChB2B,GAAG,EAAEgE,IAAI;EACTzE,GAAG,EAAEwF;AACT,CAAC;AACD;AACA;AACA;AACA;AACAhH,OAAO,CAACqE,WAAW,GAAG;EAClB/D,GAAG,EAAEN,OAAO,CAACM,GAAG;EAChB2B,GAAG,EAAEgE,IAAI;EACTjE,EAAE,EAAEmE,GAAG;EACPtE,EAAE,EAAE7B,OAAO,CAAC6B,EAAE;EACdL,GAAG,EAAEwF,IAAI;EACTzF,IAAI,EAAEvB,OAAO,CAACuB;AAClB,CAAC;AACD;AACA;AACA;AACA;AACAvB,OAAO,CAACoE,MAAM,GAAG;EACb9D,GAAG,EAAEN,OAAO,CAACM,GAAG;EAChB2B,GAAG,EAAEgE,IAAI;EACT5E,MAAM,EAAE+F;AACZ,CAAC;AACD;AACA;AACA;AACA;AACApH,OAAO,CAACmE,WAAW,GAAG;EAClB7D,GAAG,EAAEN,OAAO,CAACM,GAAG;EAChBU,OAAO,EAAEhB,OAAO,CAACgB,OAAO;EACxBD,QAAQ,EAAEf,OAAO,CAACe;AACtB,CAAC;AACD;AACA;AACA;AACA;AACAf,OAAO,CAACkE,UAAU,GAAG;EACjB5D,GAAG,EAAEN,OAAO,CAACM,GAAG;EAChB2B,GAAG,EAAEgE,IAAI;EACTjF,OAAO,EAAEhB,OAAO,CAACgB,OAAO;EACxBD,QAAQ,EAAEf,OAAO,CAACe,QAAQ;EAC1BD,MAAM,EAAEoG,OAAO;EACfrG,SAAS,EAAEsG,UAAU;EACrBvG,SAAS,EAAE0G,UAAU;EACrB3G,YAAY,EAAE4G;AAClB,CAAC;AACD;AACA;AACA;AACA;AACAvH,OAAO,CAACiE,WAAW,GAAG;EAClB3D,GAAG,EAAEN,OAAO,CAACM,GAAG;EAChB2B,GAAG,EAAEgE,IAAI;EACT9E,MAAM,EAAEmF,OAAO;EACfpF,OAAO,EAAEsF,QAAQ;EACjBvF,WAAW,EAAE0F,YAAY;EACzBjG,QAAQ,EAAEkG,SAAS;EACnBnG,QAAQ,EAAET,OAAO,CAACS;AACtB,CAAC;AACD;AACA;AACA;AACA;AACAT,OAAO,CAACgE,UAAU,GAAG;EACjB1D,GAAG,EAAEN,OAAO,CAACM,GAAG;EAChB2B,GAAG,EAAEgE,IAAI;EACT9E,MAAM,EAAEmF,OAAO;EACfpF,OAAO,EAAEsF,QAAQ;EACjBvF,WAAW,EAAE0F,YAAY;EACzBjG,QAAQ,EAAEkG,SAAS;EACnBnG,QAAQ,EAAET,OAAO,CAACS,QAAQ;EAC1BO,OAAO,EAAEhB,OAAO,CAACgB,OAAO;EACxBD,QAAQ,EAAEf,OAAO,CAACe,QAAQ;EAC1BD,MAAM,EAAEoG,OAAO;EACfrG,SAAS,EAAEsG,UAAU;EACrBvG,SAAS,EAAE0G,UAAU;EACrB3G,YAAY,EAAE4G,aAAa;EAC3B/G,MAAM,EAAEgH,OAAO;EACfjH,IAAI,EAAEmH;AACV,CAAC;AACD;AACA;AACA;AACA;AACA1H,OAAO,CAAC+D,UAAU,GAAG;EACjBzD,GAAG,EAAEN,OAAO,CAACM,GAAG;EAChB2B,GAAG,EAAEgE,IAAI;EACTjE,EAAE,EAAEmE,GAAG;EACPtE,EAAE,EAAE7B,OAAO,CAAC6B,EAAE;EACdD,KAAK,EAAEyE,MAAM;EACb/E,UAAU,EAAEtB,OAAO,CAACsB;AACxB,CAAC;AACD;AACA;AACA;AACA;AACA;AACAtB,OAAO,CAAC8D,MAAM,GAAG;EACbxD,GAAG,EAAEN,OAAO,CAACM,GAAG;EAChB2B,GAAG,EAAEgE,IAAI;EACTpE,EAAE,EAAE7B,OAAO,CAAC6B,EAAE;EACdG,EAAE,EAAEmE,GAAG;EACPvE,KAAK,EAAEyE,MAAM;EACblF,MAAM,EAAEmF,OAAO;EACfpF,OAAO,EAAEsF,QAAQ;EACjBvF,WAAW,EAAE0F,YAAY;EACzBjG,QAAQ,EAAEkG,SAAS;EACnBnG,QAAQ,EAAET,OAAO,CAACS,QAAQ;EAC1Bc,IAAI,EAAEvB,OAAO,CAACuB,IAAI;EAClBC,GAAG,EAAEwF,IAAI;EACT3F,MAAM,EAAE+F,OAAO;EACfpG,OAAO,EAAEhB,OAAO,CAACgB,OAAO;EACxBD,QAAQ,EAAEf,OAAO,CAACe,QAAQ;EAC1BD,MAAM,EAAEoG,OAAO;EACfrG,SAAS,EAAEsG,UAAU;EACrBvG,SAAS,EAAE0G,UAAU;EACrB3G,YAAY,EAAE4G,aAAa;EAC3B/G,MAAM,EAAEgH,OAAO;EACfjH,IAAI,EAAEmH,KAAK;EACXpG,UAAU,EAAEtB,OAAO,CAACsB;AACxB,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASuC,IAAI,CAACuE,CAAC,EAAE;EACb,OAAO,UAAUjD,CAAC,EAAEI,EAAE,EAAE;IAAE,OAAQvF,OAAO,CAACkD,MAAM,CAACqC,EAAE,CAAC,GAAG,KAAK,GAAG6C,CAAC,CAACC,MAAM,CAAClD,CAAC,EAAEI,EAAE,CAACtF,KAAK,CAAC;EAAG,CAAC;AAC5F;AACAD,OAAO,CAAC6D,IAAI,GAAGA,IAAI;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASD,MAAM,CAACwB,SAAS,EAAE;EACvB,OAAO,UAAUG,EAAE,EAAE;IAAE,OAAQvF,OAAO,CAACkD,MAAM,CAACqC,EAAE,CAAC,GAAG,KAAK,GAAGH,SAAS,CAACG,EAAE,CAACtF,KAAK,CAAC;EAAG,CAAC;AACvF;AACAD,OAAO,CAAC4D,MAAM,GAAGA,MAAM;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASD,aAAa,CAACgF,SAAS,EAAE;EAC9B,OAAO,UAAUxD,CAAC,EAAE;IAAE,OAAOnF,OAAO,CAACmD,MAAM,CAACwF,SAAS,CAACxD,CAAC,CAAC,CAAC;EAAE,CAAC;AAChE;AACAnF,OAAO,CAAC2D,aAAa,GAAGA,aAAa;AACrC;AACA;AACA;AACA;AACA;AACA;AACA3D,OAAO,CAAC0D,EAAE,GACV;AACA1D,OAAO,CAAC6B,EAAE,CAAC,CAAC,CAAC,CAAC;AACd;AACA;AACA;AACA,IAAI4B,MAAM,GAAG,UAAUmF,IAAI,EAAE;EAAE,OAAO5I,OAAO,CAACiC,GAAG,CAAC8C,UAAU,CAAC8D,OAAO,CAACD,IAAI,CAAC,CAAC;AAAE,CAAC;AAC9E5I,OAAO,CAACyD,MAAM,GAAGA,MAAM;AACvB;AACA;AACA;AACA,IAAID,IAAI,GAAG,UAAUoF,IAAI,EAAEvD,CAAC,EAAE;EAC1B,OAAOrF,OAAO,CAAC4B,KAAK,CAAC,UAAUuD,CAAC,EAAE;IAC9B,OAAOJ,UAAU,CAACmB,IAAI,CAACb,CAAC,CAACF,CAAC,CAAC,EAAEnF,OAAO,CAACiC,GAAG,CAAC,UAAUsE,CAAC,EAAE;MAAE,OAAOxB,UAAU,CAAC+D,KAAK,CAAC3D,CAAC,EAAEyD,IAAI,EAAErC,CAAC,CAAC;IAAE,CAAC,CAAC,CAAC;EACpG,CAAC,CAAC;AACN,CAAC;AACDvG,OAAO,CAACwD,IAAI,GAAGA,IAAI;AACnB;AACA;AACA;AACA;AACA;AACA;AACA,IAAID,GAAG,GAAG,UAAUqF,IAAI,EAAEhB,EAAE,EAAE;EAC1B,OAAO7C,UAAU,CAAC8C,IAAI,CAAC7H,OAAO,CAACiC,GAAG,CAAC,UAAUkD,CAAC,EAAE;IAAE,OAAO,UAAUoB,CAAC,EAAE;MAAE,OAAOxB,UAAU,CAAC+D,KAAK,CAAC3D,CAAC,EAAEyD,IAAI,EAAErC,CAAC,CAAC;IAAE,CAAC;EAAE,CAAC,CAAC,EAAEvG,OAAO,CAACgC,EAAE,CAAC4F,EAAE,CAAC,CAAC;AACvI,CAAC;AACD5H,OAAO,CAACuD,GAAG,GAAGA,GAAG;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAID,sBAAsB,GAAG,UAAU+B,CAAC,EAAE;EAAE,OAAO,UAAU0D,GAAG,EAAE;IAC9D;IACA,IAAIC,MAAM,GAAG,EAAE;IACf,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,GAAG,CAAChD,MAAM,EAAEkD,CAAC,EAAE,EAAE;MACjC,IAAI1C,CAAC,GAAGlB,CAAC,CAAC4D,CAAC,EAAEF,GAAG,CAACE,CAAC,CAAC,CAAC;MACpB,IAAIjJ,OAAO,CAACkD,MAAM,CAACqD,CAAC,CAAC,EAAE;QACnB,OAAOvG,OAAO,CAACiD,IAAI;MACvB;MACA+F,MAAM,CAACE,IAAI,CAAC3C,CAAC,CAACtG,KAAK,CAAC;IACxB;IACA,OAAOD,OAAO,CAACgD,IAAI,CAACgG,MAAM,CAAC;EAC/B,CAAC;AAAE,CAAC;AACJhJ,OAAO,CAACsD,sBAAsB,GAAGA,sBAAsB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAID,aAAa,GAAG,UAAUgC,CAAC,EAAE;EAAE,OAAOrF,OAAO,CAACsD,sBAAsB,CAAC,UAAU6F,CAAC,EAAEhE,CAAC,EAAE;IAAE,OAAOE,CAAC,CAACF,CAAC,CAAC;EAAE,CAAC,CAAC;AAAE,CAAC;AAC7GnF,OAAO,CAACqD,aAAa,GAAGA,aAAa;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACArD,OAAO,CAACoD,aAAa,GACrB;AACApD,OAAO,CAACqD,aAAa,CAAC0B,UAAU,CAAC+C,QAAQ,CAAC"},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"var _jsxFileName = \"/Users/arthurfrancis/Documents/repo/imx-learning/workflows/link-app/react/src/Inventory.tsx\",\n  _s = $RefreshSig$();\nimport { ERC721TokenType } from '@imtbl/imx-sdk';\nimport { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nrequire('dotenv').config();\nconst Inventory = _ref => {\n  _s();\n  var _inventory$result;\n  let {\n    client,\n    link,\n    wallet\n  } = _ref;\n  const [inventory, setInventory] = useState(Object);\n  // minting\n  const [mintTokenId, setMintTokenId] = useState('');\n  const [mintBlueprint, setMintBlueprint] = useState('');\n  const [mintTokenIdv2, setMintTokenIdv2] = useState('');\n  const [mintBlueprintv2, setMintBlueprintv2] = useState('');\n\n  // buying and selling\n  const [sellAmount, setSellAmount] = useState('');\n  const [sellTokenAddress, setSellTokenAddress] = useState('');\n  const [sellCancelOrder, setSellCancelOrder] = useState('');\n\n  // transfers nft\n  const [colAddress, setCollectionAddress] = useState('');\n  const [tokenId, setTokenId] = useState('');\n  const [toAddress, setToAddress] = useState('');\n  useEffect(() => {\n    load();\n  }, []);\n  async function load() {\n    setInventory(await client.getAssets({\n      user: wallet,\n      sell_orders: true\n    }));\n  }\n  ;\n\n  // helper function to generate random ids\n  function random() {\n    const min = 1;\n    const max = 1000000000;\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n  }\n  async function linkTransfer() {\n    try {\n      // Call the method\n      let result = await link.transfer([{\n        type: ERC721TokenType,\n        amount: \"0.05\",\n        toAddress: toA\n      }]);\n      // Print the result\n      console.log(result);\n    } catch (error) {\n      // Catch and print out the error\n      console.error(error);\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"table\", {\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: /*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"Transfers\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 69,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Transfer NFT to Another L2 address:\", /*#__PURE__*/_jsxDEV(\"label\", {\n                children: [\"Collection Address:\", /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"text\",\n                  value: colAddress,\n                  onChange: e => setCollectionAddress(e.target.value)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 75,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 73,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                children: [\"Token ID:\", /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"text\",\n                  value: tokenId,\n                  onChange: e => setTokenId(e.target.value)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 79,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 77,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                children: [\"To Address: input type=\\\"text\\\" value=\", toAddress, \" onChange=\", e => setToAddress(e.target.value), \" />\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 81,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: linkTransfer,\n                children: \"Transfer\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 85,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 71,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: /*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"Inventory\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 92,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: (_inventory$result = inventory.result) === null || _inventory$result === void 0 ? void 0 : _inventory$result.map((data, key) => {\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                children: data.token_address + \" , \" + data.token_id + \" ,\" + data.image_url + \", \" + data.status\n              }, key, false, {\n                fileName: _jsxFileName,\n                lineNumber: 97,\n                columnNumber: 21\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n};\n_s(Inventory, \"U64VQUqUhv8eR2e3mmu52X2Rqeg=\");\n_c = Inventory;\nexport default Inventory;\nvar _c;\n$RefreshReg$(_c, \"Inventory\");","map":{"version":3,"names":["ERC721TokenType","useEffect","useState","require","config","Inventory","client","link","wallet","inventory","setInventory","Object","mintTokenId","setMintTokenId","mintBlueprint","setMintBlueprint","mintTokenIdv2","setMintTokenIdv2","mintBlueprintv2","setMintBlueprintv2","sellAmount","setSellAmount","sellTokenAddress","setSellTokenAddress","sellCancelOrder","setSellCancelOrder","colAddress","setCollectionAddress","tokenId","setTokenId","toAddress","setToAddress","load","getAssets","user","sell_orders","random","min","max","Math","floor","linkTransfer","result","transfer","type","amount","toA","console","log","error","e","target","value","map","data","key","token_address","token_id","image_url","status"],"sources":["/Users/arthurfrancis/Documents/repo/imx-learning/workflows/link-app/react/src/Inventory.tsx"],"sourcesContent":["import { ethers } from 'ethers';\nimport { Link, ImmutableXClient, ImmutableMethodResults, MintableERC721TokenType, ERC721TokenType } from '@imtbl/imx-sdk';\nimport { useEffect, useState } from 'react';\nrequire('dotenv').config();\n\ninterface InventoryProps {\n  client: ImmutableXClient,\n  link: Link,\n  wallet: string\n}\n\nconst Inventory = ({client, link, wallet}: InventoryProps) => {\n  const [inventory, setInventory] = useState<ImmutableMethodResults.ImmutableGetAssetsResult>(Object);\n  // minting\n  const [mintTokenId, setMintTokenId] = useState('');\n  const [mintBlueprint, setMintBlueprint] = useState('');\n  const [mintTokenIdv2, setMintTokenIdv2] = useState('');\n  const [mintBlueprintv2, setMintBlueprintv2] = useState('');\n\n  // buying and selling\n  const [sellAmount, setSellAmount] = useState('');\n  const [sellTokenAddress, setSellTokenAddress] = useState('');\n  const [sellCancelOrder, setSellCancelOrder] = useState('');\n\n  // transfers nft\n  const [colAddress, setCollectionAddress] = useState('');\n  const [tokenId, setTokenId] = useState('');\n  const [toAddress, setToAddress] = useState('');\n\n  useEffect(() => {\n    load()\n  }, [])\n\n  async function load(): Promise<void> {\n    setInventory(await client.getAssets({user: wallet, sell_orders: true}))\n  };\n\n  // helper function to generate random ids\n  function random()\n    : number {\n    const min = 1;\n    const max = 1000000000;\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n  }\n\n  async function linkTransfer() {\n    try{\n      // Call the method\n      let result = await link.transfer([\n        {\n            type: ERC721TokenType,\n            amount: \"0.05\",\n            toAddress: toA\n        }\n      ])\n      // Print the result\n      console.log(result)\n    }catch(error){\n      // Catch and print out the error\n      console.error(error)\n    }\n  }\n\n  return (\n    <div>\n      <table>\n        <thead>\n          <tr>\n            <th><h3>Transfers</h3></th>\n            <td>\n              <p>\n                Transfer NFT to Another L2 address:\n                <label>\n                  Collection Address:\n                  <input type=\"text\" value={colAddress} onChange={e => setCollectionAddress(e.target.value)} />\n                </label>\n                <label>\n                  Token ID:\n                  <input type=\"text\" value={tokenId} onChange={e => setTokenId(e.target.value)} />\n                </label>\n                <label>\n                  To Address:\n                  input type=\"text\" value={toAddress} onChange={e => setToAddress(e.target.value)} />\n                </label>\n                <button onClick={linkTransfer}>Transfer</button>\n              </p>\n            </td>\n          </tr>\n        </thead>\n        <tbody>\n        <tr>\n            <th><h3>Inventory</h3></th>\n            <td>\n              {\n                inventory.result?.map((data, key) => {\n                  return (\n                    <div key={key}>\n                      {data.token_address +\n                        \" , \" +\n                        data.token_id +\n                        \" ,\" +\n                        data.image_url +\n                        \", \" +\n                        data.status}\n                    </div>\n                  )\n                })\n              }\n            </td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n  );\n}\n\nexport default Inventory;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { tailRec } from './ChainRec';\nimport { identity, pipe, bind_, bindTo_, flow } from './function';\n// -------------------------------------------------------------------------------------\n// guards\n// -------------------------------------------------------------------------------------\n/**\n * Returns `true` if the either is an instance of `Left`, `false` otherwise.\n *\n * @category guards\n * @since 2.0.0\n */\nexport var isLeft = function (ma) {\n  return ma._tag === 'Left';\n};\n/**\n * Returns `true` if the either is an instance of `Right`, `false` otherwise.\n *\n * @category guards\n * @since 2.0.0\n */\nexport var isRight = function (ma) {\n  return ma._tag === 'Right';\n};\n// -------------------------------------------------------------------------------------\n// constructors\n// -------------------------------------------------------------------------------------\n/**\n * Constructs a new `Either` holding a `Left` value. This usually represents a failure, due to the right-bias of this\n * structure.\n *\n * @category constructors\n * @since 2.0.0\n */\nexport var left = function (e) {\n  return {\n    _tag: 'Left',\n    left: e\n  };\n};\n/**\n * Constructs a new `Either` holding a `Right` value. This usually represents a successful value due to the right bias\n * of this structure.\n *\n * @category constructors\n * @since 2.0.0\n */\nexport var right = function (a) {\n  return {\n    _tag: 'Right',\n    right: a\n  };\n};\n// TODO: make lazy in v3\n/**\n * Takes a default and a nullable value, if the value is not nully, turn it into a `Right`, if the value is nully use\n * the provided default as a `Left`.\n *\n * @example\n * import { fromNullable, left, right } from 'fp-ts/Either'\n *\n * const parse = fromNullable('nully')\n *\n * assert.deepStrictEqual(parse(1), right(1))\n * assert.deepStrictEqual(parse(null), left('nully'))\n *\n * @category constructors\n * @since 2.0.0\n */\nexport function fromNullable(e) {\n  return function (a) {\n    return a == null ? left(e) : right(a);\n  };\n}\n// TODO: `onError => Lazy<A> => Either` in v3\n/**\n * Constructs a new `Either` from a function that might throw.\n *\n * @example\n * import { Either, left, right, tryCatch } from 'fp-ts/Either'\n *\n * const unsafeHead = <A>(as: Array<A>): A => {\n *   if (as.length > 0) {\n *     return as[0]\n *   } else {\n *     throw new Error('empty array')\n *   }\n * }\n *\n * const head = <A>(as: Array<A>): Either<Error, A> => {\n *   return tryCatch(() => unsafeHead(as), e => (e instanceof Error ? e : new Error('unknown error')))\n * }\n *\n * assert.deepStrictEqual(head([]), left(new Error('empty array')))\n * assert.deepStrictEqual(head([1, 2, 3]), right(1))\n *\n * @category constructors\n * @since 2.0.0\n */\nexport function tryCatch(f, onError) {\n  try {\n    return right(f());\n  } catch (e) {\n    return left(onError(e));\n  }\n}\n// TODO curry in v3\n/**\n * Converts a JavaScript Object Notation (JSON) string into an object.\n *\n * @example\n * import { parseJSON, toError, right, left } from 'fp-ts/Either'\n *\n * assert.deepStrictEqual(parseJSON('{\"a\":1}', toError), right({ a: 1 }))\n * assert.deepStrictEqual(parseJSON('{\"a\":}', toError), left(new SyntaxError('Unexpected token } in JSON at position 5')))\n *\n * @category constructors\n * @since 2.0.0\n */\nexport function parseJSON(s, onError) {\n  return tryCatch(function () {\n    return JSON.parse(s);\n  }, onError);\n}\n// TODO curry in v3\n/**\n * Converts a JavaScript value to a JavaScript Object Notation (JSON) string.\n *\n * @example\n * import * as E from 'fp-ts/Either'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(E.stringifyJSON({ a: 1 }, E.toError), E.right('{\"a\":1}'))\n * const circular: any = { ref: null }\n * circular.ref = circular\n * assert.deepStrictEqual(\n *   pipe(\n *     E.stringifyJSON(circular, E.toError),\n *     E.mapLeft(e => e.message.includes('Converting circular structure to JSON'))\n *   ),\n *   E.left(true)\n * )\n *\n * @category constructors\n * @since 2.0.0\n */\nexport function stringifyJSON(u, onError) {\n  return tryCatch(function () {\n    return JSON.stringify(u);\n  }, onError);\n}\n/**\n * Derivable from `MonadThrow`.\n *\n * @example\n * import { fromOption, left, right } from 'fp-ts/Either'\n * import { pipe } from 'fp-ts/function'\n * import { none, some } from 'fp-ts/Option'\n *\n * assert.deepStrictEqual(\n *   pipe(\n *     some(1),\n *     fromOption(() => 'error')\n *   ),\n *   right(1)\n * )\n * assert.deepStrictEqual(\n *   pipe(\n *     none,\n *     fromOption(() => 'error')\n *   ),\n *   left('error')\n * )\n *\n * @category constructors\n * @since 2.0.0\n */\nexport var fromOption = function (onNone) {\n  return function (ma) {\n    return ma._tag === 'None' ? left(onNone()) : right(ma.value);\n  };\n};\n/**\n * Derivable from `MonadThrow`.\n *\n * @example\n * import { fromPredicate, left, right } from 'fp-ts/Either'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(\n *   pipe(\n *     1,\n *     fromPredicate(\n *       (n) => n > 0,\n *       () => 'error'\n *     )\n *   ),\n *   right(1)\n * )\n * assert.deepStrictEqual(\n *   pipe(\n *     -1,\n *     fromPredicate(\n *       (n) => n > 0,\n *       () => 'error'\n *     )\n *   ),\n *   left('error')\n * )\n *\n * @category constructors\n * @since 2.0.0\n */\nexport var fromPredicate = function (predicate, onFalse) {\n  return function (a) {\n    return predicate(a) ? right(a) : left(onFalse(a));\n  };\n};\n// -------------------------------------------------------------------------------------\n// destructors\n// -------------------------------------------------------------------------------------\n/**\n * Takes two functions and an `Either` value, if the value is a `Left` the inner value is applied to the first function,\n * if the value is a `Right` the inner value is applied to the second function.\n *\n * @example\n * import { fold, left, right } from 'fp-ts/Either'\n * import { pipe } from 'fp-ts/function'\n *\n * function onLeft(errors: Array<string>): string {\n *   return `Errors: ${errors.join(', ')}`\n * }\n *\n * function onRight(value: number): string {\n *   return `Ok: ${value}`\n * }\n *\n * assert.strictEqual(\n *   pipe(\n *     right(1),\n *     fold(onLeft, onRight)\n *   ),\n *   'Ok: 1'\n * )\n * assert.strictEqual(\n *   pipe(\n *     left(['error 1', 'error 2']),\n *     fold(onLeft, onRight)\n *   ),\n *   'Errors: error 1, error 2'\n * )\n *\n * @category destructors\n * @since 2.0.0\n */\nexport function fold(onLeft, onRight) {\n  return function (ma) {\n    return isLeft(ma) ? onLeft(ma.left) : onRight(ma.right);\n  };\n}\n/**\n * Less strict version of [`getOrElse`](#getOrElse).\n *\n * @category destructors\n * @since 2.6.0\n */\nexport var getOrElseW = function (onLeft) {\n  return function (ma) {\n    return isLeft(ma) ? onLeft(ma.left) : ma.right;\n  };\n};\n/**\n * Returns the wrapped value if it's a `Right` or a default value if is a `Left`.\n *\n * @example\n * import { getOrElse, left, right } from 'fp-ts/Either'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(\n *   pipe(\n *     right(1),\n *     getOrElse(() => 0)\n *   ),\n *   1\n * )\n * assert.deepStrictEqual(\n *   pipe(\n *     left('error'),\n *     getOrElse(() => 0)\n *   ),\n *   0\n * )\n *\n * @category destructors\n * @since 2.0.0\n */\nexport var getOrElse = getOrElseW;\n// -------------------------------------------------------------------------------------\n// combinators\n// -------------------------------------------------------------------------------------\n/**\n * @category combinators\n * @since 2.9.0\n */\nexport function fromNullableK(e) {\n  var from = fromNullable(e);\n  return function (f) {\n    return function () {\n      var a = [];\n      for (var _i = 0; _i < arguments.length; _i++) {\n        a[_i] = arguments[_i];\n      }\n      return from(f.apply(void 0, a));\n    };\n  };\n}\n/**\n * @category combinators\n * @since 2.9.0\n */\nexport function chainNullableK(e) {\n  var from = fromNullableK(e);\n  return function (f) {\n    return chain(from(f));\n  };\n}\n/**\n * Returns a `Right` if is a `Left` (and vice versa).\n *\n * @category combinators\n * @since 2.0.0\n */\nexport function swap(ma) {\n  return isLeft(ma) ? right(ma.left) : left(ma.right);\n}\n/**\n * Useful for recovering from errors.\n *\n * @category combinators\n * @since 2.0.0\n */\nexport function orElse(onLeft) {\n  return function (ma) {\n    return isLeft(ma) ? onLeft(ma.left) : ma;\n  };\n}\n/**\n * Less strict version of [`filterOrElse`](#filterOrElse).\n *\n * @since 2.9.0\n */\nexport var filterOrElseW = function (predicate, onFalse) {\n  return chainW(function (a) {\n    return predicate(a) ? right(a) : left(onFalse(a));\n  });\n};\n/**\n * Derivable from `MonadThrow`.\n *\n * @example\n * import { filterOrElse, left, right } from 'fp-ts/Either'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(\n *   pipe(\n *     right(1),\n *     filterOrElse(\n *       (n) => n > 0,\n *       () => 'error'\n *     )\n *   ),\n *   right(1)\n * )\n * assert.deepStrictEqual(\n *   pipe(\n *     right(-1),\n *     filterOrElse(\n *       (n) => n > 0,\n *       () => 'error'\n *     )\n *   ),\n *   left('error')\n * )\n * assert.deepStrictEqual(\n *   pipe(\n *     left('a'),\n *     filterOrElse(\n *       (n) => n > 0,\n *       () => 'error'\n *     )\n *   ),\n *   left('a')\n * )\n *\n * @category combinators\n * @since 2.0.0\n */\nexport var filterOrElse = filterOrElseW;\n// -------------------------------------------------------------------------------------\n// non-pipeables\n// -------------------------------------------------------------------------------------\nvar map_ = function (fa, f) {\n  return pipe(fa, map(f));\n};\nvar ap_ = function (fab, fa) {\n  return pipe(fab, ap(fa));\n};\n/* istanbul ignore next */\nvar chain_ = function (ma, f) {\n  return pipe(ma, chain(f));\n};\n/* istanbul ignore next */\nvar reduce_ = function (fa, b, f) {\n  return pipe(fa, reduce(b, f));\n};\n/* istanbul ignore next */\nvar foldMap_ = function (M) {\n  return function (fa, f) {\n    var foldMapM = foldMap(M);\n    return pipe(fa, foldMapM(f));\n  };\n};\n/* istanbul ignore next */\nvar reduceRight_ = function (fa, b, f) {\n  return pipe(fa, reduceRight(b, f));\n};\nvar traverse_ = function (F) {\n  var traverseF = traverse(F);\n  return function (ta, f) {\n    return pipe(ta, traverseF(f));\n  };\n};\nvar bimap_ = function (fa, f, g) {\n  return pipe(fa, bimap(f, g));\n};\nvar mapLeft_ = function (fa, f) {\n  return pipe(fa, mapLeft(f));\n};\n/* istanbul ignore next */\nvar alt_ = function (fa, that) {\n  return pipe(fa, alt(that));\n};\n/* istanbul ignore next */\nvar extend_ = function (wa, f) {\n  return pipe(wa, extend(f));\n};\nvar chainRec_ = function (a, f) {\n  return tailRec(f(a), function (e) {\n    return isLeft(e) ? right(left(e.left)) : isLeft(e.right) ? left(f(e.right.left)) : right(right(e.right.right));\n  });\n};\n// -------------------------------------------------------------------------------------\n// pipeables\n// -------------------------------------------------------------------------------------\n/**\n * `map` can be used to turn functions `(a: A) => B` into functions `(fa: F<A>) => F<B>` whose argument and return types\n * use the type constructor `F` to represent some computational context.\n *\n * @category Functor\n * @since 2.0.0\n */\nexport var map = function (f) {\n  return function (fa) {\n    return isLeft(fa) ? fa : right(f(fa.right));\n  };\n};\n/**\n * Map a pair of functions over the two type arguments of the bifunctor.\n *\n * @category Bifunctor\n * @since 2.0.0\n */\nexport var bimap = function (f, g) {\n  return function (fa) {\n    return isLeft(fa) ? left(f(fa.left)) : right(g(fa.right));\n  };\n};\n/**\n * Map a function over the first type argument of a bifunctor.\n *\n * @category Bifunctor\n * @since 2.0.0\n */\nexport var mapLeft = function (f) {\n  return function (fa) {\n    return isLeft(fa) ? left(f(fa.left)) : fa;\n  };\n};\n/**\n * Less strict version of [`ap`](#ap).\n *\n * @category Apply\n * @since 2.8.0\n */\nexport var apW = function (fa) {\n  return function (fab) {\n    return isLeft(fab) ? fab : isLeft(fa) ? fa : right(fab.right(fa.right));\n  };\n};\n/**\n * Apply a function to an argument under a type constructor.\n *\n * @category Apply\n * @since 2.0.0\n */\nexport var ap = apW;\n/**\n * Combine two effectful actions, keeping only the result of the first.\n *\n * Derivable from `Apply`.\n *\n * @category combinators\n * @since 2.0.0\n */\nexport var apFirst = function (fb) {\n  return flow(map(function (a) {\n    return function () {\n      return a;\n    };\n  }), ap(fb));\n};\n/**\n * Combine two effectful actions, keeping only the result of the second.\n *\n * Derivable from `Apply`.\n *\n * @category combinators\n * @since 2.0.0\n */\nexport var apSecond = function (fb) {\n  return flow(map(function () {\n    return function (b) {\n      return b;\n    };\n  }), ap(fb));\n};\n/**\n * Wrap a value into the type constructor.\n *\n * Equivalent to [`right`](#right).\n *\n * @example\n * import * as E from 'fp-ts/Either'\n *\n * assert.deepStrictEqual(E.of('a'), E.right('a'))\n *\n * @category Applicative\n * @since 2.7.0\n */\nexport var of = right;\n/**\n * Less strict version of [`chain`](#chain).\n *\n * @category Monad\n * @since 2.6.0\n */\nexport var chainW = function (f) {\n  return function (ma) {\n    return isLeft(ma) ? ma : f(ma.right);\n  };\n};\n/**\n * Composes computations in sequence, using the return value of one computation to determine the next computation.\n *\n * @category Monad\n * @since 2.0.0\n */\nexport var chain = chainW;\n/**\n * Less strict version of [`chainFirst`](#chainFirst)\n *\n * Derivable from `Monad`.\n *\n * @category combinators\n * @since 2.8.0\n */\nexport var chainFirstW = function (f) {\n  return function (ma) {\n    return pipe(ma, chainW(function (a) {\n      return pipe(f(a), map(function () {\n        return a;\n      }));\n    }));\n  };\n};\n/**\n * Composes computations in sequence, using the return value of one computation to determine the next computation and\n * keeping only the result of the first.\n *\n * Derivable from `Monad`.\n *\n * @category combinators\n * @since 2.0.0\n */\nexport var chainFirst = chainFirstW;\n/**\n * The `flatten` function is the conventional monad join operator. It is used to remove one level of monadic structure, projecting its bound argument into the outer level.\n *\n * Derivable from `Monad`.\n *\n * @example\n * import * as E from 'fp-ts/Either'\n *\n * assert.deepStrictEqual(E.flatten(E.right(E.right('a'))), E.right('a'))\n * assert.deepStrictEqual(E.flatten(E.right(E.left('e'))), E.left('e'))\n * assert.deepStrictEqual(E.flatten(E.left('e')), E.left('e'))\n *\n * @category combinators\n * @since 2.0.0\n */\nexport var flatten = /*#__PURE__*/\nchain(identity);\n/**\n * Less strict version of [`alt`](#alt).\n *\n * @category Alt\n * @since 2.9.0\n */\nexport var altW = function (that) {\n  return function (fa) {\n    return isLeft(fa) ? that() : fa;\n  };\n};\n/**\n * Identifies an associative operation on a type constructor. It is similar to `Semigroup`, except that it applies to\n * types of kind `* -> *`.\n *\n * @category Alt\n * @since 2.0.0\n */\nexport var alt = altW;\n/**\n * @category Extend\n * @since 2.0.0\n */\nexport var extend = function (f) {\n  return function (wa) {\n    return isLeft(wa) ? wa : right(f(wa));\n  };\n};\n/**\n * Derivable from `Extend`.\n *\n * @category combinators\n * @since 2.0.0\n */\nexport var duplicate = /*#__PURE__*/\nextend(identity);\n/**\n * Left-associative fold of a structure.\n *\n * @example\n * import { pipe } from 'fp-ts/function'\n * import * as E from 'fp-ts/Either'\n *\n * const startWith = 'prefix'\n * const concat = (a: string, b: string) => `${a}:${b}`\n *\n * assert.deepStrictEqual(\n *   pipe(E.right('a'), E.reduce(startWith, concat)),\n *   'prefix:a',\n * )\n *\n * assert.deepStrictEqual(\n *   pipe(E.left('e'), E.reduce(startWith, concat)),\n *   'prefix',\n * )\n *\n * @category Foldable\n * @since 2.0.0\n */\nexport var reduce = function (b, f) {\n  return function (fa) {\n    return isLeft(fa) ? b : f(b, fa.right);\n  };\n};\n/**\n * Map each element of the structure to a monoid, and combine the results.\n *\n * @example\n * import { pipe } from 'fp-ts/function';\n * import * as E from 'fp-ts/Either'\n * import { monoidString } from 'fp-ts/Monoid'\n *\n * const yell = (a: string) => `${a}!`\n *\n * assert.deepStrictEqual(\n *   pipe(E.right('a'), E.foldMap(monoidString)(yell)),\n *   'a!',\n * )\n *\n * assert.deepStrictEqual(\n *   pipe(E.left('e'), E.foldMap(monoidString)(yell)),\n *   monoidString.empty,\n * )\n *\n * @category Foldable\n * @since 2.0.0\n */\nexport var foldMap = function (M) {\n  return function (f) {\n    return function (fa) {\n      return isLeft(fa) ? M.empty : f(fa.right);\n    };\n  };\n};\n/**\n * Right-associative fold of a structure.\n *\n * @example\n * import { pipe } from 'fp-ts/function'\n * import * as E from 'fp-ts/Either'\n *\n * const startWith = 'postfix'\n * const concat = (a: string, b: string) => `${a}:${b}`\n *\n * assert.deepStrictEqual(\n *   pipe(E.right('a'), E.reduceRight(startWith, concat)),\n *   'a:postfix',\n * )\n *\n * assert.deepStrictEqual(\n *   pipe(E.left('e'), E.reduceRight(startWith, concat)),\n *   'postfix',\n * )\n *\n * @category Foldable\n * @since 2.0.0\n */\nexport var reduceRight = function (b, f) {\n  return function (fa) {\n    return isLeft(fa) ? b : f(fa.right, b);\n  };\n};\n/**\n * Map each element of a structure to an action, evaluate these actions from left to right, and collect the results.\n *\n * @example\n * import { pipe } from 'fp-ts/function'\n * import * as A from 'fp-ts/Array'\n * import * as E from 'fp-ts/Either'\n * import * as O from 'fp-ts/Option'\n *\n * assert.deepStrictEqual(\n *   pipe(E.right(['a']), E.traverse(O.option)(A.head)),\n *   O.some(E.right('a')),\n *  )\n *\n * assert.deepStrictEqual(\n *   pipe(E.right([]), E.traverse(O.option)(A.head)),\n *   O.none,\n * )\n *\n * @category Traversable\n * @since 2.6.3\n */\nexport var traverse = function (F) {\n  return function (f) {\n    return function (ta) {\n      return isLeft(ta) ? F.of(left(ta.left)) : F.map(f(ta.right), right);\n    };\n  };\n};\n/**\n * Evaluate each monadic action in the structure from left to right, and collect the results.\n *\n * @example\n * import { pipe } from 'fp-ts/function'\n * import * as E from 'fp-ts/Either'\n * import * as O from 'fp-ts/Option'\n *\n * assert.deepStrictEqual(\n *   pipe(E.right(O.some('a')), E.sequence(O.option)),\n *   O.some(E.right('a')),\n *  )\n *\n * assert.deepStrictEqual(\n *   pipe(E.right(O.none), E.sequence(O.option)),\n *   O.none\n * )\n *\n * @category Traversable\n * @since 2.6.3\n */\nexport var sequence = function (F) {\n  return function (ma) {\n    return isLeft(ma) ? F.of(left(ma.left)) : F.map(ma.right, right);\n  };\n};\n/**\n * @category MonadThrow\n * @since 2.6.3\n */\nexport var throwError = left;\n// -------------------------------------------------------------------------------------\n// instances\n// -------------------------------------------------------------------------------------\n/**\n * @category instances\n * @since 2.0.0\n */\nexport var URI = 'Either';\n/**\n * @category instances\n * @since 2.0.0\n */\nexport function getShow(SE, SA) {\n  return {\n    show: function (ma) {\n      return isLeft(ma) ? \"left(\" + SE.show(ma.left) + \")\" : \"right(\" + SA.show(ma.right) + \")\";\n    }\n  };\n}\n/**\n * @category instances\n * @since 2.0.0\n */\nexport function getEq(EL, EA) {\n  return {\n    equals: function (x, y) {\n      return x === y || (isLeft(x) ? isLeft(y) && EL.equals(x.left, y.left) : isRight(y) && EA.equals(x.right, y.right));\n    }\n  };\n}\n/**\n * Semigroup returning the left-most non-`Left` value. If both operands are `Right`s then the inner values are\n * concatenated using the provided `Semigroup`\n *\n * @example\n * import { getSemigroup, left, right } from 'fp-ts/Either'\n * import { semigroupSum } from 'fp-ts/Semigroup'\n *\n * const S = getSemigroup<string, number>(semigroupSum)\n * assert.deepStrictEqual(S.concat(left('a'), left('b')), left('a'))\n * assert.deepStrictEqual(S.concat(left('a'), right(2)), right(2))\n * assert.deepStrictEqual(S.concat(right(1), left('b')), right(1))\n * assert.deepStrictEqual(S.concat(right(1), right(2)), right(3))\n *\n * @category instances\n * @since 2.0.0\n */\nexport function getSemigroup(S) {\n  return {\n    concat: function (x, y) {\n      return isLeft(y) ? x : isLeft(x) ? y : right(S.concat(x.right, y.right));\n    }\n  };\n}\n/**\n * Semigroup returning the left-most `Left` value. If both operands are `Right`s then the inner values\n * are concatenated using the provided `Semigroup`\n *\n * @example\n * import { getApplySemigroup, left, right } from 'fp-ts/Either'\n * import { semigroupSum } from 'fp-ts/Semigroup'\n *\n * const S = getApplySemigroup<string, number>(semigroupSum)\n * assert.deepStrictEqual(S.concat(left('a'), left('b')), left('a'))\n * assert.deepStrictEqual(S.concat(left('a'), right(2)), left('a'))\n * assert.deepStrictEqual(S.concat(right(1), left('b')), left('b'))\n * assert.deepStrictEqual(S.concat(right(1), right(2)), right(3))\n *\n * @category instances\n * @since 2.0.0\n */\nexport function getApplySemigroup(S) {\n  return {\n    concat: function (x, y) {\n      return isLeft(x) ? x : isLeft(y) ? y : right(S.concat(x.right, y.right));\n    }\n  };\n}\n/**\n * @category instances\n * @since 2.0.0\n */\nexport function getApplyMonoid(M) {\n  return {\n    concat: getApplySemigroup(M).concat,\n    empty: right(M.empty)\n  };\n}\n/**\n * Builds a `Filterable` instance for `Either` given `Monoid` for the left side\n *\n * @category instances\n * @since 3.0.0\n */\nexport function getFilterable(M) {\n  var empty = left(M.empty);\n  var compact = function (ma) {\n    return isLeft(ma) ? ma : ma.right._tag === 'None' ? empty : right(ma.right.value);\n  };\n  var separate = function (ma) {\n    return isLeft(ma) ? {\n      left: ma,\n      right: ma\n    } : isLeft(ma.right) ? {\n      left: right(ma.right.left),\n      right: empty\n    } : {\n      left: empty,\n      right: right(ma.right.right)\n    };\n  };\n  var partitionMap = function (ma, f) {\n    if (isLeft(ma)) {\n      return {\n        left: ma,\n        right: ma\n      };\n    }\n    var e = f(ma.right);\n    return isLeft(e) ? {\n      left: right(e.left),\n      right: empty\n    } : {\n      left: empty,\n      right: right(e.right)\n    };\n  };\n  var partition = function (ma, p) {\n    return isLeft(ma) ? {\n      left: ma,\n      right: ma\n    } : p(ma.right) ? {\n      left: empty,\n      right: right(ma.right)\n    } : {\n      left: right(ma.right),\n      right: empty\n    };\n  };\n  var filterMap = function (ma, f) {\n    if (isLeft(ma)) {\n      return ma;\n    }\n    var ob = f(ma.right);\n    return ob._tag === 'None' ? empty : right(ob.value);\n  };\n  var filter = function (ma, predicate) {\n    return isLeft(ma) ? ma : predicate(ma.right) ? ma : empty;\n  };\n  return {\n    URI: URI,\n    _E: undefined,\n    map: map_,\n    compact: compact,\n    separate: separate,\n    filter: filter,\n    filterMap: filterMap,\n    partition: partition,\n    partitionMap: partitionMap\n  };\n}\n/**\n * Builds `Witherable` instance for `Either` given `Monoid` for the left side\n *\n * @category instances\n * @since 2.0.0\n */\nexport function getWitherable(M) {\n  var F_ = getFilterable(M);\n  var wither = function (F) {\n    var traverseF = traverse_(F);\n    return function (ma, f) {\n      return F.map(traverseF(ma, f), F_.compact);\n    };\n  };\n  var wilt = function (F) {\n    var traverseF = traverse_(F);\n    return function (ma, f) {\n      return F.map(traverseF(ma, f), F_.separate);\n    };\n  };\n  return {\n    URI: URI,\n    _E: undefined,\n    map: map_,\n    compact: F_.compact,\n    separate: F_.separate,\n    filter: F_.filter,\n    filterMap: F_.filterMap,\n    partition: F_.partition,\n    partitionMap: F_.partitionMap,\n    traverse: traverse_,\n    sequence: sequence,\n    reduce: reduce_,\n    foldMap: foldMap_,\n    reduceRight: reduceRight_,\n    wither: wither,\n    wilt: wilt\n  };\n}\n/**\n * @category instances\n * @since 2.7.0\n */\nexport function getApplicativeValidation(SE) {\n  return {\n    URI: URI,\n    _E: undefined,\n    map: map_,\n    ap: function (fab, fa) {\n      return isLeft(fab) ? isLeft(fa) ? left(SE.concat(fab.left, fa.left)) : fab : isLeft(fa) ? fa : right(fab.right(fa.right));\n    },\n    of: of\n  };\n}\n/**\n * @category instances\n * @since 2.7.0\n */\nexport function getAltValidation(SE) {\n  return {\n    URI: URI,\n    _E: undefined,\n    map: map_,\n    alt: function (me, that) {\n      if (isRight(me)) {\n        return me;\n      }\n      var ea = that();\n      return isLeft(ea) ? left(SE.concat(me.left, ea.left)) : ea;\n    }\n  };\n}\n// TODO: remove in v3\n/**\n * @category instances\n * @since 2.0.0\n */\nexport function getValidation(SE) {\n  var applicativeValidation = getApplicativeValidation(SE);\n  var altValidation = getAltValidation(SE);\n  return {\n    URI: URI,\n    _E: undefined,\n    map: map_,\n    of: of,\n    chain: chain_,\n    bimap: bimap_,\n    mapLeft: mapLeft_,\n    reduce: reduce_,\n    foldMap: foldMap_,\n    reduceRight: reduceRight_,\n    extend: extend_,\n    traverse: traverse_,\n    sequence: sequence,\n    chainRec: chainRec_,\n    throwError: throwError,\n    ap: applicativeValidation.ap,\n    alt: altValidation.alt\n  };\n}\n/**\n * @category instances\n * @since 2.0.0\n */\nexport function getValidationSemigroup(SE, SA) {\n  return {\n    concat: function (x, y) {\n      return isLeft(x) ? isLeft(y) ? left(SE.concat(x.left, y.left)) : x : isLeft(y) ? y : right(SA.concat(x.right, y.right));\n    }\n  };\n}\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Functor = {\n  URI: URI,\n  map: map_\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Applicative = {\n  URI: URI,\n  map: map_,\n  ap: ap_,\n  of: of\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Monad = {\n  URI: URI,\n  map: map_,\n  ap: ap_,\n  of: of,\n  chain: chain_\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Foldable = {\n  URI: URI,\n  reduce: reduce_,\n  foldMap: foldMap_,\n  reduceRight: reduceRight_\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Traversable = {\n  URI: URI,\n  map: map_,\n  reduce: reduce_,\n  foldMap: foldMap_,\n  reduceRight: reduceRight_,\n  traverse: traverse_,\n  sequence: sequence\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Bifunctor = {\n  URI: URI,\n  bimap: bimap_,\n  mapLeft: mapLeft_\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Alt = {\n  URI: URI,\n  map: map_,\n  alt: alt_\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Extend = {\n  URI: URI,\n  map: map_,\n  extend: extend_\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var ChainRec = {\n  URI: URI,\n  map: map_,\n  ap: ap_,\n  chain: chain_,\n  chainRec: chainRec_\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var MonadThrow = {\n  URI: URI,\n  map: map_,\n  ap: ap_,\n  of: of,\n  chain: chain_,\n  throwError: throwError\n};\n/**\n * @category instances\n * @since 2.0.0\n */\nexport function getValidationMonoid(SE, SA) {\n  return {\n    concat: getValidationSemigroup(SE, SA).concat,\n    empty: right(SA.empty)\n  };\n}\n/**\n * @category instances\n * @since 2.0.0\n */\nexport var either = {\n  URI: URI,\n  map: map_,\n  of: of,\n  ap: ap_,\n  chain: chain_,\n  reduce: reduce_,\n  foldMap: foldMap_,\n  reduceRight: reduceRight_,\n  traverse: traverse_,\n  sequence: sequence,\n  bimap: bimap_,\n  mapLeft: mapLeft_,\n  alt: alt_,\n  extend: extend_,\n  chainRec: chainRec_,\n  throwError: throwError\n};\n// -------------------------------------------------------------------------------------\n// utils\n// -------------------------------------------------------------------------------------\n/**\n * Default value for the `onError` argument of `tryCatch`\n *\n * @since 2.0.0\n */\nexport function toError(e) {\n  return e instanceof Error ? e : new Error(String(e));\n}\n/**\n * @since 2.0.0\n */\nexport function elem(E) {\n  return function (a, ma) {\n    return isLeft(ma) ? false : E.equals(a, ma.right);\n  };\n}\n/**\n * Returns `false` if `Left` or returns the result of the application of the given predicate to the `Right` value.\n *\n * @example\n * import { exists, left, right } from 'fp-ts/Either'\n *\n * const gt2 = exists((n: number) => n > 2)\n *\n * assert.strictEqual(gt2(left('a')), false)\n * assert.strictEqual(gt2(right(1)), false)\n * assert.strictEqual(gt2(right(3)), true)\n *\n * @since 2.0.0\n */\nexport function exists(predicate) {\n  return function (ma) {\n    return isLeft(ma) ? false : predicate(ma.right);\n  };\n}\n// -------------------------------------------------------------------------------------\n// do notation\n// -------------------------------------------------------------------------------------\n/**\n * @since 2.9.0\n */\nexport var Do = /*#__PURE__*/\nof({});\n/**\n * @since 2.8.0\n */\nexport var bindTo = function (name) {\n  return map(bindTo_(name));\n};\n/**\n * @since 2.8.0\n */\nexport var bindW = function (name, f) {\n  return chainW(function (a) {\n    return pipe(f(a), map(function (b) {\n      return bind_(a, name, b);\n    }));\n  });\n};\n/**\n * @since 2.8.0\n */\nexport var bind = bindW;\n// -------------------------------------------------------------------------------------\n// pipeable sequence S\n// -------------------------------------------------------------------------------------\n/**\n * @since 2.8.0\n */\nexport var apSW = function (name, fb) {\n  return flow(map(function (a) {\n    return function (b) {\n      return bind_(a, name, b);\n    };\n  }), apW(fb));\n};\n/**\n * @since 2.8.0\n */\nexport var apS = apSW;\n// -------------------------------------------------------------------------------------\n// array utils\n// -------------------------------------------------------------------------------------\n/**\n *\n * @since 2.9.0\n */\nexport var traverseArrayWithIndex = function (f) {\n  return function (arr) {\n    // tslint:disable-next-line: readonly-array\n    var result = [];\n    for (var i = 0; i < arr.length; i++) {\n      var e = f(i, arr[i]);\n      if (e._tag === 'Left') {\n        return e;\n      }\n      result.push(e.right);\n    }\n    return right(result);\n  };\n};\n/**\n * map an array using provided function to Either then transform to Either of the array\n * this function have the same behavior of `A.traverse(E.either)` but it's optimized and perform better\n *\n * @example\n *\n *\n * import { traverseArray, left, right, fromPredicate } from 'fp-ts/Either'\n * import { pipe } from 'fp-ts/function'\n * import * as A from 'fp-ts/Array'\n *\n * const arr = A.range(0, 10)\n * assert.deepStrictEqual(\n *   pipe(\n *     arr,\n *     traverseArray((x) => right(x))\n *   ),\n *   right(arr)\n * )\n * assert.deepStrictEqual(\n *   pipe(\n *     arr,\n *     traverseArray(\n *       fromPredicate(\n *         (x) => x > 5,\n *         () => 'a'\n *       )\n *     )\n *   ),\n *   left('a')\n * )\n * @since 2.9.0\n */\nexport var traverseArray = function (f) {\n  return traverseArrayWithIndex(function (_, a) {\n    return f(a);\n  });\n};\n/**\n * convert an array of either to an either of array\n * this function have the same behavior of `A.sequence(E.either)` but it's optimized and perform better\n *\n * @example\n *\n * import { sequenceArray, left, right } from 'fp-ts/Either'\n * import { pipe } from 'fp-ts/function'\n * import * as A from 'fp-ts/Array'\n *\n * const arr = A.range(0, 10)\n * assert.deepStrictEqual(pipe(arr, A.map(right), sequenceArray), right(arr))\n * assert.deepStrictEqual(pipe(arr, A.map(right), A.cons(left('Error')), sequenceArray), left('Error'))\n *\n * @since 2.9.0\n */\nexport var sequenceArray = /*#__PURE__*/\ntraverseArray(identity);","map":{"version":3,"names":["tailRec","identity","pipe","bind_","bindTo_","flow","isLeft","ma","_tag","isRight","left","e","right","a","fromNullable","tryCatch","f","onError","parseJSON","s","JSON","parse","stringifyJSON","u","stringify","fromOption","onNone","value","fromPredicate","predicate","onFalse","fold","onLeft","onRight","getOrElseW","getOrElse","fromNullableK","from","_i","arguments","length","apply","chainNullableK","chain","swap","orElse","filterOrElseW","chainW","filterOrElse","map_","fa","map","ap_","fab","ap","chain_","reduce_","b","reduce","foldMap_","M","foldMapM","foldMap","reduceRight_","reduceRight","traverse_","F","traverseF","traverse","ta","bimap_","g","bimap","mapLeft_","mapLeft","alt_","that","alt","extend_","wa","extend","chainRec_","apW","apFirst","fb","apSecond","of","chainFirstW","chainFirst","flatten","altW","duplicate","empty","sequence","throwError","URI","getShow","SE","SA","show","getEq","EL","EA","equals","x","y","getSemigroup","S","concat","getApplySemigroup","getApplyMonoid","getFilterable","compact","separate","partitionMap","partition","p","filterMap","ob","filter","_E","undefined","getWitherable","F_","wither","wilt","getApplicativeValidation","getAltValidation","me","ea","getValidation","applicativeValidation","altValidation","chainRec","getValidationSemigroup","Functor","Applicative","Monad","Foldable","Traversable","Bifunctor","Alt","Extend","ChainRec","MonadThrow","getValidationMonoid","either","toError","Error","String","elem","E","exists","Do","bindTo","name","bindW","bind","apSW","apS","traverseArrayWithIndex","arr","result","i","push","traverseArray","_","sequenceArray"],"sources":["/Users/arthurfrancis/Documents/repo/imx-learning/workflows/link-app/react/node_modules/fp-ts/es6/Either.js"],"sourcesContent":["import { tailRec } from './ChainRec';\nimport { identity, pipe, bind_, bindTo_, flow } from './function';\n// -------------------------------------------------------------------------------------\n// guards\n// -------------------------------------------------------------------------------------\n/**\n * Returns `true` if the either is an instance of `Left`, `false` otherwise.\n *\n * @category guards\n * @since 2.0.0\n */\nexport var isLeft = function (ma) { return ma._tag === 'Left'; };\n/**\n * Returns `true` if the either is an instance of `Right`, `false` otherwise.\n *\n * @category guards\n * @since 2.0.0\n */\nexport var isRight = function (ma) { return ma._tag === 'Right'; };\n// -------------------------------------------------------------------------------------\n// constructors\n// -------------------------------------------------------------------------------------\n/**\n * Constructs a new `Either` holding a `Left` value. This usually represents a failure, due to the right-bias of this\n * structure.\n *\n * @category constructors\n * @since 2.0.0\n */\nexport var left = function (e) { return ({ _tag: 'Left', left: e }); };\n/**\n * Constructs a new `Either` holding a `Right` value. This usually represents a successful value due to the right bias\n * of this structure.\n *\n * @category constructors\n * @since 2.0.0\n */\nexport var right = function (a) { return ({ _tag: 'Right', right: a }); };\n// TODO: make lazy in v3\n/**\n * Takes a default and a nullable value, if the value is not nully, turn it into a `Right`, if the value is nully use\n * the provided default as a `Left`.\n *\n * @example\n * import { fromNullable, left, right } from 'fp-ts/Either'\n *\n * const parse = fromNullable('nully')\n *\n * assert.deepStrictEqual(parse(1), right(1))\n * assert.deepStrictEqual(parse(null), left('nully'))\n *\n * @category constructors\n * @since 2.0.0\n */\nexport function fromNullable(e) {\n    return function (a) { return (a == null ? left(e) : right(a)); };\n}\n// TODO: `onError => Lazy<A> => Either` in v3\n/**\n * Constructs a new `Either` from a function that might throw.\n *\n * @example\n * import { Either, left, right, tryCatch } from 'fp-ts/Either'\n *\n * const unsafeHead = <A>(as: Array<A>): A => {\n *   if (as.length > 0) {\n *     return as[0]\n *   } else {\n *     throw new Error('empty array')\n *   }\n * }\n *\n * const head = <A>(as: Array<A>): Either<Error, A> => {\n *   return tryCatch(() => unsafeHead(as), e => (e instanceof Error ? e : new Error('unknown error')))\n * }\n *\n * assert.deepStrictEqual(head([]), left(new Error('empty array')))\n * assert.deepStrictEqual(head([1, 2, 3]), right(1))\n *\n * @category constructors\n * @since 2.0.0\n */\nexport function tryCatch(f, onError) {\n    try {\n        return right(f());\n    }\n    catch (e) {\n        return left(onError(e));\n    }\n}\n// TODO curry in v3\n/**\n * Converts a JavaScript Object Notation (JSON) string into an object.\n *\n * @example\n * import { parseJSON, toError, right, left } from 'fp-ts/Either'\n *\n * assert.deepStrictEqual(parseJSON('{\"a\":1}', toError), right({ a: 1 }))\n * assert.deepStrictEqual(parseJSON('{\"a\":}', toError), left(new SyntaxError('Unexpected token } in JSON at position 5')))\n *\n * @category constructors\n * @since 2.0.0\n */\nexport function parseJSON(s, onError) {\n    return tryCatch(function () { return JSON.parse(s); }, onError);\n}\n// TODO curry in v3\n/**\n * Converts a JavaScript value to a JavaScript Object Notation (JSON) string.\n *\n * @example\n * import * as E from 'fp-ts/Either'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(E.stringifyJSON({ a: 1 }, E.toError), E.right('{\"a\":1}'))\n * const circular: any = { ref: null }\n * circular.ref = circular\n * assert.deepStrictEqual(\n *   pipe(\n *     E.stringifyJSON(circular, E.toError),\n *     E.mapLeft(e => e.message.includes('Converting circular structure to JSON'))\n *   ),\n *   E.left(true)\n * )\n *\n * @category constructors\n * @since 2.0.0\n */\nexport function stringifyJSON(u, onError) {\n    return tryCatch(function () { return JSON.stringify(u); }, onError);\n}\n/**\n * Derivable from `MonadThrow`.\n *\n * @example\n * import { fromOption, left, right } from 'fp-ts/Either'\n * import { pipe } from 'fp-ts/function'\n * import { none, some } from 'fp-ts/Option'\n *\n * assert.deepStrictEqual(\n *   pipe(\n *     some(1),\n *     fromOption(() => 'error')\n *   ),\n *   right(1)\n * )\n * assert.deepStrictEqual(\n *   pipe(\n *     none,\n *     fromOption(() => 'error')\n *   ),\n *   left('error')\n * )\n *\n * @category constructors\n * @since 2.0.0\n */\nexport var fromOption = function (onNone) { return function (ma) {\n    return ma._tag === 'None' ? left(onNone()) : right(ma.value);\n}; };\n/**\n * Derivable from `MonadThrow`.\n *\n * @example\n * import { fromPredicate, left, right } from 'fp-ts/Either'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(\n *   pipe(\n *     1,\n *     fromPredicate(\n *       (n) => n > 0,\n *       () => 'error'\n *     )\n *   ),\n *   right(1)\n * )\n * assert.deepStrictEqual(\n *   pipe(\n *     -1,\n *     fromPredicate(\n *       (n) => n > 0,\n *       () => 'error'\n *     )\n *   ),\n *   left('error')\n * )\n *\n * @category constructors\n * @since 2.0.0\n */\nexport var fromPredicate = function (predicate, onFalse) { return function (a) { return (predicate(a) ? right(a) : left(onFalse(a))); }; };\n// -------------------------------------------------------------------------------------\n// destructors\n// -------------------------------------------------------------------------------------\n/**\n * Takes two functions and an `Either` value, if the value is a `Left` the inner value is applied to the first function,\n * if the value is a `Right` the inner value is applied to the second function.\n *\n * @example\n * import { fold, left, right } from 'fp-ts/Either'\n * import { pipe } from 'fp-ts/function'\n *\n * function onLeft(errors: Array<string>): string {\n *   return `Errors: ${errors.join(', ')}`\n * }\n *\n * function onRight(value: number): string {\n *   return `Ok: ${value}`\n * }\n *\n * assert.strictEqual(\n *   pipe(\n *     right(1),\n *     fold(onLeft, onRight)\n *   ),\n *   'Ok: 1'\n * )\n * assert.strictEqual(\n *   pipe(\n *     left(['error 1', 'error 2']),\n *     fold(onLeft, onRight)\n *   ),\n *   'Errors: error 1, error 2'\n * )\n *\n * @category destructors\n * @since 2.0.0\n */\nexport function fold(onLeft, onRight) {\n    return function (ma) { return (isLeft(ma) ? onLeft(ma.left) : onRight(ma.right)); };\n}\n/**\n * Less strict version of [`getOrElse`](#getOrElse).\n *\n * @category destructors\n * @since 2.6.0\n */\nexport var getOrElseW = function (onLeft) { return function (ma) {\n    return isLeft(ma) ? onLeft(ma.left) : ma.right;\n}; };\n/**\n * Returns the wrapped value if it's a `Right` or a default value if is a `Left`.\n *\n * @example\n * import { getOrElse, left, right } from 'fp-ts/Either'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(\n *   pipe(\n *     right(1),\n *     getOrElse(() => 0)\n *   ),\n *   1\n * )\n * assert.deepStrictEqual(\n *   pipe(\n *     left('error'),\n *     getOrElse(() => 0)\n *   ),\n *   0\n * )\n *\n * @category destructors\n * @since 2.0.0\n */\nexport var getOrElse = getOrElseW;\n// -------------------------------------------------------------------------------------\n// combinators\n// -------------------------------------------------------------------------------------\n/**\n * @category combinators\n * @since 2.9.0\n */\nexport function fromNullableK(e) {\n    var from = fromNullable(e);\n    return function (f) { return function () {\n        var a = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            a[_i] = arguments[_i];\n        }\n        return from(f.apply(void 0, a));\n    }; };\n}\n/**\n * @category combinators\n * @since 2.9.0\n */\nexport function chainNullableK(e) {\n    var from = fromNullableK(e);\n    return function (f) { return chain(from(f)); };\n}\n/**\n * Returns a `Right` if is a `Left` (and vice versa).\n *\n * @category combinators\n * @since 2.0.0\n */\nexport function swap(ma) {\n    return isLeft(ma) ? right(ma.left) : left(ma.right);\n}\n/**\n * Useful for recovering from errors.\n *\n * @category combinators\n * @since 2.0.0\n */\nexport function orElse(onLeft) {\n    return function (ma) { return (isLeft(ma) ? onLeft(ma.left) : ma); };\n}\n/**\n * Less strict version of [`filterOrElse`](#filterOrElse).\n *\n * @since 2.9.0\n */\nexport var filterOrElseW = function (predicate, onFalse) {\n    return chainW(function (a) { return (predicate(a) ? right(a) : left(onFalse(a))); });\n};\n/**\n * Derivable from `MonadThrow`.\n *\n * @example\n * import { filterOrElse, left, right } from 'fp-ts/Either'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(\n *   pipe(\n *     right(1),\n *     filterOrElse(\n *       (n) => n > 0,\n *       () => 'error'\n *     )\n *   ),\n *   right(1)\n * )\n * assert.deepStrictEqual(\n *   pipe(\n *     right(-1),\n *     filterOrElse(\n *       (n) => n > 0,\n *       () => 'error'\n *     )\n *   ),\n *   left('error')\n * )\n * assert.deepStrictEqual(\n *   pipe(\n *     left('a'),\n *     filterOrElse(\n *       (n) => n > 0,\n *       () => 'error'\n *     )\n *   ),\n *   left('a')\n * )\n *\n * @category combinators\n * @since 2.0.0\n */\nexport var filterOrElse = filterOrElseW;\n// -------------------------------------------------------------------------------------\n// non-pipeables\n// -------------------------------------------------------------------------------------\nvar map_ = function (fa, f) { return pipe(fa, map(f)); };\nvar ap_ = function (fab, fa) { return pipe(fab, ap(fa)); };\n/* istanbul ignore next */\nvar chain_ = function (ma, f) { return pipe(ma, chain(f)); };\n/* istanbul ignore next */\nvar reduce_ = function (fa, b, f) { return pipe(fa, reduce(b, f)); };\n/* istanbul ignore next */\nvar foldMap_ = function (M) { return function (fa, f) {\n    var foldMapM = foldMap(M);\n    return pipe(fa, foldMapM(f));\n}; };\n/* istanbul ignore next */\nvar reduceRight_ = function (fa, b, f) { return pipe(fa, reduceRight(b, f)); };\nvar traverse_ = function (F) {\n    var traverseF = traverse(F);\n    return function (ta, f) { return pipe(ta, traverseF(f)); };\n};\nvar bimap_ = function (fa, f, g) { return pipe(fa, bimap(f, g)); };\nvar mapLeft_ = function (fa, f) { return pipe(fa, mapLeft(f)); };\n/* istanbul ignore next */\nvar alt_ = function (fa, that) { return pipe(fa, alt(that)); };\n/* istanbul ignore next */\nvar extend_ = function (wa, f) { return pipe(wa, extend(f)); };\nvar chainRec_ = function (a, f) {\n    return tailRec(f(a), function (e) {\n        return isLeft(e) ? right(left(e.left)) : isLeft(e.right) ? left(f(e.right.left)) : right(right(e.right.right));\n    });\n};\n// -------------------------------------------------------------------------------------\n// pipeables\n// -------------------------------------------------------------------------------------\n/**\n * `map` can be used to turn functions `(a: A) => B` into functions `(fa: F<A>) => F<B>` whose argument and return types\n * use the type constructor `F` to represent some computational context.\n *\n * @category Functor\n * @since 2.0.0\n */\nexport var map = function (f) { return function (fa) {\n    return isLeft(fa) ? fa : right(f(fa.right));\n}; };\n/**\n * Map a pair of functions over the two type arguments of the bifunctor.\n *\n * @category Bifunctor\n * @since 2.0.0\n */\nexport var bimap = function (f, g) { return function (fa) { return (isLeft(fa) ? left(f(fa.left)) : right(g(fa.right))); }; };\n/**\n * Map a function over the first type argument of a bifunctor.\n *\n * @category Bifunctor\n * @since 2.0.0\n */\nexport var mapLeft = function (f) { return function (fa) {\n    return isLeft(fa) ? left(f(fa.left)) : fa;\n}; };\n/**\n * Less strict version of [`ap`](#ap).\n *\n * @category Apply\n * @since 2.8.0\n */\nexport var apW = function (fa) { return function (fab) {\n    return isLeft(fab) ? fab : isLeft(fa) ? fa : right(fab.right(fa.right));\n}; };\n/**\n * Apply a function to an argument under a type constructor.\n *\n * @category Apply\n * @since 2.0.0\n */\nexport var ap = apW;\n/**\n * Combine two effectful actions, keeping only the result of the first.\n *\n * Derivable from `Apply`.\n *\n * @category combinators\n * @since 2.0.0\n */\nexport var apFirst = function (fb) {\n    return flow(map(function (a) { return function () { return a; }; }), ap(fb));\n};\n/**\n * Combine two effectful actions, keeping only the result of the second.\n *\n * Derivable from `Apply`.\n *\n * @category combinators\n * @since 2.0.0\n */\nexport var apSecond = function (fb) {\n    return flow(map(function () { return function (b) { return b; }; }), ap(fb));\n};\n/**\n * Wrap a value into the type constructor.\n *\n * Equivalent to [`right`](#right).\n *\n * @example\n * import * as E from 'fp-ts/Either'\n *\n * assert.deepStrictEqual(E.of('a'), E.right('a'))\n *\n * @category Applicative\n * @since 2.7.0\n */\nexport var of = right;\n/**\n * Less strict version of [`chain`](#chain).\n *\n * @category Monad\n * @since 2.6.0\n */\nexport var chainW = function (f) { return function (ma) {\n    return isLeft(ma) ? ma : f(ma.right);\n}; };\n/**\n * Composes computations in sequence, using the return value of one computation to determine the next computation.\n *\n * @category Monad\n * @since 2.0.0\n */\nexport var chain = chainW;\n/**\n * Less strict version of [`chainFirst`](#chainFirst)\n *\n * Derivable from `Monad`.\n *\n * @category combinators\n * @since 2.8.0\n */\nexport var chainFirstW = function (f) { return function (ma) {\n    return pipe(ma, chainW(function (a) {\n        return pipe(f(a), map(function () { return a; }));\n    }));\n}; };\n/**\n * Composes computations in sequence, using the return value of one computation to determine the next computation and\n * keeping only the result of the first.\n *\n * Derivable from `Monad`.\n *\n * @category combinators\n * @since 2.0.0\n */\nexport var chainFirst = chainFirstW;\n/**\n * The `flatten` function is the conventional monad join operator. It is used to remove one level of monadic structure, projecting its bound argument into the outer level.\n *\n * Derivable from `Monad`.\n *\n * @example\n * import * as E from 'fp-ts/Either'\n *\n * assert.deepStrictEqual(E.flatten(E.right(E.right('a'))), E.right('a'))\n * assert.deepStrictEqual(E.flatten(E.right(E.left('e'))), E.left('e'))\n * assert.deepStrictEqual(E.flatten(E.left('e')), E.left('e'))\n *\n * @category combinators\n * @since 2.0.0\n */\nexport var flatten = \n/*#__PURE__*/\nchain(identity);\n/**\n * Less strict version of [`alt`](#alt).\n *\n * @category Alt\n * @since 2.9.0\n */\nexport var altW = function (that) { return function (fa) { return (isLeft(fa) ? that() : fa); }; };\n/**\n * Identifies an associative operation on a type constructor. It is similar to `Semigroup`, except that it applies to\n * types of kind `* -> *`.\n *\n * @category Alt\n * @since 2.0.0\n */\nexport var alt = altW;\n/**\n * @category Extend\n * @since 2.0.0\n */\nexport var extend = function (f) { return function (wa) {\n    return isLeft(wa) ? wa : right(f(wa));\n}; };\n/**\n * Derivable from `Extend`.\n *\n * @category combinators\n * @since 2.0.0\n */\nexport var duplicate = \n/*#__PURE__*/\nextend(identity);\n/**\n * Left-associative fold of a structure.\n *\n * @example\n * import { pipe } from 'fp-ts/function'\n * import * as E from 'fp-ts/Either'\n *\n * const startWith = 'prefix'\n * const concat = (a: string, b: string) => `${a}:${b}`\n *\n * assert.deepStrictEqual(\n *   pipe(E.right('a'), E.reduce(startWith, concat)),\n *   'prefix:a',\n * )\n *\n * assert.deepStrictEqual(\n *   pipe(E.left('e'), E.reduce(startWith, concat)),\n *   'prefix',\n * )\n *\n * @category Foldable\n * @since 2.0.0\n */\nexport var reduce = function (b, f) { return function (fa) {\n    return isLeft(fa) ? b : f(b, fa.right);\n}; };\n/**\n * Map each element of the structure to a monoid, and combine the results.\n *\n * @example\n * import { pipe } from 'fp-ts/function';\n * import * as E from 'fp-ts/Either'\n * import { monoidString } from 'fp-ts/Monoid'\n *\n * const yell = (a: string) => `${a}!`\n *\n * assert.deepStrictEqual(\n *   pipe(E.right('a'), E.foldMap(monoidString)(yell)),\n *   'a!',\n * )\n *\n * assert.deepStrictEqual(\n *   pipe(E.left('e'), E.foldMap(monoidString)(yell)),\n *   monoidString.empty,\n * )\n *\n * @category Foldable\n * @since 2.0.0\n */\nexport var foldMap = function (M) { return function (f) { return function (fa) {\n    return isLeft(fa) ? M.empty : f(fa.right);\n}; }; };\n/**\n * Right-associative fold of a structure.\n *\n * @example\n * import { pipe } from 'fp-ts/function'\n * import * as E from 'fp-ts/Either'\n *\n * const startWith = 'postfix'\n * const concat = (a: string, b: string) => `${a}:${b}`\n *\n * assert.deepStrictEqual(\n *   pipe(E.right('a'), E.reduceRight(startWith, concat)),\n *   'a:postfix',\n * )\n *\n * assert.deepStrictEqual(\n *   pipe(E.left('e'), E.reduceRight(startWith, concat)),\n *   'postfix',\n * )\n *\n * @category Foldable\n * @since 2.0.0\n */\nexport var reduceRight = function (b, f) { return function (fa) {\n    return isLeft(fa) ? b : f(fa.right, b);\n}; };\n/**\n * Map each element of a structure to an action, evaluate these actions from left to right, and collect the results.\n *\n * @example\n * import { pipe } from 'fp-ts/function'\n * import * as A from 'fp-ts/Array'\n * import * as E from 'fp-ts/Either'\n * import * as O from 'fp-ts/Option'\n *\n * assert.deepStrictEqual(\n *   pipe(E.right(['a']), E.traverse(O.option)(A.head)),\n *   O.some(E.right('a')),\n *  )\n *\n * assert.deepStrictEqual(\n *   pipe(E.right([]), E.traverse(O.option)(A.head)),\n *   O.none,\n * )\n *\n * @category Traversable\n * @since 2.6.3\n */\nexport var traverse = function (F) { return function (f) { return function (ta) { return (isLeft(ta) ? F.of(left(ta.left)) : F.map(f(ta.right), right)); }; }; };\n/**\n * Evaluate each monadic action in the structure from left to right, and collect the results.\n *\n * @example\n * import { pipe } from 'fp-ts/function'\n * import * as E from 'fp-ts/Either'\n * import * as O from 'fp-ts/Option'\n *\n * assert.deepStrictEqual(\n *   pipe(E.right(O.some('a')), E.sequence(O.option)),\n *   O.some(E.right('a')),\n *  )\n *\n * assert.deepStrictEqual(\n *   pipe(E.right(O.none), E.sequence(O.option)),\n *   O.none\n * )\n *\n * @category Traversable\n * @since 2.6.3\n */\nexport var sequence = function (F) { return function (ma) {\n    return isLeft(ma) ? F.of(left(ma.left)) : F.map(ma.right, right);\n}; };\n/**\n * @category MonadThrow\n * @since 2.6.3\n */\nexport var throwError = left;\n// -------------------------------------------------------------------------------------\n// instances\n// -------------------------------------------------------------------------------------\n/**\n * @category instances\n * @since 2.0.0\n */\nexport var URI = 'Either';\n/**\n * @category instances\n * @since 2.0.0\n */\nexport function getShow(SE, SA) {\n    return {\n        show: function (ma) { return (isLeft(ma) ? \"left(\" + SE.show(ma.left) + \")\" : \"right(\" + SA.show(ma.right) + \")\"); }\n    };\n}\n/**\n * @category instances\n * @since 2.0.0\n */\nexport function getEq(EL, EA) {\n    return {\n        equals: function (x, y) {\n            return x === y || (isLeft(x) ? isLeft(y) && EL.equals(x.left, y.left) : isRight(y) && EA.equals(x.right, y.right));\n        }\n    };\n}\n/**\n * Semigroup returning the left-most non-`Left` value. If both operands are `Right`s then the inner values are\n * concatenated using the provided `Semigroup`\n *\n * @example\n * import { getSemigroup, left, right } from 'fp-ts/Either'\n * import { semigroupSum } from 'fp-ts/Semigroup'\n *\n * const S = getSemigroup<string, number>(semigroupSum)\n * assert.deepStrictEqual(S.concat(left('a'), left('b')), left('a'))\n * assert.deepStrictEqual(S.concat(left('a'), right(2)), right(2))\n * assert.deepStrictEqual(S.concat(right(1), left('b')), right(1))\n * assert.deepStrictEqual(S.concat(right(1), right(2)), right(3))\n *\n * @category instances\n * @since 2.0.0\n */\nexport function getSemigroup(S) {\n    return {\n        concat: function (x, y) { return (isLeft(y) ? x : isLeft(x) ? y : right(S.concat(x.right, y.right))); }\n    };\n}\n/**\n * Semigroup returning the left-most `Left` value. If both operands are `Right`s then the inner values\n * are concatenated using the provided `Semigroup`\n *\n * @example\n * import { getApplySemigroup, left, right } from 'fp-ts/Either'\n * import { semigroupSum } from 'fp-ts/Semigroup'\n *\n * const S = getApplySemigroup<string, number>(semigroupSum)\n * assert.deepStrictEqual(S.concat(left('a'), left('b')), left('a'))\n * assert.deepStrictEqual(S.concat(left('a'), right(2)), left('a'))\n * assert.deepStrictEqual(S.concat(right(1), left('b')), left('b'))\n * assert.deepStrictEqual(S.concat(right(1), right(2)), right(3))\n *\n * @category instances\n * @since 2.0.0\n */\nexport function getApplySemigroup(S) {\n    return {\n        concat: function (x, y) { return (isLeft(x) ? x : isLeft(y) ? y : right(S.concat(x.right, y.right))); }\n    };\n}\n/**\n * @category instances\n * @since 2.0.0\n */\nexport function getApplyMonoid(M) {\n    return {\n        concat: getApplySemigroup(M).concat,\n        empty: right(M.empty)\n    };\n}\n/**\n * Builds a `Filterable` instance for `Either` given `Monoid` for the left side\n *\n * @category instances\n * @since 3.0.0\n */\nexport function getFilterable(M) {\n    var empty = left(M.empty);\n    var compact = function (ma) {\n        return isLeft(ma) ? ma : ma.right._tag === 'None' ? empty : right(ma.right.value);\n    };\n    var separate = function (ma) {\n        return isLeft(ma)\n            ? { left: ma, right: ma }\n            : isLeft(ma.right)\n                ? { left: right(ma.right.left), right: empty }\n                : { left: empty, right: right(ma.right.right) };\n    };\n    var partitionMap = function (ma, f) {\n        if (isLeft(ma)) {\n            return { left: ma, right: ma };\n        }\n        var e = f(ma.right);\n        return isLeft(e) ? { left: right(e.left), right: empty } : { left: empty, right: right(e.right) };\n    };\n    var partition = function (ma, p) {\n        return isLeft(ma)\n            ? { left: ma, right: ma }\n            : p(ma.right)\n                ? { left: empty, right: right(ma.right) }\n                : { left: right(ma.right), right: empty };\n    };\n    var filterMap = function (ma, f) {\n        if (isLeft(ma)) {\n            return ma;\n        }\n        var ob = f(ma.right);\n        return ob._tag === 'None' ? empty : right(ob.value);\n    };\n    var filter = function (ma, predicate) {\n        return isLeft(ma) ? ma : predicate(ma.right) ? ma : empty;\n    };\n    return {\n        URI: URI,\n        _E: undefined,\n        map: map_,\n        compact: compact,\n        separate: separate,\n        filter: filter,\n        filterMap: filterMap,\n        partition: partition,\n        partitionMap: partitionMap\n    };\n}\n/**\n * Builds `Witherable` instance for `Either` given `Monoid` for the left side\n *\n * @category instances\n * @since 2.0.0\n */\nexport function getWitherable(M) {\n    var F_ = getFilterable(M);\n    var wither = function (F) {\n        var traverseF = traverse_(F);\n        return function (ma, f) { return F.map(traverseF(ma, f), F_.compact); };\n    };\n    var wilt = function (F) {\n        var traverseF = traverse_(F);\n        return function (ma, f) { return F.map(traverseF(ma, f), F_.separate); };\n    };\n    return {\n        URI: URI,\n        _E: undefined,\n        map: map_,\n        compact: F_.compact,\n        separate: F_.separate,\n        filter: F_.filter,\n        filterMap: F_.filterMap,\n        partition: F_.partition,\n        partitionMap: F_.partitionMap,\n        traverse: traverse_,\n        sequence: sequence,\n        reduce: reduce_,\n        foldMap: foldMap_,\n        reduceRight: reduceRight_,\n        wither: wither,\n        wilt: wilt\n    };\n}\n/**\n * @category instances\n * @since 2.7.0\n */\nexport function getApplicativeValidation(SE) {\n    return {\n        URI: URI,\n        _E: undefined,\n        map: map_,\n        ap: function (fab, fa) {\n            return isLeft(fab)\n                ? isLeft(fa)\n                    ? left(SE.concat(fab.left, fa.left))\n                    : fab\n                : isLeft(fa)\n                    ? fa\n                    : right(fab.right(fa.right));\n        },\n        of: of\n    };\n}\n/**\n * @category instances\n * @since 2.7.0\n */\nexport function getAltValidation(SE) {\n    return {\n        URI: URI,\n        _E: undefined,\n        map: map_,\n        alt: function (me, that) {\n            if (isRight(me)) {\n                return me;\n            }\n            var ea = that();\n            return isLeft(ea) ? left(SE.concat(me.left, ea.left)) : ea;\n        }\n    };\n}\n// TODO: remove in v3\n/**\n * @category instances\n * @since 2.0.0\n */\nexport function getValidation(SE) {\n    var applicativeValidation = getApplicativeValidation(SE);\n    var altValidation = getAltValidation(SE);\n    return {\n        URI: URI,\n        _E: undefined,\n        map: map_,\n        of: of,\n        chain: chain_,\n        bimap: bimap_,\n        mapLeft: mapLeft_,\n        reduce: reduce_,\n        foldMap: foldMap_,\n        reduceRight: reduceRight_,\n        extend: extend_,\n        traverse: traverse_,\n        sequence: sequence,\n        chainRec: chainRec_,\n        throwError: throwError,\n        ap: applicativeValidation.ap,\n        alt: altValidation.alt\n    };\n}\n/**\n * @category instances\n * @since 2.0.0\n */\nexport function getValidationSemigroup(SE, SA) {\n    return {\n        concat: function (x, y) {\n            return isLeft(x) ? (isLeft(y) ? left(SE.concat(x.left, y.left)) : x) : isLeft(y) ? y : right(SA.concat(x.right, y.right));\n        }\n    };\n}\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Functor = {\n    URI: URI,\n    map: map_\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Applicative = {\n    URI: URI,\n    map: map_,\n    ap: ap_,\n    of: of\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Monad = {\n    URI: URI,\n    map: map_,\n    ap: ap_,\n    of: of,\n    chain: chain_\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Foldable = {\n    URI: URI,\n    reduce: reduce_,\n    foldMap: foldMap_,\n    reduceRight: reduceRight_\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Traversable = {\n    URI: URI,\n    map: map_,\n    reduce: reduce_,\n    foldMap: foldMap_,\n    reduceRight: reduceRight_,\n    traverse: traverse_,\n    sequence: sequence\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Bifunctor = {\n    URI: URI,\n    bimap: bimap_,\n    mapLeft: mapLeft_\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Alt = {\n    URI: URI,\n    map: map_,\n    alt: alt_\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Extend = {\n    URI: URI,\n    map: map_,\n    extend: extend_\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var ChainRec = {\n    URI: URI,\n    map: map_,\n    ap: ap_,\n    chain: chain_,\n    chainRec: chainRec_\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var MonadThrow = {\n    URI: URI,\n    map: map_,\n    ap: ap_,\n    of: of,\n    chain: chain_,\n    throwError: throwError\n};\n/**\n * @category instances\n * @since 2.0.0\n */\nexport function getValidationMonoid(SE, SA) {\n    return {\n        concat: getValidationSemigroup(SE, SA).concat,\n        empty: right(SA.empty)\n    };\n}\n/**\n * @category instances\n * @since 2.0.0\n */\nexport var either = {\n    URI: URI,\n    map: map_,\n    of: of,\n    ap: ap_,\n    chain: chain_,\n    reduce: reduce_,\n    foldMap: foldMap_,\n    reduceRight: reduceRight_,\n    traverse: traverse_,\n    sequence: sequence,\n    bimap: bimap_,\n    mapLeft: mapLeft_,\n    alt: alt_,\n    extend: extend_,\n    chainRec: chainRec_,\n    throwError: throwError\n};\n// -------------------------------------------------------------------------------------\n// utils\n// -------------------------------------------------------------------------------------\n/**\n * Default value for the `onError` argument of `tryCatch`\n *\n * @since 2.0.0\n */\nexport function toError(e) {\n    return e instanceof Error ? e : new Error(String(e));\n}\n/**\n * @since 2.0.0\n */\nexport function elem(E) {\n    return function (a, ma) { return (isLeft(ma) ? false : E.equals(a, ma.right)); };\n}\n/**\n * Returns `false` if `Left` or returns the result of the application of the given predicate to the `Right` value.\n *\n * @example\n * import { exists, left, right } from 'fp-ts/Either'\n *\n * const gt2 = exists((n: number) => n > 2)\n *\n * assert.strictEqual(gt2(left('a')), false)\n * assert.strictEqual(gt2(right(1)), false)\n * assert.strictEqual(gt2(right(3)), true)\n *\n * @since 2.0.0\n */\nexport function exists(predicate) {\n    return function (ma) { return (isLeft(ma) ? false : predicate(ma.right)); };\n}\n// -------------------------------------------------------------------------------------\n// do notation\n// -------------------------------------------------------------------------------------\n/**\n * @since 2.9.0\n */\nexport var Do = \n/*#__PURE__*/\nof({});\n/**\n * @since 2.8.0\n */\nexport var bindTo = function (name) {\n    return map(bindTo_(name));\n};\n/**\n * @since 2.8.0\n */\nexport var bindW = function (name, f) {\n    return chainW(function (a) {\n        return pipe(f(a), map(function (b) { return bind_(a, name, b); }));\n    });\n};\n/**\n * @since 2.8.0\n */\nexport var bind = bindW;\n// -------------------------------------------------------------------------------------\n// pipeable sequence S\n// -------------------------------------------------------------------------------------\n/**\n * @since 2.8.0\n */\nexport var apSW = function (name, fb) {\n    return flow(map(function (a) { return function (b) { return bind_(a, name, b); }; }), apW(fb));\n};\n/**\n * @since 2.8.0\n */\nexport var apS = apSW;\n// -------------------------------------------------------------------------------------\n// array utils\n// -------------------------------------------------------------------------------------\n/**\n *\n * @since 2.9.0\n */\nexport var traverseArrayWithIndex = function (f) { return function (arr) {\n    // tslint:disable-next-line: readonly-array\n    var result = [];\n    for (var i = 0; i < arr.length; i++) {\n        var e = f(i, arr[i]);\n        if (e._tag === 'Left') {\n            return e;\n        }\n        result.push(e.right);\n    }\n    return right(result);\n}; };\n/**\n * map an array using provided function to Either then transform to Either of the array\n * this function have the same behavior of `A.traverse(E.either)` but it's optimized and perform better\n *\n * @example\n *\n *\n * import { traverseArray, left, right, fromPredicate } from 'fp-ts/Either'\n * import { pipe } from 'fp-ts/function'\n * import * as A from 'fp-ts/Array'\n *\n * const arr = A.range(0, 10)\n * assert.deepStrictEqual(\n *   pipe(\n *     arr,\n *     traverseArray((x) => right(x))\n *   ),\n *   right(arr)\n * )\n * assert.deepStrictEqual(\n *   pipe(\n *     arr,\n *     traverseArray(\n *       fromPredicate(\n *         (x) => x > 5,\n *         () => 'a'\n *       )\n *     )\n *   ),\n *   left('a')\n * )\n * @since 2.9.0\n */\nexport var traverseArray = function (f) { return traverseArrayWithIndex(function (_, a) { return f(a); }); };\n/**\n * convert an array of either to an either of array\n * this function have the same behavior of `A.sequence(E.either)` but it's optimized and perform better\n *\n * @example\n *\n * import { sequenceArray, left, right } from 'fp-ts/Either'\n * import { pipe } from 'fp-ts/function'\n * import * as A from 'fp-ts/Array'\n *\n * const arr = A.range(0, 10)\n * assert.deepStrictEqual(pipe(arr, A.map(right), sequenceArray), right(arr))\n * assert.deepStrictEqual(pipe(arr, A.map(right), A.cons(left('Error')), sequenceArray), left('Error'))\n *\n * @since 2.9.0\n */\nexport var sequenceArray = \n/*#__PURE__*/\ntraverseArray(identity);\n"],"mappings":"AAAA,SAASA,OAAO,QAAQ,YAAY;AACpC,SAASC,QAAQ,EAAEC,IAAI,EAAEC,KAAK,EAAEC,OAAO,EAAEC,IAAI,QAAQ,YAAY;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAIC,MAAM,GAAG,UAAUC,EAAE,EAAE;EAAE,OAAOA,EAAE,CAACC,IAAI,KAAK,MAAM;AAAE,CAAC;AAChE;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAIC,OAAO,GAAG,UAAUF,EAAE,EAAE;EAAE,OAAOA,EAAE,CAACC,IAAI,KAAK,OAAO;AAAE,CAAC;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAIE,IAAI,GAAG,UAAUC,CAAC,EAAE;EAAE,OAAQ;IAAEH,IAAI,EAAE,MAAM;IAAEE,IAAI,EAAEC;EAAE,CAAC;AAAG,CAAC;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAIC,KAAK,GAAG,UAAUC,CAAC,EAAE;EAAE,OAAQ;IAAEL,IAAI,EAAE,OAAO;IAAEI,KAAK,EAAEC;EAAE,CAAC;AAAG,CAAC;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,YAAY,CAACH,CAAC,EAAE;EAC5B,OAAO,UAAUE,CAAC,EAAE;IAAE,OAAQA,CAAC,IAAI,IAAI,GAAGH,IAAI,CAACC,CAAC,CAAC,GAAGC,KAAK,CAACC,CAAC,CAAC;EAAG,CAAC;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASE,QAAQ,CAACC,CAAC,EAAEC,OAAO,EAAE;EACjC,IAAI;IACA,OAAOL,KAAK,CAACI,CAAC,EAAE,CAAC;EACrB,CAAC,CACD,OAAOL,CAAC,EAAE;IACN,OAAOD,IAAI,CAACO,OAAO,CAACN,CAAC,CAAC,CAAC;EAC3B;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASO,SAAS,CAACC,CAAC,EAAEF,OAAO,EAAE;EAClC,OAAOF,QAAQ,CAAC,YAAY;IAAE,OAAOK,IAAI,CAACC,KAAK,CAACF,CAAC,CAAC;EAAE,CAAC,EAAEF,OAAO,CAAC;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASK,aAAa,CAACC,CAAC,EAAEN,OAAO,EAAE;EACtC,OAAOF,QAAQ,CAAC,YAAY;IAAE,OAAOK,IAAI,CAACI,SAAS,CAACD,CAAC,CAAC;EAAE,CAAC,EAAEN,OAAO,CAAC;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAIQ,UAAU,GAAG,UAAUC,MAAM,EAAE;EAAE,OAAO,UAAUnB,EAAE,EAAE;IAC7D,OAAOA,EAAE,CAACC,IAAI,KAAK,MAAM,GAAGE,IAAI,CAACgB,MAAM,EAAE,CAAC,GAAGd,KAAK,CAACL,EAAE,CAACoB,KAAK,CAAC;EAChE,CAAC;AAAE,CAAC;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAIC,aAAa,GAAG,UAAUC,SAAS,EAAEC,OAAO,EAAE;EAAE,OAAO,UAAUjB,CAAC,EAAE;IAAE,OAAQgB,SAAS,CAAChB,CAAC,CAAC,GAAGD,KAAK,CAACC,CAAC,CAAC,GAAGH,IAAI,CAACoB,OAAO,CAACjB,CAAC,CAAC,CAAC;EAAG,CAAC;AAAE,CAAC;AAC1I;AACA;AACA;AACA;A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"},"metadata":{},"sourceType":"module"}
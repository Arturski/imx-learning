{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar index_1 = __importDefault(require(\"./index\"));\nvar hdkey_1 = require(\"ethereum-cryptography/hdkey\");\nvar EthereumHDKey = /** @class */function () {\n  function EthereumHDKey(_hdkey) {\n    this._hdkey = _hdkey;\n  }\n  /**\n   * Creates an instance based on a seed.\n   *\n   * For the seed we suggest to use [bip39](https://npmjs.org/package/bip39) to\n   * create one from a BIP39 mnemonic.\n   */\n  EthereumHDKey.fromMasterSeed = function (seedBuffer) {\n    return new EthereumHDKey(hdkey_1.HDKey.fromMasterSeed(seedBuffer));\n  };\n  /**\n   * Create an instance based on a BIP32 extended private or public key.\n   */\n  EthereumHDKey.fromExtendedKey = function (base58Key) {\n    return new EthereumHDKey(hdkey_1.HDKey.fromExtendedKey(base58Key));\n  };\n  /**\n   * Returns a BIP32 extended private key (xprv)\n   */\n  EthereumHDKey.prototype.privateExtendedKey = function () {\n    if (!this._hdkey.privateExtendedKey) {\n      throw new Error('This is a public key only wallet');\n    }\n    return this._hdkey.privateExtendedKey;\n  };\n  /**\n   * Return a BIP32 extended public key (xpub)\n   */\n  EthereumHDKey.prototype.publicExtendedKey = function () {\n    return this._hdkey.publicExtendedKey;\n  };\n  /**\n   * Derives a node based on a path (e.g. m/44'/0'/0/1)\n   */\n  EthereumHDKey.prototype.derivePath = function (path) {\n    return new EthereumHDKey(this._hdkey.derive(path));\n  };\n  /**\n   * Derive a node based on a child index\n   */\n  EthereumHDKey.prototype.deriveChild = function (index) {\n    return new EthereumHDKey(this._hdkey.deriveChild(index));\n  };\n  /**\n   * Return a `Wallet` instance as seen above\n   */\n  EthereumHDKey.prototype.getWallet = function () {\n    if (this._hdkey._privateKey) {\n      return index_1.default.fromPrivateKey(this._hdkey._privateKey);\n    }\n    return index_1.default.fromPublicKey(this._hdkey._publicKey, true);\n  };\n  return EthereumHDKey;\n}();\nexports.default = EthereumHDKey;","map":{"version":3,"sources":["../src/hdkey.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,IAAA,OAAA,GAAA,eAAA,CAAA,OAAA,CAAA,SAAA,CAAA,CAAA;AAEA,IAAA,OAAA,GAAA,OAAA,CAAA,6BAAA,CAAA;AAEA,IAAA,aAAA,GAAA,aAAA,YAAA;EAkBE,SAAA,aAAA,CAA6B,MAAY,EAAA;IAAZ,IAAA,CAAA,MAAM,GAAN,MAAM;EAAS;EAjB5C;;;;;AAKG;EACW,aAAA,CAAA,cAAc,GAA5B,UAA6B,UAAkB,EAAA;IAC7C,OAAO,IAAI,aAAa,CAAC,OAAA,CAAA,KAAK,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC;EAC5D,CAAC;EAED;;AAEG;EACW,aAAA,CAAA,eAAe,GAA7B,UAA8B,SAAiB,EAAA;IAC7C,OAAO,IAAI,aAAa,CAAC,OAAA,CAAA,KAAK,CAAC,eAAe,CAAC,SAAS,CAAC,CAAC;EAC5D,CAAC;EAID;;AAEG;EACI,aAAA,CAAA,SAAA,CAAA,kBAAkB,GAAzB,YAAA;IACE,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,kBAAkB,EAAE;MACnC,MAAM,IAAI,KAAK,CAAC,kCAAkC,CAAC;IACpD;IACD,OAAO,IAAI,CAAC,MAAM,CAAC,kBAAkB;EACvC,CAAC;EAED;;AAEG;EACI,aAAA,CAAA,SAAA,CAAA,iBAAiB,GAAxB,YAAA;IACE,OAAO,IAAI,CAAC,MAAM,CAAC,iBAAiB;EACtC,CAAC;EAED;;AAEG;EACI,aAAA,CAAA,SAAA,CAAA,UAAU,GAAjB,UAAkB,IAAY,EAAA;IAC5B,OAAO,IAAI,aAAa,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;EACpD,CAAC;EAED;;AAEG;EACI,aAAA,CAAA,SAAA,CAAA,WAAW,GAAlB,UAAmB,KAAa,EAAA;IAC9B,OAAO,IAAI,aAAa,CAAC,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;EAC1D,CAAC;EAED;;AAEG;EACI,aAAA,CAAA,SAAA,CAAA,SAAS,GAAhB,YAAA;IACE,IAAI,IAAI,CAAC,MAAM,CAAC,WAAW,EAAE;MAC3B,OAAO,OAAA,CAAA,OAAM,CAAC,cAAc,CAAC,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC;IACtD;IACD,OAAO,OAAA,CAAA,OAAM,CAAC,aAAa,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,EAAE,IAAI,CAAC;EAC3D,CAAC;EACH,OAAA,aAAC;AAAD,CAAC,EAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar index_1 = __importDefault(require(\"./index\"));\nvar hdkey_1 = require(\"ethereum-cryptography/hdkey\");\nvar EthereumHDKey = /** @class */ (function () {\n    function EthereumHDKey(_hdkey) {\n        this._hdkey = _hdkey;\n    }\n    /**\n     * Creates an instance based on a seed.\n     *\n     * For the seed we suggest to use [bip39](https://npmjs.org/package/bip39) to\n     * create one from a BIP39 mnemonic.\n     */\n    EthereumHDKey.fromMasterSeed = function (seedBuffer) {\n        return new EthereumHDKey(hdkey_1.HDKey.fromMasterSeed(seedBuffer));\n    };\n    /**\n     * Create an instance based on a BIP32 extended private or public key.\n     */\n    EthereumHDKey.fromExtendedKey = function (base58Key) {\n        return new EthereumHDKey(hdkey_1.HDKey.fromExtendedKey(base58Key));\n    };\n    /**\n     * Returns a BIP32 extended private key (xprv)\n     */\n    EthereumHDKey.prototype.privateExtendedKey = function () {\n        if (!this._hdkey.privateExtendedKey) {\n            throw new Error('This is a public key only wallet');\n        }\n        return this._hdkey.privateExtendedKey;\n    };\n    /**\n     * Return a BIP32 extended public key (xpub)\n     */\n    EthereumHDKey.prototype.publicExtendedKey = function () {\n        return this._hdkey.publicExtendedKey;\n    };\n    /**\n     * Derives a node based on a path (e.g. m/44'/0'/0/1)\n     */\n    EthereumHDKey.prototype.derivePath = function (path) {\n        return new EthereumHDKey(this._hdkey.derive(path));\n    };\n    /**\n     * Derive a node based on a child index\n     */\n    EthereumHDKey.prototype.deriveChild = function (index) {\n        return new EthereumHDKey(this._hdkey.deriveChild(index));\n    };\n    /**\n     * Return a `Wallet` instance as seen above\n     */\n    EthereumHDKey.prototype.getWallet = function () {\n        if (this._hdkey._privateKey) {\n            return index_1.default.fromPrivateKey(this._hdkey._privateKey);\n        }\n        return index_1.default.fromPublicKey(this._hdkey._publicKey, true);\n    };\n    return EthereumHDKey;\n}());\nexports.default = EthereumHDKey;\n//# sourceMappingURL=hdkey.js.map"]},"metadata":{},"sourceType":"script"}
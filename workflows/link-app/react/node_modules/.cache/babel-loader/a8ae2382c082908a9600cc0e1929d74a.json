{"ast":null,"code":"/**\n * @since 0.5.2\n */\nimport { iso } from 'newtype-ts';\nimport * as t from 'io-ts';\nimport { pipe } from 'fp-ts/es6/pipeable';\nimport { map } from 'fp-ts/es6/Either';\n/**\n * Returns a codec from a newtype\n *\n * @example\n * import { fromNewtype } from 'io-ts-types/es6/fromNewtype'\n * import * as t from 'io-ts'\n * import { right } from 'fp-ts/es6/Either'\n * import { PathReporter } from 'io-ts/es6/PathReporter'\n * import { Newtype, iso } from 'newtype-ts'\n *\n * interface Token extends Newtype<{ readonly Token: unique symbol }, string> {}\n *\n * const T = fromNewtype<Token>(t.string)\n *\n * assert.deepStrictEqual(T.decode('sometoken'), right(iso<Token>().wrap('sometoken')))\n * assert.deepStrictEqual(PathReporter.report(T.decode(42)), ['Invalid value 42 supplied to : fromNewtype(string)'])\n *\n * @since 0.5.2\n */\nexport function fromNewtype(codec, name) {\n  if (name === void 0) {\n    name = \"fromNewtype(\" + codec.name + \")\";\n  }\n  var i = iso();\n  return new t.Type(name, function (u) {\n    return codec.is(u);\n  }, function (u, c) {\n    return pipe(codec.validate(u, c), map(i.wrap));\n  }, function (a) {\n    return codec.encode(i.unwrap(a));\n  });\n}","map":{"version":3,"names":["iso","t","pipe","map","fromNewtype","codec","name","i","Type","u","is","c","validate","wrap","a","encode","unwrap"],"sources":["/Users/arthurfrancis/Documents/repo/imx-reactjs-integration-example/node_modules/io-ts-types/es6/fromNewtype.js"],"sourcesContent":["/**\n * @since 0.5.2\n */\nimport { iso } from 'newtype-ts';\nimport * as t from 'io-ts';\nimport { pipe } from 'fp-ts/es6/pipeable';\nimport { map } from 'fp-ts/es6/Either';\n/**\n * Returns a codec from a newtype\n *\n * @example\n * import { fromNewtype } from 'io-ts-types/es6/fromNewtype'\n * import * as t from 'io-ts'\n * import { right } from 'fp-ts/es6/Either'\n * import { PathReporter } from 'io-ts/es6/PathReporter'\n * import { Newtype, iso } from 'newtype-ts'\n *\n * interface Token extends Newtype<{ readonly Token: unique symbol }, string> {}\n *\n * const T = fromNewtype<Token>(t.string)\n *\n * assert.deepStrictEqual(T.decode('sometoken'), right(iso<Token>().wrap('sometoken')))\n * assert.deepStrictEqual(PathReporter.report(T.decode(42)), ['Invalid value 42 supplied to : fromNewtype(string)'])\n *\n * @since 0.5.2\n */\nexport function fromNewtype(codec, name) {\n    if (name === void 0) { name = \"fromNewtype(\" + codec.name + \")\"; }\n    var i = iso();\n    return new t.Type(name, function (u) { return codec.is(u); }, function (u, c) {\n        return pipe(codec.validate(u, c), map(i.wrap));\n    }, function (a) { return codec.encode(i.unwrap(a)); });\n}\n"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,GAAG,QAAQ,YAAY;AAChC,OAAO,KAAKC,CAAC,MAAM,OAAO;AAC1B,SAASC,IAAI,QAAQ,oBAAoB;AACzC,SAASC,GAAG,QAAQ,kBAAkB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,WAAW,CAACC,KAAK,EAAEC,IAAI,EAAE;EACrC,IAAIA,IAAI,KAAK,KAAK,CAAC,EAAE;IAAEA,IAAI,GAAG,cAAc,GAAGD,KAAK,CAACC,IAAI,GAAG,GAAG;EAAE;EACjE,IAAIC,CAAC,GAAGP,GAAG,EAAE;EACb,OAAO,IAAIC,CAAC,CAACO,IAAI,CAACF,IAAI,EAAE,UAAUG,CAAC,EAAE;IAAE,OAAOJ,KAAK,CAACK,EAAE,CAACD,CAAC,CAAC;EAAE,CAAC,EAAE,UAAUA,CAAC,EAAEE,CAAC,EAAE;IAC1E,OAAOT,IAAI,CAACG,KAAK,CAACO,QAAQ,CAACH,CAAC,EAAEE,CAAC,CAAC,EAAER,GAAG,CAACI,CAAC,CAACM,IAAI,CAAC,CAAC;EAClD,CAAC,EAAE,UAAUC,CAAC,EAAE;IAAE,OAAOT,KAAK,CAACU,MAAM,CAACR,CAAC,CAACS,MAAM,CAACF,CAAC,CAAC,CAAC;EAAE,CAAC,CAAC;AAC1D"},"metadata":{},"sourceType":"module"}
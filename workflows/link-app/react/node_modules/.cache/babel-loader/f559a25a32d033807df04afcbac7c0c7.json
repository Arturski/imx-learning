{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getWitherable = exports.getFilterable = exports.getApplyMonoid = exports.getApplySemigroup = exports.getSemigroup = exports.getEq = exports.getShow = exports.URI = exports.throwError = exports.sequence = exports.traverse = exports.reduceRight = exports.foldMap = exports.reduce = exports.duplicate = exports.extend = exports.alt = exports.altW = exports.flatten = exports.chainFirst = exports.chainFirstW = exports.chain = exports.chainW = exports.of = exports.apSecond = exports.apFirst = exports.ap = exports.apW = exports.mapLeft = exports.bimap = exports.map = exports.filterOrElse = exports.filterOrElseW = exports.orElse = exports.swap = exports.chainNullableK = exports.fromNullableK = exports.getOrElse = exports.getOrElseW = exports.fold = exports.fromPredicate = exports.fromOption = exports.stringifyJSON = exports.parseJSON = exports.tryCatch = exports.fromNullable = exports.right = exports.left = exports.isRight = exports.isLeft = void 0;\nexports.sequenceArray = exports.traverseArray = exports.traverseArrayWithIndex = exports.apS = exports.apSW = exports.bind = exports.bindW = exports.bindTo = exports.Do = exports.exists = exports.elem = exports.toError = exports.either = exports.getValidationMonoid = exports.MonadThrow = exports.ChainRec = exports.Extend = exports.Alt = exports.Bifunctor = exports.Traversable = exports.Foldable = exports.Monad = exports.Applicative = exports.Functor = exports.getValidationSemigroup = exports.getValidation = exports.getAltValidation = exports.getApplicativeValidation = void 0;\nvar ChainRec_1 = require(\"./ChainRec\");\nvar function_1 = require(\"./function\");\n// -------------------------------------------------------------------------------------\n// guards\n// -------------------------------------------------------------------------------------\n/**\n * Returns `true` if the either is an instance of `Left`, `false` otherwise.\n *\n * @category guards\n * @since 2.0.0\n */\nvar isLeft = function (ma) {\n  return ma._tag === 'Left';\n};\nexports.isLeft = isLeft;\n/**\n * Returns `true` if the either is an instance of `Right`, `false` otherwise.\n *\n * @category guards\n * @since 2.0.0\n */\nvar isRight = function (ma) {\n  return ma._tag === 'Right';\n};\nexports.isRight = isRight;\n// -------------------------------------------------------------------------------------\n// constructors\n// -------------------------------------------------------------------------------------\n/**\n * Constructs a new `Either` holding a `Left` value. This usually represents a failure, due to the right-bias of this\n * structure.\n *\n * @category constructors\n * @since 2.0.0\n */\nvar left = function (e) {\n  return {\n    _tag: 'Left',\n    left: e\n  };\n};\nexports.left = left;\n/**\n * Constructs a new `Either` holding a `Right` value. This usually represents a successful value due to the right bias\n * of this structure.\n *\n * @category constructors\n * @since 2.0.0\n */\nvar right = function (a) {\n  return {\n    _tag: 'Right',\n    right: a\n  };\n};\nexports.right = right;\n// TODO: make lazy in v3\n/**\n * Takes a default and a nullable value, if the value is not nully, turn it into a `Right`, if the value is nully use\n * the provided default as a `Left`.\n *\n * @example\n * import { fromNullable, left, right } from 'fp-ts/Either'\n *\n * const parse = fromNullable('nully')\n *\n * assert.deepStrictEqual(parse(1), right(1))\n * assert.deepStrictEqual(parse(null), left('nully'))\n *\n * @category constructors\n * @since 2.0.0\n */\nfunction fromNullable(e) {\n  return function (a) {\n    return a == null ? exports.left(e) : exports.right(a);\n  };\n}\nexports.fromNullable = fromNullable;\n// TODO: `onError => Lazy<A> => Either` in v3\n/**\n * Constructs a new `Either` from a function that might throw.\n *\n * @example\n * import { Either, left, right, tryCatch } from 'fp-ts/Either'\n *\n * const unsafeHead = <A>(as: Array<A>): A => {\n *   if (as.length > 0) {\n *     return as[0]\n *   } else {\n *     throw new Error('empty array')\n *   }\n * }\n *\n * const head = <A>(as: Array<A>): Either<Error, A> => {\n *   return tryCatch(() => unsafeHead(as), e => (e instanceof Error ? e : new Error('unknown error')))\n * }\n *\n * assert.deepStrictEqual(head([]), left(new Error('empty array')))\n * assert.deepStrictEqual(head([1, 2, 3]), right(1))\n *\n * @category constructors\n * @since 2.0.0\n */\nfunction tryCatch(f, onError) {\n  try {\n    return exports.right(f());\n  } catch (e) {\n    return exports.left(onError(e));\n  }\n}\nexports.tryCatch = tryCatch;\n// TODO curry in v3\n/**\n * Converts a JavaScript Object Notation (JSON) string into an object.\n *\n * @example\n * import { parseJSON, toError, right, left } from 'fp-ts/Either'\n *\n * assert.deepStrictEqual(parseJSON('{\"a\":1}', toError), right({ a: 1 }))\n * assert.deepStrictEqual(parseJSON('{\"a\":}', toError), left(new SyntaxError('Unexpected token } in JSON at position 5')))\n *\n * @category constructors\n * @since 2.0.0\n */\nfunction parseJSON(s, onError) {\n  return tryCatch(function () {\n    return JSON.parse(s);\n  }, onError);\n}\nexports.parseJSON = parseJSON;\n// TODO curry in v3\n/**\n * Converts a JavaScript value to a JavaScript Object Notation (JSON) string.\n *\n * @example\n * import * as E from 'fp-ts/Either'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(E.stringifyJSON({ a: 1 }, E.toError), E.right('{\"a\":1}'))\n * const circular: any = { ref: null }\n * circular.ref = circular\n * assert.deepStrictEqual(\n *   pipe(\n *     E.stringifyJSON(circular, E.toError),\n *     E.mapLeft(e => e.message.includes('Converting circular structure to JSON'))\n *   ),\n *   E.left(true)\n * )\n *\n * @category constructors\n * @since 2.0.0\n */\nfunction stringifyJSON(u, onError) {\n  return tryCatch(function () {\n    return JSON.stringify(u);\n  }, onError);\n}\nexports.stringifyJSON = stringifyJSON;\n/**\n * Derivable from `MonadThrow`.\n *\n * @example\n * import { fromOption, left, right } from 'fp-ts/Either'\n * import { pipe } from 'fp-ts/function'\n * import { none, some } from 'fp-ts/Option'\n *\n * assert.deepStrictEqual(\n *   pipe(\n *     some(1),\n *     fromOption(() => 'error')\n *   ),\n *   right(1)\n * )\n * assert.deepStrictEqual(\n *   pipe(\n *     none,\n *     fromOption(() => 'error')\n *   ),\n *   left('error')\n * )\n *\n * @category constructors\n * @since 2.0.0\n */\nvar fromOption = function (onNone) {\n  return function (ma) {\n    return ma._tag === 'None' ? exports.left(onNone()) : exports.right(ma.value);\n  };\n};\nexports.fromOption = fromOption;\n/**\n * Derivable from `MonadThrow`.\n *\n * @example\n * import { fromPredicate, left, right } from 'fp-ts/Either'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(\n *   pipe(\n *     1,\n *     fromPredicate(\n *       (n) => n > 0,\n *       () => 'error'\n *     )\n *   ),\n *   right(1)\n * )\n * assert.deepStrictEqual(\n *   pipe(\n *     -1,\n *     fromPredicate(\n *       (n) => n > 0,\n *       () => 'error'\n *     )\n *   ),\n *   left('error')\n * )\n *\n * @category constructors\n * @since 2.0.0\n */\nvar fromPredicate = function (predicate, onFalse) {\n  return function (a) {\n    return predicate(a) ? exports.right(a) : exports.left(onFalse(a));\n  };\n};\nexports.fromPredicate = fromPredicate;\n// -------------------------------------------------------------------------------------\n// destructors\n// -------------------------------------------------------------------------------------\n/**\n * Takes two functions and an `Either` value, if the value is a `Left` the inner value is applied to the first function,\n * if the value is a `Right` the inner value is applied to the second function.\n *\n * @example\n * import { fold, left, right } from 'fp-ts/Either'\n * import { pipe } from 'fp-ts/function'\n *\n * function onLeft(errors: Array<string>): string {\n *   return `Errors: ${errors.join(', ')}`\n * }\n *\n * function onRight(value: number): string {\n *   return `Ok: ${value}`\n * }\n *\n * assert.strictEqual(\n *   pipe(\n *     right(1),\n *     fold(onLeft, onRight)\n *   ),\n *   'Ok: 1'\n * )\n * assert.strictEqual(\n *   pipe(\n *     left(['error 1', 'error 2']),\n *     fold(onLeft, onRight)\n *   ),\n *   'Errors: error 1, error 2'\n * )\n *\n * @category destructors\n * @since 2.0.0\n */\nfunction fold(onLeft, onRight) {\n  return function (ma) {\n    return exports.isLeft(ma) ? onLeft(ma.left) : onRight(ma.right);\n  };\n}\nexports.fold = fold;\n/**\n * Less strict version of [`getOrElse`](#getOrElse).\n *\n * @category destructors\n * @since 2.6.0\n */\nvar getOrElseW = function (onLeft) {\n  return function (ma) {\n    return exports.isLeft(ma) ? onLeft(ma.left) : ma.right;\n  };\n};\nexports.getOrElseW = getOrElseW;\n/**\n * Returns the wrapped value if it's a `Right` or a default value if is a `Left`.\n *\n * @example\n * import { getOrElse, left, right } from 'fp-ts/Either'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(\n *   pipe(\n *     right(1),\n *     getOrElse(() => 0)\n *   ),\n *   1\n * )\n * assert.deepStrictEqual(\n *   pipe(\n *     left('error'),\n *     getOrElse(() => 0)\n *   ),\n *   0\n * )\n *\n * @category destructors\n * @since 2.0.0\n */\nexports.getOrElse = exports.getOrElseW;\n// -------------------------------------------------------------------------------------\n// combinators\n// -------------------------------------------------------------------------------------\n/**\n * @category combinators\n * @since 2.9.0\n */\nfunction fromNullableK(e) {\n  var from = fromNullable(e);\n  return function (f) {\n    return function () {\n      var a = [];\n      for (var _i = 0; _i < arguments.length; _i++) {\n        a[_i] = arguments[_i];\n      }\n      return from(f.apply(void 0, a));\n    };\n  };\n}\nexports.fromNullableK = fromNullableK;\n/**\n * @category combinators\n * @since 2.9.0\n */\nfunction chainNullableK(e) {\n  var from = fromNullableK(e);\n  return function (f) {\n    return exports.chain(from(f));\n  };\n}\nexports.chainNullableK = chainNullableK;\n/**\n * Returns a `Right` if is a `Left` (and vice versa).\n *\n * @category combinators\n * @since 2.0.0\n */\nfunction swap(ma) {\n  return exports.isLeft(ma) ? exports.right(ma.left) : exports.left(ma.right);\n}\nexports.swap = swap;\n/**\n * Useful for recovering from errors.\n *\n * @category combinators\n * @since 2.0.0\n */\nfunction orElse(onLeft) {\n  return function (ma) {\n    return exports.isLeft(ma) ? onLeft(ma.left) : ma;\n  };\n}\nexports.orElse = orElse;\n/**\n * Less strict version of [`filterOrElse`](#filterOrElse).\n *\n * @since 2.9.0\n */\nvar filterOrElseW = function (predicate, onFalse) {\n  return exports.chainW(function (a) {\n    return predicate(a) ? exports.right(a) : exports.left(onFalse(a));\n  });\n};\nexports.filterOrElseW = filterOrElseW;\n/**\n * Derivable from `MonadThrow`.\n *\n * @example\n * import { filterOrElse, left, right } from 'fp-ts/Either'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(\n *   pipe(\n *     right(1),\n *     filterOrElse(\n *       (n) => n > 0,\n *       () => 'error'\n *     )\n *   ),\n *   right(1)\n * )\n * assert.deepStrictEqual(\n *   pipe(\n *     right(-1),\n *     filterOrElse(\n *       (n) => n > 0,\n *       () => 'error'\n *     )\n *   ),\n *   left('error')\n * )\n * assert.deepStrictEqual(\n *   pipe(\n *     left('a'),\n *     filterOrElse(\n *       (n) => n > 0,\n *       () => 'error'\n *     )\n *   ),\n *   left('a')\n * )\n *\n * @category combinators\n * @since 2.0.0\n */\nexports.filterOrElse = exports.filterOrElseW;\n// -------------------------------------------------------------------------------------\n// non-pipeables\n// -------------------------------------------------------------------------------------\nvar map_ = function (fa, f) {\n  return function_1.pipe(fa, exports.map(f));\n};\nvar ap_ = function (fab, fa) {\n  return function_1.pipe(fab, exports.ap(fa));\n};\n/* istanbul ignore next */\nvar chain_ = function (ma, f) {\n  return function_1.pipe(ma, exports.chain(f));\n};\n/* istanbul ignore next */\nvar reduce_ = function (fa, b, f) {\n  return function_1.pipe(fa, exports.reduce(b, f));\n};\n/* istanbul ignore next */\nvar foldMap_ = function (M) {\n  return function (fa, f) {\n    var foldMapM = exports.foldMap(M);\n    return function_1.pipe(fa, foldMapM(f));\n  };\n};\n/* istanbul ignore next */\nvar reduceRight_ = function (fa, b, f) {\n  return function_1.pipe(fa, exports.reduceRight(b, f));\n};\nvar traverse_ = function (F) {\n  var traverseF = exports.traverse(F);\n  return function (ta, f) {\n    return function_1.pipe(ta, traverseF(f));\n  };\n};\nvar bimap_ = function (fa, f, g) {\n  return function_1.pipe(fa, exports.bimap(f, g));\n};\nvar mapLeft_ = function (fa, f) {\n  return function_1.pipe(fa, exports.mapLeft(f));\n};\n/* istanbul ignore next */\nvar alt_ = function (fa, that) {\n  return function_1.pipe(fa, exports.alt(that));\n};\n/* istanbul ignore next */\nvar extend_ = function (wa, f) {\n  return function_1.pipe(wa, exports.extend(f));\n};\nvar chainRec_ = function (a, f) {\n  return ChainRec_1.tailRec(f(a), function (e) {\n    return exports.isLeft(e) ? exports.right(exports.left(e.left)) : exports.isLeft(e.right) ? exports.left(f(e.right.left)) : exports.right(exports.right(e.right.right));\n  });\n};\n// -------------------------------------------------------------------------------------\n// pipeables\n// -------------------------------------------------------------------------------------\n/**\n * `map` can be used to turn functions `(a: A) => B` into functions `(fa: F<A>) => F<B>` whose argument and return types\n * use the type constructor `F` to represent some computational context.\n *\n * @category Functor\n * @since 2.0.0\n */\nvar map = function (f) {\n  return function (fa) {\n    return exports.isLeft(fa) ? fa : exports.right(f(fa.right));\n  };\n};\nexports.map = map;\n/**\n * Map a pair of functions over the two type arguments of the bifunctor.\n *\n * @category Bifunctor\n * @since 2.0.0\n */\nvar bimap = function (f, g) {\n  return function (fa) {\n    return exports.isLeft(fa) ? exports.left(f(fa.left)) : exports.right(g(fa.right));\n  };\n};\nexports.bimap = bimap;\n/**\n * Map a function over the first type argument of a bifunctor.\n *\n * @category Bifunctor\n * @since 2.0.0\n */\nvar mapLeft = function (f) {\n  return function (fa) {\n    return exports.isLeft(fa) ? exports.left(f(fa.left)) : fa;\n  };\n};\nexports.mapLeft = mapLeft;\n/**\n * Less strict version of [`ap`](#ap).\n *\n * @category Apply\n * @since 2.8.0\n */\nvar apW = function (fa) {\n  return function (fab) {\n    return exports.isLeft(fab) ? fab : exports.isLeft(fa) ? fa : exports.right(fab.right(fa.right));\n  };\n};\nexports.apW = apW;\n/**\n * Apply a function to an argument under a type constructor.\n *\n * @category Apply\n * @since 2.0.0\n */\nexports.ap = exports.apW;\n/**\n * Combine two effectful actions, keeping only the result of the first.\n *\n * Derivable from `Apply`.\n *\n * @category combinators\n * @since 2.0.0\n */\nvar apFirst = function (fb) {\n  return function_1.flow(exports.map(function (a) {\n    return function () {\n      return a;\n    };\n  }), exports.ap(fb));\n};\nexports.apFirst = apFirst;\n/**\n * Combine two effectful actions, keeping only the result of the second.\n *\n * Derivable from `Apply`.\n *\n * @category combinators\n * @since 2.0.0\n */\nvar apSecond = function (fb) {\n  return function_1.flow(exports.map(function () {\n    return function (b) {\n      return b;\n    };\n  }), exports.ap(fb));\n};\nexports.apSecond = apSecond;\n/**\n * Wrap a value into the type constructor.\n *\n * Equivalent to [`right`](#right).\n *\n * @example\n * import * as E from 'fp-ts/Either'\n *\n * assert.deepStrictEqual(E.of('a'), E.right('a'))\n *\n * @category Applicative\n * @since 2.7.0\n */\nexports.of = exports.right;\n/**\n * Less strict version of [`chain`](#chain).\n *\n * @category Monad\n * @since 2.6.0\n */\nvar chainW = function (f) {\n  return function (ma) {\n    return exports.isLeft(ma) ? ma : f(ma.right);\n  };\n};\nexports.chainW = chainW;\n/**\n * Composes computations in sequence, using the return value of one computation to determine the next computation.\n *\n * @category Monad\n * @since 2.0.0\n */\nexports.chain = exports.chainW;\n/**\n * Less strict version of [`chainFirst`](#chainFirst)\n *\n * Derivable from `Monad`.\n *\n * @category combinators\n * @since 2.8.0\n */\nvar chainFirstW = function (f) {\n  return function (ma) {\n    return function_1.pipe(ma, exports.chainW(function (a) {\n      return function_1.pipe(f(a), exports.map(function () {\n        return a;\n      }));\n    }));\n  };\n};\nexports.chainFirstW = chainFirstW;\n/**\n * Composes computations in sequence, using the return value of one computation to determine the next computation and\n * keeping only the result of the first.\n *\n * Derivable from `Monad`.\n *\n * @category combinators\n * @since 2.0.0\n */\nexports.chainFirst = exports.chainFirstW;\n/**\n * The `flatten` function is the conventional monad join operator. It is used to remove one level of monadic structure, projecting its bound argument into the outer level.\n *\n * Derivable from `Monad`.\n *\n * @example\n * import * as E from 'fp-ts/Either'\n *\n * assert.deepStrictEqual(E.flatten(E.right(E.right('a'))), E.right('a'))\n * assert.deepStrictEqual(E.flatten(E.right(E.left('e'))), E.left('e'))\n * assert.deepStrictEqual(E.flatten(E.left('e')), E.left('e'))\n *\n * @category combinators\n * @since 2.0.0\n */\nexports.flatten = /*#__PURE__*/\nexports.chain(function_1.identity);\n/**\n * Less strict version of [`alt`](#alt).\n *\n * @category Alt\n * @since 2.9.0\n */\nvar altW = function (that) {\n  return function (fa) {\n    return exports.isLeft(fa) ? that() : fa;\n  };\n};\nexports.altW = altW;\n/**\n * Identifies an associative operation on a type constructor. It is similar to `Semigroup`, except that it applies to\n * types of kind `* -> *`.\n *\n * @category Alt\n * @since 2.0.0\n */\nexports.alt = exports.altW;\n/**\n * @category Extend\n * @since 2.0.0\n */\nvar extend = function (f) {\n  return function (wa) {\n    return exports.isLeft(wa) ? wa : exports.right(f(wa));\n  };\n};\nexports.extend = extend;\n/**\n * Derivable from `Extend`.\n *\n * @category combinators\n * @since 2.0.0\n */\nexports.duplicate = /*#__PURE__*/\nexports.extend(function_1.identity);\n/**\n * Left-associative fold of a structure.\n *\n * @example\n * import { pipe } from 'fp-ts/function'\n * import * as E from 'fp-ts/Either'\n *\n * const startWith = 'prefix'\n * const concat = (a: string, b: string) => `${a}:${b}`\n *\n * assert.deepStrictEqual(\n *   pipe(E.right('a'), E.reduce(startWith, concat)),\n *   'prefix:a',\n * )\n *\n * assert.deepStrictEqual(\n *   pipe(E.left('e'), E.reduce(startWith, concat)),\n *   'prefix',\n * )\n *\n * @category Foldable\n * @since 2.0.0\n */\nvar reduce = function (b, f) {\n  return function (fa) {\n    return exports.isLeft(fa) ? b : f(b, fa.right);\n  };\n};\nexports.reduce = reduce;\n/**\n * Map each element of the structure to a monoid, and combine the results.\n *\n * @example\n * import { pipe } from 'fp-ts/function';\n * import * as E from 'fp-ts/Either'\n * import { monoidString } from 'fp-ts/Monoid'\n *\n * const yell = (a: string) => `${a}!`\n *\n * assert.deepStrictEqual(\n *   pipe(E.right('a'), E.foldMap(monoidString)(yell)),\n *   'a!',\n * )\n *\n * assert.deepStrictEqual(\n *   pipe(E.left('e'), E.foldMap(monoidString)(yell)),\n *   monoidString.empty,\n * )\n *\n * @category Foldable\n * @since 2.0.0\n */\nvar foldMap = function (M) {\n  return function (f) {\n    return function (fa) {\n      return exports.isLeft(fa) ? M.empty : f(fa.right);\n    };\n  };\n};\nexports.foldMap = foldMap;\n/**\n * Right-associative fold of a structure.\n *\n * @example\n * import { pipe } from 'fp-ts/function'\n * import * as E from 'fp-ts/Either'\n *\n * const startWith = 'postfix'\n * const concat = (a: string, b: string) => `${a}:${b}`\n *\n * assert.deepStrictEqual(\n *   pipe(E.right('a'), E.reduceRight(startWith, concat)),\n *   'a:postfix',\n * )\n *\n * assert.deepStrictEqual(\n *   pipe(E.left('e'), E.reduceRight(startWith, concat)),\n *   'postfix',\n * )\n *\n * @category Foldable\n * @since 2.0.0\n */\nvar reduceRight = function (b, f) {\n  return function (fa) {\n    return exports.isLeft(fa) ? b : f(fa.right, b);\n  };\n};\nexports.reduceRight = reduceRight;\n/**\n * Map each element of a structure to an action, evaluate these actions from left to right, and collect the results.\n *\n * @example\n * import { pipe } from 'fp-ts/function'\n * import * as A from 'fp-ts/Array'\n * import * as E from 'fp-ts/Either'\n * import * as O from 'fp-ts/Option'\n *\n * assert.deepStrictEqual(\n *   pipe(E.right(['a']), E.traverse(O.option)(A.head)),\n *   O.some(E.right('a')),\n *  )\n *\n * assert.deepStrictEqual(\n *   pipe(E.right([]), E.traverse(O.option)(A.head)),\n *   O.none,\n * )\n *\n * @category Traversable\n * @since 2.6.3\n */\nvar traverse = function (F) {\n  return function (f) {\n    return function (ta) {\n      return exports.isLeft(ta) ? F.of(exports.left(ta.left)) : F.map(f(ta.right), exports.right);\n    };\n  };\n};\nexports.traverse = traverse;\n/**\n * Evaluate each monadic action in the structure from left to right, and collect the results.\n *\n * @example\n * import { pipe } from 'fp-ts/function'\n * import * as E from 'fp-ts/Either'\n * import * as O from 'fp-ts/Option'\n *\n * assert.deepStrictEqual(\n *   pipe(E.right(O.some('a')), E.sequence(O.option)),\n *   O.some(E.right('a')),\n *  )\n *\n * assert.deepStrictEqual(\n *   pipe(E.right(O.none), E.sequence(O.option)),\n *   O.none\n * )\n *\n * @category Traversable\n * @since 2.6.3\n */\nvar sequence = function (F) {\n  return function (ma) {\n    return exports.isLeft(ma) ? F.of(exports.left(ma.left)) : F.map(ma.right, exports.right);\n  };\n};\nexports.sequence = sequence;\n/**\n * @category MonadThrow\n * @since 2.6.3\n */\nexports.throwError = exports.left;\n// -------------------------------------------------------------------------------------\n// instances\n// -------------------------------------------------------------------------------------\n/**\n * @category instances\n * @since 2.0.0\n */\nexports.URI = 'Either';\n/**\n * @category instances\n * @since 2.0.0\n */\nfunction getShow(SE, SA) {\n  return {\n    show: function (ma) {\n      return exports.isLeft(ma) ? \"left(\" + SE.show(ma.left) + \")\" : \"right(\" + SA.show(ma.right) + \")\";\n    }\n  };\n}\nexports.getShow = getShow;\n/**\n * @category instances\n * @since 2.0.0\n */\nfunction getEq(EL, EA) {\n  return {\n    equals: function (x, y) {\n      return x === y || (exports.isLeft(x) ? exports.isLeft(y) && EL.equals(x.left, y.left) : exports.isRight(y) && EA.equals(x.right, y.right));\n    }\n  };\n}\nexports.getEq = getEq;\n/**\n * Semigroup returning the left-most non-`Left` value. If both operands are `Right`s then the inner values are\n * concatenated using the provided `Semigroup`\n *\n * @example\n * import { getSemigroup, left, right } from 'fp-ts/Either'\n * import { semigroupSum } from 'fp-ts/Semigroup'\n *\n * const S = getSemigroup<string, number>(semigroupSum)\n * assert.deepStrictEqual(S.concat(left('a'), left('b')), left('a'))\n * assert.deepStrictEqual(S.concat(left('a'), right(2)), right(2))\n * assert.deepStrictEqual(S.concat(right(1), left('b')), right(1))\n * assert.deepStrictEqual(S.concat(right(1), right(2)), right(3))\n *\n * @category instances\n * @since 2.0.0\n */\nfunction getSemigroup(S) {\n  return {\n    concat: function (x, y) {\n      return exports.isLeft(y) ? x : exports.isLeft(x) ? y : exports.right(S.concat(x.right, y.right));\n    }\n  };\n}\nexports.getSemigroup = getSemigroup;\n/**\n * Semigroup returning the left-most `Left` value. If both operands are `Right`s then the inner values\n * are concatenated using the provided `Semigroup`\n *\n * @example\n * import { getApplySemigroup, left, right } from 'fp-ts/Either'\n * import { semigroupSum } from 'fp-ts/Semigroup'\n *\n * const S = getApplySemigroup<string, number>(semigroupSum)\n * assert.deepStrictEqual(S.concat(left('a'), left('b')), left('a'))\n * assert.deepStrictEqual(S.concat(left('a'), right(2)), left('a'))\n * assert.deepStrictEqual(S.concat(right(1), left('b')), left('b'))\n * assert.deepStrictEqual(S.concat(right(1), right(2)), right(3))\n *\n * @category instances\n * @since 2.0.0\n */\nfunction getApplySemigroup(S) {\n  return {\n    concat: function (x, y) {\n      return exports.isLeft(x) ? x : exports.isLeft(y) ? y : exports.right(S.concat(x.right, y.right));\n    }\n  };\n}\nexports.getApplySemigroup = getApplySemigroup;\n/**\n * @category instances\n * @since 2.0.0\n */\nfunction getApplyMonoid(M) {\n  return {\n    concat: getApplySemigroup(M).concat,\n    empty: exports.right(M.empty)\n  };\n}\nexports.getApplyMonoid = getApplyMonoid;\n/**\n * Builds a `Filterable` instance for `Either` given `Monoid` for the left side\n *\n * @category instances\n * @since 3.0.0\n */\nfunction getFilterable(M) {\n  var empty = exports.left(M.empty);\n  var compact = function (ma) {\n    return exports.isLeft(ma) ? ma : ma.right._tag === 'None' ? empty : exports.right(ma.right.value);\n  };\n  var separate = function (ma) {\n    return exports.isLeft(ma) ? {\n      left: ma,\n      right: ma\n    } : exports.isLeft(ma.right) ? {\n      left: exports.right(ma.right.left),\n      right: empty\n    } : {\n      left: empty,\n      right: exports.right(ma.right.right)\n    };\n  };\n  var partitionMap = function (ma, f) {\n    if (exports.isLeft(ma)) {\n      return {\n        left: ma,\n        right: ma\n      };\n    }\n    var e = f(ma.right);\n    return exports.isLeft(e) ? {\n      left: exports.right(e.left),\n      right: empty\n    } : {\n      left: empty,\n      right: exports.right(e.right)\n    };\n  };\n  var partition = function (ma, p) {\n    return exports.isLeft(ma) ? {\n      left: ma,\n      right: ma\n    } : p(ma.right) ? {\n      left: empty,\n      right: exports.right(ma.right)\n    } : {\n      left: exports.right(ma.right),\n      right: empty\n    };\n  };\n  var filterMap = function (ma, f) {\n    if (exports.isLeft(ma)) {\n      return ma;\n    }\n    var ob = f(ma.right);\n    return ob._tag === 'None' ? empty : exports.right(ob.value);\n  };\n  var filter = function (ma, predicate) {\n    return exports.isLeft(ma) ? ma : predicate(ma.right) ? ma : empty;\n  };\n  return {\n    URI: exports.URI,\n    _E: undefined,\n    map: map_,\n    compact: compact,\n    separate: separate,\n    filter: filter,\n    filterMap: filterMap,\n    partition: partition,\n    partitionMap: partitionMap\n  };\n}\nexports.getFilterable = getFilterable;\n/**\n * Builds `Witherable` instance for `Either` given `Monoid` for the left side\n *\n * @category instances\n * @since 2.0.0\n */\nfunction getWitherable(M) {\n  var F_ = getFilterable(M);\n  var wither = function (F) {\n    var traverseF = traverse_(F);\n    return function (ma, f) {\n      return F.map(traverseF(ma, f), F_.compact);\n    };\n  };\n  var wilt = function (F) {\n    var traverseF = traverse_(F);\n    return function (ma, f) {\n      return F.map(traverseF(ma, f), F_.separate);\n    };\n  };\n  return {\n    URI: exports.URI,\n    _E: undefined,\n    map: map_,\n    compact: F_.compact,\n    separate: F_.separate,\n    filter: F_.filter,\n    filterMap: F_.filterMap,\n    partition: F_.partition,\n    partitionMap: F_.partitionMap,\n    traverse: traverse_,\n    sequence: exports.sequence,\n    reduce: reduce_,\n    foldMap: foldMap_,\n    reduceRight: reduceRight_,\n    wither: wither,\n    wilt: wilt\n  };\n}\nexports.getWitherable = getWitherable;\n/**\n * @category instances\n * @since 2.7.0\n */\nfunction getApplicativeValidation(SE) {\n  return {\n    URI: exports.URI,\n    _E: undefined,\n    map: map_,\n    ap: function (fab, fa) {\n      return exports.isLeft(fab) ? exports.isLeft(fa) ? exports.left(SE.concat(fab.left, fa.left)) : fab : exports.isLeft(fa) ? fa : exports.right(fab.right(fa.right));\n    },\n    of: exports.of\n  };\n}\nexports.getApplicativeValidation = getApplicativeValidation;\n/**\n * @category instances\n * @since 2.7.0\n */\nfunction getAltValidation(SE) {\n  return {\n    URI: exports.URI,\n    _E: undefined,\n    map: map_,\n    alt: function (me, that) {\n      if (exports.isRight(me)) {\n        return me;\n      }\n      var ea = that();\n      return exports.isLeft(ea) ? exports.left(SE.concat(me.left, ea.left)) : ea;\n    }\n  };\n}\nexports.getAltValidation = getAltValidation;\n// TODO: remove in v3\n/**\n * @category instances\n * @since 2.0.0\n */\nfunction getValidation(SE) {\n  var applicativeValidation = getApplicativeValidation(SE);\n  var altValidation = getAltValidation(SE);\n  return {\n    URI: exports.URI,\n    _E: undefined,\n    map: map_,\n    of: exports.of,\n    chain: chain_,\n    bimap: bimap_,\n    mapLeft: mapLeft_,\n    reduce: reduce_,\n    foldMap: foldMap_,\n    reduceRight: reduceRight_,\n    extend: extend_,\n    traverse: traverse_,\n    sequence: exports.sequence,\n    chainRec: chainRec_,\n    throwError: exports.throwError,\n    ap: applicativeValidation.ap,\n    alt: altValidation.alt\n  };\n}\nexports.getValidation = getValidation;\n/**\n * @category instances\n * @since 2.0.0\n */\nfunction getValidationSemigroup(SE, SA) {\n  return {\n    concat: function (x, y) {\n      return exports.isLeft(x) ? exports.isLeft(y) ? exports.left(SE.concat(x.left, y.left)) : x : exports.isLeft(y) ? y : exports.right(SA.concat(x.right, y.right));\n    }\n  };\n}\nexports.getValidationSemigroup = getValidationSemigroup;\n/**\n * @category instances\n * @since 2.7.0\n */\nexports.Functor = {\n  URI: exports.URI,\n  map: map_\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexports.Applicative = {\n  URI: exports.URI,\n  map: map_,\n  ap: ap_,\n  of: exports.of\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexports.Monad = {\n  URI: exports.URI,\n  map: map_,\n  ap: ap_,\n  of: exports.of,\n  chain: chain_\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexports.Foldable = {\n  URI: exports.URI,\n  reduce: reduce_,\n  foldMap: foldMap_,\n  reduceRight: reduceRight_\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexports.Traversable = {\n  URI: exports.URI,\n  map: map_,\n  reduce: reduce_,\n  foldMap: foldMap_,\n  reduceRight: reduceRight_,\n  traverse: traverse_,\n  sequence: exports.sequence\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexports.Bifunctor = {\n  URI: exports.URI,\n  bimap: bimap_,\n  mapLeft: mapLeft_\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexports.Alt = {\n  URI: exports.URI,\n  map: map_,\n  alt: alt_\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexports.Extend = {\n  URI: exports.URI,\n  map: map_,\n  extend: extend_\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexports.ChainRec = {\n  URI: exports.URI,\n  map: map_,\n  ap: ap_,\n  chain: chain_,\n  chainRec: chainRec_\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexports.MonadThrow = {\n  URI: exports.URI,\n  map: map_,\n  ap: ap_,\n  of: exports.of,\n  chain: chain_,\n  throwError: exports.throwError\n};\n/**\n * @category instances\n * @since 2.0.0\n */\nfunction getValidationMonoid(SE, SA) {\n  return {\n    concat: getValidationSemigroup(SE, SA).concat,\n    empty: exports.right(SA.empty)\n  };\n}\nexports.getValidationMonoid = getValidationMonoid;\n/**\n * @category instances\n * @since 2.0.0\n */\nexports.either = {\n  URI: exports.URI,\n  map: map_,\n  of: exports.of,\n  ap: ap_,\n  chain: chain_,\n  reduce: reduce_,\n  foldMap: foldMap_,\n  reduceRight: reduceRight_,\n  traverse: traverse_,\n  sequence: exports.sequence,\n  bimap: bimap_,\n  mapLeft: mapLeft_,\n  alt: alt_,\n  extend: extend_,\n  chainRec: chainRec_,\n  throwError: exports.throwError\n};\n// -------------------------------------------------------------------------------------\n// utils\n// -------------------------------------------------------------------------------------\n/**\n * Default value for the `onError` argument of `tryCatch`\n *\n * @since 2.0.0\n */\nfunction toError(e) {\n  return e instanceof Error ? e : new Error(String(e));\n}\nexports.toError = toError;\n/**\n * @since 2.0.0\n */\nfunction elem(E) {\n  return function (a, ma) {\n    return exports.isLeft(ma) ? false : E.equals(a, ma.right);\n  };\n}\nexports.elem = elem;\n/**\n * Returns `false` if `Left` or returns the result of the application of the given predicate to the `Right` value.\n *\n * @example\n * import { exists, left, right } from 'fp-ts/Either'\n *\n * const gt2 = exists((n: number) => n > 2)\n *\n * assert.strictEqual(gt2(left('a')), false)\n * assert.strictEqual(gt2(right(1)), false)\n * assert.strictEqual(gt2(right(3)), true)\n *\n * @since 2.0.0\n */\nfunction exists(predicate) {\n  return function (ma) {\n    return exports.isLeft(ma) ? false : predicate(ma.right);\n  };\n}\nexports.exists = exists;\n// -------------------------------------------------------------------------------------\n// do notation\n// -------------------------------------------------------------------------------------\n/**\n * @since 2.9.0\n */\nexports.Do = /*#__PURE__*/\nexports.of({});\n/**\n * @since 2.8.0\n */\nvar bindTo = function (name) {\n  return exports.map(function_1.bindTo_(name));\n};\nexports.bindTo = bindTo;\n/**\n * @since 2.8.0\n */\nvar bindW = function (name, f) {\n  return exports.chainW(function (a) {\n    return function_1.pipe(f(a), exports.map(function (b) {\n      return function_1.bind_(a, name, b);\n    }));\n  });\n};\nexports.bindW = bindW;\n/**\n * @since 2.8.0\n */\nexports.bind = exports.bindW;\n// -------------------------------------------------------------------------------------\n// pipeable sequence S\n// -------------------------------------------------------------------------------------\n/**\n * @since 2.8.0\n */\nvar apSW = function (name, fb) {\n  return function_1.flow(exports.map(function (a) {\n    return function (b) {\n      return function_1.bind_(a, name, b);\n    };\n  }), exports.apW(fb));\n};\nexports.apSW = apSW;\n/**\n * @since 2.8.0\n */\nexports.apS = exports.apSW;\n// -------------------------------------------------------------------------------------\n// array utils\n// -------------------------------------------------------------------------------------\n/**\n *\n * @since 2.9.0\n */\nvar traverseArrayWithIndex = function (f) {\n  return function (arr) {\n    // tslint:disable-next-line: readonly-array\n    var result = [];\n    for (var i = 0; i < arr.length; i++) {\n      var e = f(i, arr[i]);\n      if (e._tag === 'Left') {\n        return e;\n      }\n      result.push(e.right);\n    }\n    return exports.right(result);\n  };\n};\nexports.traverseArrayWithIndex = traverseArrayWithIndex;\n/**\n * map an array using provided function to Either then transform to Either of the array\n * this function have the same behavior of `A.traverse(E.either)` but it's optimized and perform better\n *\n * @example\n *\n *\n * import { traverseArray, left, right, fromPredicate } from 'fp-ts/Either'\n * import { pipe } from 'fp-ts/function'\n * import * as A from 'fp-ts/Array'\n *\n * const arr = A.range(0, 10)\n * assert.deepStrictEqual(\n *   pipe(\n *     arr,\n *     traverseArray((x) => right(x))\n *   ),\n *   right(arr)\n * )\n * assert.deepStrictEqual(\n *   pipe(\n *     arr,\n *     traverseArray(\n *       fromPredicate(\n *         (x) => x > 5,\n *         () => 'a'\n *       )\n *     )\n *   ),\n *   left('a')\n * )\n * @since 2.9.0\n */\nvar traverseArray = function (f) {\n  return exports.traverseArrayWithIndex(function (_, a) {\n    return f(a);\n  });\n};\nexports.traverseArray = traverseArray;\n/**\n * convert an array of either to an either of array\n * this function have the same behavior of `A.sequence(E.either)` but it's optimized and perform better\n *\n * @example\n *\n * import { sequenceArray, left, right } from 'fp-ts/Either'\n * import { pipe } from 'fp-ts/function'\n * import * as A from 'fp-ts/Array'\n *\n * const arr = A.range(0, 10)\n * assert.deepStrictEqual(pipe(arr, A.map(right), sequenceArray), right(arr))\n * assert.deepStrictEqual(pipe(arr, A.map(right), A.cons(left('Error')), sequenceArray), left('Error'))\n *\n * @since 2.9.0\n */\nexports.sequenceArray = /*#__PURE__*/\nexports.traverseArray(function_1.identity);","map":{"version":3,"names":["Object","defineProperty","exports","value","getWitherable","getFilterable","getApplyMonoid","getApplySemigroup","getSemigroup","getEq","getShow","URI","throwError","sequence","traverse","reduceRight","foldMap","reduce","duplicate","extend","alt","altW","flatten","chainFirst","chainFirstW","chain","chainW","of","apSecond","apFirst","ap","apW","mapLeft","bimap","map","filterOrElse","filterOrElseW","orElse","swap","chainNullableK","fromNullableK","getOrElse","getOrElseW","fold","fromPredicate","fromOption","stringifyJSON","parseJSON","tryCatch","fromNullable","right","left","isRight","isLeft","sequenceArray","traverseArray","traverseArrayWithIndex","apS","apSW","bind","bindW","bindTo","Do","exists","elem","toError","either","getValidationMonoid","MonadThrow","ChainRec","Extend","Alt","Bifunctor","Traversable","Foldable","Monad","Applicative","Functor","getValidationSemigroup","getValidation","getAltValidation","getApplicativeValidation","ChainRec_1","require","function_1","ma","_tag","e","a","f","onError","s","JSON","parse","u","stringify","onNone","predicate","onFalse","onLeft","onRight","from","_i","arguments","length","apply","map_","fa","pipe","ap_","fab","chain_","reduce_","b","foldMap_","M","foldMapM","reduceRight_","traverse_","F","traverseF","ta","bimap_","g","mapLeft_","alt_","that","extend_","wa","chainRec_","tailRec","fb","flow","identity","empty","SE","SA","show","EL","EA","equals","x","y","S","concat","compact","separate","partitionMap","partition","p","filterMap","ob","filter","_E","undefined","F_","wither","wilt","me","ea","applicativeValidation","altValidation","chainRec","Error","String","E","name","bindTo_","bind_","arr","result","i","push","_"],"sources":["/Users/arthurfrancis/Documents/repo/imx-reactjs-integration-example/node_modules/fp-ts/lib/Either.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getWitherable = exports.getFilterable = exports.getApplyMonoid = exports.getApplySemigroup = exports.getSemigroup = exports.getEq = exports.getShow = exports.URI = exports.throwError = exports.sequence = exports.traverse = exports.reduceRight = exports.foldMap = exports.reduce = exports.duplicate = exports.extend = exports.alt = exports.altW = exports.flatten = exports.chainFirst = exports.chainFirstW = exports.chain = exports.chainW = exports.of = exports.apSecond = exports.apFirst = exports.ap = exports.apW = exports.mapLeft = exports.bimap = exports.map = exports.filterOrElse = exports.filterOrElseW = exports.orElse = exports.swap = exports.chainNullableK = exports.fromNullableK = exports.getOrElse = exports.getOrElseW = exports.fold = exports.fromPredicate = exports.fromOption = exports.stringifyJSON = exports.parseJSON = exports.tryCatch = exports.fromNullable = exports.right = exports.left = exports.isRight = exports.isLeft = void 0;\nexports.sequenceArray = exports.traverseArray = exports.traverseArrayWithIndex = exports.apS = exports.apSW = exports.bind = exports.bindW = exports.bindTo = exports.Do = exports.exists = exports.elem = exports.toError = exports.either = exports.getValidationMonoid = exports.MonadThrow = exports.ChainRec = exports.Extend = exports.Alt = exports.Bifunctor = exports.Traversable = exports.Foldable = exports.Monad = exports.Applicative = exports.Functor = exports.getValidationSemigroup = exports.getValidation = exports.getAltValidation = exports.getApplicativeValidation = void 0;\nvar ChainRec_1 = require(\"./ChainRec\");\nvar function_1 = require(\"./function\");\n// -------------------------------------------------------------------------------------\n// guards\n// -------------------------------------------------------------------------------------\n/**\n * Returns `true` if the either is an instance of `Left`, `false` otherwise.\n *\n * @category guards\n * @since 2.0.0\n */\nvar isLeft = function (ma) { return ma._tag === 'Left'; };\nexports.isLeft = isLeft;\n/**\n * Returns `true` if the either is an instance of `Right`, `false` otherwise.\n *\n * @category guards\n * @since 2.0.0\n */\nvar isRight = function (ma) { return ma._tag === 'Right'; };\nexports.isRight = isRight;\n// -------------------------------------------------------------------------------------\n// constructors\n// -------------------------------------------------------------------------------------\n/**\n * Constructs a new `Either` holding a `Left` value. This usually represents a failure, due to the right-bias of this\n * structure.\n *\n * @category constructors\n * @since 2.0.0\n */\nvar left = function (e) { return ({ _tag: 'Left', left: e }); };\nexports.left = left;\n/**\n * Constructs a new `Either` holding a `Right` value. This usually represents a successful value due to the right bias\n * of this structure.\n *\n * @category constructors\n * @since 2.0.0\n */\nvar right = function (a) { return ({ _tag: 'Right', right: a }); };\nexports.right = right;\n// TODO: make lazy in v3\n/**\n * Takes a default and a nullable value, if the value is not nully, turn it into a `Right`, if the value is nully use\n * the provided default as a `Left`.\n *\n * @example\n * import { fromNullable, left, right } from 'fp-ts/Either'\n *\n * const parse = fromNullable('nully')\n *\n * assert.deepStrictEqual(parse(1), right(1))\n * assert.deepStrictEqual(parse(null), left('nully'))\n *\n * @category constructors\n * @since 2.0.0\n */\nfunction fromNullable(e) {\n    return function (a) { return (a == null ? exports.left(e) : exports.right(a)); };\n}\nexports.fromNullable = fromNullable;\n// TODO: `onError => Lazy<A> => Either` in v3\n/**\n * Constructs a new `Either` from a function that might throw.\n *\n * @example\n * import { Either, left, right, tryCatch } from 'fp-ts/Either'\n *\n * const unsafeHead = <A>(as: Array<A>): A => {\n *   if (as.length > 0) {\n *     return as[0]\n *   } else {\n *     throw new Error('empty array')\n *   }\n * }\n *\n * const head = <A>(as: Array<A>): Either<Error, A> => {\n *   return tryCatch(() => unsafeHead(as), e => (e instanceof Error ? e : new Error('unknown error')))\n * }\n *\n * assert.deepStrictEqual(head([]), left(new Error('empty array')))\n * assert.deepStrictEqual(head([1, 2, 3]), right(1))\n *\n * @category constructors\n * @since 2.0.0\n */\nfunction tryCatch(f, onError) {\n    try {\n        return exports.right(f());\n    }\n    catch (e) {\n        return exports.left(onError(e));\n    }\n}\nexports.tryCatch = tryCatch;\n// TODO curry in v3\n/**\n * Converts a JavaScript Object Notation (JSON) string into an object.\n *\n * @example\n * import { parseJSON, toError, right, left } from 'fp-ts/Either'\n *\n * assert.deepStrictEqual(parseJSON('{\"a\":1}', toError), right({ a: 1 }))\n * assert.deepStrictEqual(parseJSON('{\"a\":}', toError), left(new SyntaxError('Unexpected token } in JSON at position 5')))\n *\n * @category constructors\n * @since 2.0.0\n */\nfunction parseJSON(s, onError) {\n    return tryCatch(function () { return JSON.parse(s); }, onError);\n}\nexports.parseJSON = parseJSON;\n// TODO curry in v3\n/**\n * Converts a JavaScript value to a JavaScript Object Notation (JSON) string.\n *\n * @example\n * import * as E from 'fp-ts/Either'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(E.stringifyJSON({ a: 1 }, E.toError), E.right('{\"a\":1}'))\n * const circular: any = { ref: null }\n * circular.ref = circular\n * assert.deepStrictEqual(\n *   pipe(\n *     E.stringifyJSON(circular, E.toError),\n *     E.mapLeft(e => e.message.includes('Converting circular structure to JSON'))\n *   ),\n *   E.left(true)\n * )\n *\n * @category constructors\n * @since 2.0.0\n */\nfunction stringifyJSON(u, onError) {\n    return tryCatch(function () { return JSON.stringify(u); }, onError);\n}\nexports.stringifyJSON = stringifyJSON;\n/**\n * Derivable from `MonadThrow`.\n *\n * @example\n * import { fromOption, left, right } from 'fp-ts/Either'\n * import { pipe } from 'fp-ts/function'\n * import { none, some } from 'fp-ts/Option'\n *\n * assert.deepStrictEqual(\n *   pipe(\n *     some(1),\n *     fromOption(() => 'error')\n *   ),\n *   right(1)\n * )\n * assert.deepStrictEqual(\n *   pipe(\n *     none,\n *     fromOption(() => 'error')\n *   ),\n *   left('error')\n * )\n *\n * @category constructors\n * @since 2.0.0\n */\nvar fromOption = function (onNone) { return function (ma) {\n    return ma._tag === 'None' ? exports.left(onNone()) : exports.right(ma.value);\n}; };\nexports.fromOption = fromOption;\n/**\n * Derivable from `MonadThrow`.\n *\n * @example\n * import { fromPredicate, left, right } from 'fp-ts/Either'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(\n *   pipe(\n *     1,\n *     fromPredicate(\n *       (n) => n > 0,\n *       () => 'error'\n *     )\n *   ),\n *   right(1)\n * )\n * assert.deepStrictEqual(\n *   pipe(\n *     -1,\n *     fromPredicate(\n *       (n) => n > 0,\n *       () => 'error'\n *     )\n *   ),\n *   left('error')\n * )\n *\n * @category constructors\n * @since 2.0.0\n */\nvar fromPredicate = function (predicate, onFalse) { return function (a) { return (predicate(a) ? exports.right(a) : exports.left(onFalse(a))); }; };\nexports.fromPredicate = fromPredicate;\n// -------------------------------------------------------------------------------------\n// destructors\n// -------------------------------------------------------------------------------------\n/**\n * Takes two functions and an `Either` value, if the value is a `Left` the inner value is applied to the first function,\n * if the value is a `Right` the inner value is applied to the second function.\n *\n * @example\n * import { fold, left, right } from 'fp-ts/Either'\n * import { pipe } from 'fp-ts/function'\n *\n * function onLeft(errors: Array<string>): string {\n *   return `Errors: ${errors.join(', ')}`\n * }\n *\n * function onRight(value: number): string {\n *   return `Ok: ${value}`\n * }\n *\n * assert.strictEqual(\n *   pipe(\n *     right(1),\n *     fold(onLeft, onRight)\n *   ),\n *   'Ok: 1'\n * )\n * assert.strictEqual(\n *   pipe(\n *     left(['error 1', 'error 2']),\n *     fold(onLeft, onRight)\n *   ),\n *   'Errors: error 1, error 2'\n * )\n *\n * @category destructors\n * @since 2.0.0\n */\nfunction fold(onLeft, onRight) {\n    return function (ma) { return (exports.isLeft(ma) ? onLeft(ma.left) : onRight(ma.right)); };\n}\nexports.fold = fold;\n/**\n * Less strict version of [`getOrElse`](#getOrElse).\n *\n * @category destructors\n * @since 2.6.0\n */\nvar getOrElseW = function (onLeft) { return function (ma) {\n    return exports.isLeft(ma) ? onLeft(ma.left) : ma.right;\n}; };\nexports.getOrElseW = getOrElseW;\n/**\n * Returns the wrapped value if it's a `Right` or a default value if is a `Left`.\n *\n * @example\n * import { getOrElse, left, right } from 'fp-ts/Either'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(\n *   pipe(\n *     right(1),\n *     getOrElse(() => 0)\n *   ),\n *   1\n * )\n * assert.deepStrictEqual(\n *   pipe(\n *     left('error'),\n *     getOrElse(() => 0)\n *   ),\n *   0\n * )\n *\n * @category destructors\n * @since 2.0.0\n */\nexports.getOrElse = exports.getOrElseW;\n// -------------------------------------------------------------------------------------\n// combinators\n// -------------------------------------------------------------------------------------\n/**\n * @category combinators\n * @since 2.9.0\n */\nfunction fromNullableK(e) {\n    var from = fromNullable(e);\n    return function (f) { return function () {\n        var a = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            a[_i] = arguments[_i];\n        }\n        return from(f.apply(void 0, a));\n    }; };\n}\nexports.fromNullableK = fromNullableK;\n/**\n * @category combinators\n * @since 2.9.0\n */\nfunction chainNullableK(e) {\n    var from = fromNullableK(e);\n    return function (f) { return exports.chain(from(f)); };\n}\nexports.chainNullableK = chainNullableK;\n/**\n * Returns a `Right` if is a `Left` (and vice versa).\n *\n * @category combinators\n * @since 2.0.0\n */\nfunction swap(ma) {\n    return exports.isLeft(ma) ? exports.right(ma.left) : exports.left(ma.right);\n}\nexports.swap = swap;\n/**\n * Useful for recovering from errors.\n *\n * @category combinators\n * @since 2.0.0\n */\nfunction orElse(onLeft) {\n    return function (ma) { return (exports.isLeft(ma) ? onLeft(ma.left) : ma); };\n}\nexports.orElse = orElse;\n/**\n * Less strict version of [`filterOrElse`](#filterOrElse).\n *\n * @since 2.9.0\n */\nvar filterOrElseW = function (predicate, onFalse) {\n    return exports.chainW(function (a) { return (predicate(a) ? exports.right(a) : exports.left(onFalse(a))); });\n};\nexports.filterOrElseW = filterOrElseW;\n/**\n * Derivable from `MonadThrow`.\n *\n * @example\n * import { filterOrElse, left, right } from 'fp-ts/Either'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(\n *   pipe(\n *     right(1),\n *     filterOrElse(\n *       (n) => n > 0,\n *       () => 'error'\n *     )\n *   ),\n *   right(1)\n * )\n * assert.deepStrictEqual(\n *   pipe(\n *     right(-1),\n *     filterOrElse(\n *       (n) => n > 0,\n *       () => 'error'\n *     )\n *   ),\n *   left('error')\n * )\n * assert.deepStrictEqual(\n *   pipe(\n *     left('a'),\n *     filterOrElse(\n *       (n) => n > 0,\n *       () => 'error'\n *     )\n *   ),\n *   left('a')\n * )\n *\n * @category combinators\n * @since 2.0.0\n */\nexports.filterOrElse = exports.filterOrElseW;\n// -------------------------------------------------------------------------------------\n// non-pipeables\n// -------------------------------------------------------------------------------------\nvar map_ = function (fa, f) { return function_1.pipe(fa, exports.map(f)); };\nvar ap_ = function (fab, fa) { return function_1.pipe(fab, exports.ap(fa)); };\n/* istanbul ignore next */\nvar chain_ = function (ma, f) { return function_1.pipe(ma, exports.chain(f)); };\n/* istanbul ignore next */\nvar reduce_ = function (fa, b, f) { return function_1.pipe(fa, exports.reduce(b, f)); };\n/* istanbul ignore next */\nvar foldMap_ = function (M) { return function (fa, f) {\n    var foldMapM = exports.foldMap(M);\n    return function_1.pipe(fa, foldMapM(f));\n}; };\n/* istanbul ignore next */\nvar reduceRight_ = function (fa, b, f) { return function_1.pipe(fa, exports.reduceRight(b, f)); };\nvar traverse_ = function (F) {\n    var traverseF = exports.traverse(F);\n    return function (ta, f) { return function_1.pipe(ta, traverseF(f)); };\n};\nvar bimap_ = function (fa, f, g) { return function_1.pipe(fa, exports.bimap(f, g)); };\nvar mapLeft_ = function (fa, f) { return function_1.pipe(fa, exports.mapLeft(f)); };\n/* istanbul ignore next */\nvar alt_ = function (fa, that) { return function_1.pipe(fa, exports.alt(that)); };\n/* istanbul ignore next */\nvar extend_ = function (wa, f) { return function_1.pipe(wa, exports.extend(f)); };\nvar chainRec_ = function (a, f) {\n    return ChainRec_1.tailRec(f(a), function (e) {\n        return exports.isLeft(e) ? exports.right(exports.left(e.left)) : exports.isLeft(e.right) ? exports.left(f(e.right.left)) : exports.right(exports.right(e.right.right));\n    });\n};\n// -------------------------------------------------------------------------------------\n// pipeables\n// -------------------------------------------------------------------------------------\n/**\n * `map` can be used to turn functions `(a: A) => B` into functions `(fa: F<A>) => F<B>` whose argument and return types\n * use the type constructor `F` to represent some computational context.\n *\n * @category Functor\n * @since 2.0.0\n */\nvar map = function (f) { return function (fa) {\n    return exports.isLeft(fa) ? fa : exports.right(f(fa.right));\n}; };\nexports.map = map;\n/**\n * Map a pair of functions over the two type arguments of the bifunctor.\n *\n * @category Bifunctor\n * @since 2.0.0\n */\nvar bimap = function (f, g) { return function (fa) { return (exports.isLeft(fa) ? exports.left(f(fa.left)) : exports.right(g(fa.right))); }; };\nexports.bimap = bimap;\n/**\n * Map a function over the first type argument of a bifunctor.\n *\n * @category Bifunctor\n * @since 2.0.0\n */\nvar mapLeft = function (f) { return function (fa) {\n    return exports.isLeft(fa) ? exports.left(f(fa.left)) : fa;\n}; };\nexports.mapLeft = mapLeft;\n/**\n * Less strict version of [`ap`](#ap).\n *\n * @category Apply\n * @since 2.8.0\n */\nvar apW = function (fa) { return function (fab) {\n    return exports.isLeft(fab) ? fab : exports.isLeft(fa) ? fa : exports.right(fab.right(fa.right));\n}; };\nexports.apW = apW;\n/**\n * Apply a function to an argument under a type constructor.\n *\n * @category Apply\n * @since 2.0.0\n */\nexports.ap = exports.apW;\n/**\n * Combine two effectful actions, keeping only the result of the first.\n *\n * Derivable from `Apply`.\n *\n * @category combinators\n * @since 2.0.0\n */\nvar apFirst = function (fb) {\n    return function_1.flow(exports.map(function (a) { return function () { return a; }; }), exports.ap(fb));\n};\nexports.apFirst = apFirst;\n/**\n * Combine two effectful actions, keeping only the result of the second.\n *\n * Derivable from `Apply`.\n *\n * @category combinators\n * @since 2.0.0\n */\nvar apSecond = function (fb) {\n    return function_1.flow(exports.map(function () { return function (b) { return b; }; }), exports.ap(fb));\n};\nexports.apSecond = apSecond;\n/**\n * Wrap a value into the type constructor.\n *\n * Equivalent to [`right`](#right).\n *\n * @example\n * import * as E from 'fp-ts/Either'\n *\n * assert.deepStrictEqual(E.of('a'), E.right('a'))\n *\n * @category Applicative\n * @since 2.7.0\n */\nexports.of = exports.right;\n/**\n * Less strict version of [`chain`](#chain).\n *\n * @category Monad\n * @since 2.6.0\n */\nvar chainW = function (f) { return function (ma) {\n    return exports.isLeft(ma) ? ma : f(ma.right);\n}; };\nexports.chainW = chainW;\n/**\n * Composes computations in sequence, using the return value of one computation to determine the next computation.\n *\n * @category Monad\n * @since 2.0.0\n */\nexports.chain = exports.chainW;\n/**\n * Less strict version of [`chainFirst`](#chainFirst)\n *\n * Derivable from `Monad`.\n *\n * @category combinators\n * @since 2.8.0\n */\nvar chainFirstW = function (f) { return function (ma) {\n    return function_1.pipe(ma, exports.chainW(function (a) {\n        return function_1.pipe(f(a), exports.map(function () { return a; }));\n    }));\n}; };\nexports.chainFirstW = chainFirstW;\n/**\n * Composes computations in sequence, using the return value of one computation to determine the next computation and\n * keeping only the result of the first.\n *\n * Derivable from `Monad`.\n *\n * @category combinators\n * @since 2.0.0\n */\nexports.chainFirst = exports.chainFirstW;\n/**\n * The `flatten` function is the conventional monad join operator. It is used to remove one level of monadic structure, projecting its bound argument into the outer level.\n *\n * Derivable from `Monad`.\n *\n * @example\n * import * as E from 'fp-ts/Either'\n *\n * assert.deepStrictEqual(E.flatten(E.right(E.right('a'))), E.right('a'))\n * assert.deepStrictEqual(E.flatten(E.right(E.left('e'))), E.left('e'))\n * assert.deepStrictEqual(E.flatten(E.left('e')), E.left('e'))\n *\n * @category combinators\n * @since 2.0.0\n */\nexports.flatten = \n/*#__PURE__*/\nexports.chain(function_1.identity);\n/**\n * Less strict version of [`alt`](#alt).\n *\n * @category Alt\n * @since 2.9.0\n */\nvar altW = function (that) { return function (fa) { return (exports.isLeft(fa) ? that() : fa); }; };\nexports.altW = altW;\n/**\n * Identifies an associative operation on a type constructor. It is similar to `Semigroup`, except that it applies to\n * types of kind `* -> *`.\n *\n * @category Alt\n * @since 2.0.0\n */\nexports.alt = exports.altW;\n/**\n * @category Extend\n * @since 2.0.0\n */\nvar extend = function (f) { return function (wa) {\n    return exports.isLeft(wa) ? wa : exports.right(f(wa));\n}; };\nexports.extend = extend;\n/**\n * Derivable from `Extend`.\n *\n * @category combinators\n * @since 2.0.0\n */\nexports.duplicate = \n/*#__PURE__*/\nexports.extend(function_1.identity);\n/**\n * Left-associative fold of a structure.\n *\n * @example\n * import { pipe } from 'fp-ts/function'\n * import * as E from 'fp-ts/Either'\n *\n * const startWith = 'prefix'\n * const concat = (a: string, b: string) => `${a}:${b}`\n *\n * assert.deepStrictEqual(\n *   pipe(E.right('a'), E.reduce(startWith, concat)),\n *   'prefix:a',\n * )\n *\n * assert.deepStrictEqual(\n *   pipe(E.left('e'), E.reduce(startWith, concat)),\n *   'prefix',\n * )\n *\n * @category Foldable\n * @since 2.0.0\n */\nvar reduce = function (b, f) { return function (fa) {\n    return exports.isLeft(fa) ? b : f(b, fa.right);\n}; };\nexports.reduce = reduce;\n/**\n * Map each element of the structure to a monoid, and combine the results.\n *\n * @example\n * import { pipe } from 'fp-ts/function';\n * import * as E from 'fp-ts/Either'\n * import { monoidString } from 'fp-ts/Monoid'\n *\n * const yell = (a: string) => `${a}!`\n *\n * assert.deepStrictEqual(\n *   pipe(E.right('a'), E.foldMap(monoidString)(yell)),\n *   'a!',\n * )\n *\n * assert.deepStrictEqual(\n *   pipe(E.left('e'), E.foldMap(monoidString)(yell)),\n *   monoidString.empty,\n * )\n *\n * @category Foldable\n * @since 2.0.0\n */\nvar foldMap = function (M) { return function (f) { return function (fa) {\n    return exports.isLeft(fa) ? M.empty : f(fa.right);\n}; }; };\nexports.foldMap = foldMap;\n/**\n * Right-associative fold of a structure.\n *\n * @example\n * import { pipe } from 'fp-ts/function'\n * import * as E from 'fp-ts/Either'\n *\n * const startWith = 'postfix'\n * const concat = (a: string, b: string) => `${a}:${b}`\n *\n * assert.deepStrictEqual(\n *   pipe(E.right('a'), E.reduceRight(startWith, concat)),\n *   'a:postfix',\n * )\n *\n * assert.deepStrictEqual(\n *   pipe(E.left('e'), E.reduceRight(startWith, concat)),\n *   'postfix',\n * )\n *\n * @category Foldable\n * @since 2.0.0\n */\nvar reduceRight = function (b, f) { return function (fa) {\n    return exports.isLeft(fa) ? b : f(fa.right, b);\n}; };\nexports.reduceRight = reduceRight;\n/**\n * Map each element of a structure to an action, evaluate these actions from left to right, and collect the results.\n *\n * @example\n * import { pipe } from 'fp-ts/function'\n * import * as A from 'fp-ts/Array'\n * import * as E from 'fp-ts/Either'\n * import * as O from 'fp-ts/Option'\n *\n * assert.deepStrictEqual(\n *   pipe(E.right(['a']), E.traverse(O.option)(A.head)),\n *   O.some(E.right('a')),\n *  )\n *\n * assert.deepStrictEqual(\n *   pipe(E.right([]), E.traverse(O.option)(A.head)),\n *   O.none,\n * )\n *\n * @category Traversable\n * @since 2.6.3\n */\nvar traverse = function (F) { return function (f) { return function (ta) { return (exports.isLeft(ta) ? F.of(exports.left(ta.left)) : F.map(f(ta.right), exports.right)); }; }; };\nexports.traverse = traverse;\n/**\n * Evaluate each monadic action in the structure from left to right, and collect the results.\n *\n * @example\n * import { pipe } from 'fp-ts/function'\n * import * as E from 'fp-ts/Either'\n * import * as O from 'fp-ts/Option'\n *\n * assert.deepStrictEqual(\n *   pipe(E.right(O.some('a')), E.sequence(O.option)),\n *   O.some(E.right('a')),\n *  )\n *\n * assert.deepStrictEqual(\n *   pipe(E.right(O.none), E.sequence(O.option)),\n *   O.none\n * )\n *\n * @category Traversable\n * @since 2.6.3\n */\nvar sequence = function (F) { return function (ma) {\n    return exports.isLeft(ma) ? F.of(exports.left(ma.left)) : F.map(ma.right, exports.right);\n}; };\nexports.sequence = sequence;\n/**\n * @category MonadThrow\n * @since 2.6.3\n */\nexports.throwError = exports.left;\n// -------------------------------------------------------------------------------------\n// instances\n// -------------------------------------------------------------------------------------\n/**\n * @category instances\n * @since 2.0.0\n */\nexports.URI = 'Either';\n/**\n * @category instances\n * @since 2.0.0\n */\nfunction getShow(SE, SA) {\n    return {\n        show: function (ma) { return (exports.isLeft(ma) ? \"left(\" + SE.show(ma.left) + \")\" : \"right(\" + SA.show(ma.right) + \")\"); }\n    };\n}\nexports.getShow = getShow;\n/**\n * @category instances\n * @since 2.0.0\n */\nfunction getEq(EL, EA) {\n    return {\n        equals: function (x, y) {\n            return x === y || (exports.isLeft(x) ? exports.isLeft(y) && EL.equals(x.left, y.left) : exports.isRight(y) && EA.equals(x.right, y.right));\n        }\n    };\n}\nexports.getEq = getEq;\n/**\n * Semigroup returning the left-most non-`Left` value. If both operands are `Right`s then the inner values are\n * concatenated using the provided `Semigroup`\n *\n * @example\n * import { getSemigroup, left, right } from 'fp-ts/Either'\n * import { semigroupSum } from 'fp-ts/Semigroup'\n *\n * const S = getSemigroup<string, number>(semigroupSum)\n * assert.deepStrictEqual(S.concat(left('a'), left('b')), left('a'))\n * assert.deepStrictEqual(S.concat(left('a'), right(2)), right(2))\n * assert.deepStrictEqual(S.concat(right(1), left('b')), right(1))\n * assert.deepStrictEqual(S.concat(right(1), right(2)), right(3))\n *\n * @category instances\n * @since 2.0.0\n */\nfunction getSemigroup(S) {\n    return {\n        concat: function (x, y) { return (exports.isLeft(y) ? x : exports.isLeft(x) ? y : exports.right(S.concat(x.right, y.right))); }\n    };\n}\nexports.getSemigroup = getSemigroup;\n/**\n * Semigroup returning the left-most `Left` value. If both operands are `Right`s then the inner values\n * are concatenated using the provided `Semigroup`\n *\n * @example\n * import { getApplySemigroup, left, right } from 'fp-ts/Either'\n * import { semigroupSum } from 'fp-ts/Semigroup'\n *\n * const S = getApplySemigroup<string, number>(semigroupSum)\n * assert.deepStrictEqual(S.concat(left('a'), left('b')), left('a'))\n * assert.deepStrictEqual(S.concat(left('a'), right(2)), left('a'))\n * assert.deepStrictEqual(S.concat(right(1), left('b')), left('b'))\n * assert.deepStrictEqual(S.concat(right(1), right(2)), right(3))\n *\n * @category instances\n * @since 2.0.0\n */\nfunction getApplySemigroup(S) {\n    return {\n        concat: function (x, y) { return (exports.isLeft(x) ? x : exports.isLeft(y) ? y : exports.right(S.concat(x.right, y.right))); }\n    };\n}\nexports.getApplySemigroup = getApplySemigroup;\n/**\n * @category instances\n * @since 2.0.0\n */\nfunction getApplyMonoid(M) {\n    return {\n        concat: getApplySemigroup(M).concat,\n        empty: exports.right(M.empty)\n    };\n}\nexports.getApplyMonoid = getApplyMonoid;\n/**\n * Builds a `Filterable` instance for `Either` given `Monoid` for the left side\n *\n * @category instances\n * @since 3.0.0\n */\nfunction getFilterable(M) {\n    var empty = exports.left(M.empty);\n    var compact = function (ma) {\n        return exports.isLeft(ma) ? ma : ma.right._tag === 'None' ? empty : exports.right(ma.right.value);\n    };\n    var separate = function (ma) {\n        return exports.isLeft(ma)\n            ? { left: ma, right: ma }\n            : exports.isLeft(ma.right)\n                ? { left: exports.right(ma.right.left), right: empty }\n                : { left: empty, right: exports.right(ma.right.right) };\n    };\n    var partitionMap = function (ma, f) {\n        if (exports.isLeft(ma)) {\n            return { left: ma, right: ma };\n        }\n        var e = f(ma.right);\n        return exports.isLeft(e) ? { left: exports.right(e.left), right: empty } : { left: empty, right: exports.right(e.right) };\n    };\n    var partition = function (ma, p) {\n        return exports.isLeft(ma)\n            ? { left: ma, right: ma }\n            : p(ma.right)\n                ? { left: empty, right: exports.right(ma.right) }\n                : { left: exports.right(ma.right), right: empty };\n    };\n    var filterMap = function (ma, f) {\n        if (exports.isLeft(ma)) {\n            return ma;\n        }\n        var ob = f(ma.right);\n        return ob._tag === 'None' ? empty : exports.right(ob.value);\n    };\n    var filter = function (ma, predicate) {\n        return exports.isLeft(ma) ? ma : predicate(ma.right) ? ma : empty;\n    };\n    return {\n        URI: exports.URI,\n        _E: undefined,\n        map: map_,\n        compact: compact,\n        separate: separate,\n        filter: filter,\n        filterMap: filterMap,\n        partition: partition,\n        partitionMap: partitionMap\n    };\n}\nexports.getFilterable = getFilterable;\n/**\n * Builds `Witherable` instance for `Either` given `Monoid` for the left side\n *\n * @category instances\n * @since 2.0.0\n */\nfunction getWitherable(M) {\n    var F_ = getFilterable(M);\n    var wither = function (F) {\n        var traverseF = traverse_(F);\n        return function (ma, f) { return F.map(traverseF(ma, f), F_.compact); };\n    };\n    var wilt = function (F) {\n        var traverseF = traverse_(F);\n        return function (ma, f) { return F.map(traverseF(ma, f), F_.separate); };\n    };\n    return {\n        URI: exports.URI,\n        _E: undefined,\n        map: map_,\n        compact: F_.compact,\n        separate: F_.separate,\n        filter: F_.filter,\n        filterMap: F_.filterMap,\n        partition: F_.partition,\n        partitionMap: F_.partitionMap,\n        traverse: traverse_,\n        sequence: exports.sequence,\n        reduce: reduce_,\n        foldMap: foldMap_,\n        reduceRight: reduceRight_,\n        wither: wither,\n        wilt: wilt\n    };\n}\nexports.getWitherable = getWitherable;\n/**\n * @category instances\n * @since 2.7.0\n */\nfunction getApplicativeValidation(SE) {\n    return {\n        URI: exports.URI,\n        _E: undefined,\n        map: map_,\n        ap: function (fab, fa) {\n            return exports.isLeft(fab)\n                ? exports.isLeft(fa)\n                    ? exports.left(SE.concat(fab.left, fa.left))\n                    : fab\n                : exports.isLeft(fa)\n                    ? fa\n                    : exports.right(fab.right(fa.right));\n        },\n        of: exports.of\n    };\n}\nexports.getApplicativeValidation = getApplicativeValidation;\n/**\n * @category instances\n * @since 2.7.0\n */\nfunction getAltValidation(SE) {\n    return {\n        URI: exports.URI,\n        _E: undefined,\n        map: map_,\n        alt: function (me, that) {\n            if (exports.isRight(me)) {\n                return me;\n            }\n            var ea = that();\n            return exports.isLeft(ea) ? exports.left(SE.concat(me.left, ea.left)) : ea;\n        }\n    };\n}\nexports.getAltValidation = getAltValidation;\n// TODO: remove in v3\n/**\n * @category instances\n * @since 2.0.0\n */\nfunction getValidation(SE) {\n    var applicativeValidation = getApplicativeValidation(SE);\n    var altValidation = getAltValidation(SE);\n    return {\n        URI: exports.URI,\n        _E: undefined,\n        map: map_,\n        of: exports.of,\n        chain: chain_,\n        bimap: bimap_,\n        mapLeft: mapLeft_,\n        reduce: reduce_,\n        foldMap: foldMap_,\n        reduceRight: reduceRight_,\n        extend: extend_,\n        traverse: traverse_,\n        sequence: exports.sequence,\n        chainRec: chainRec_,\n        throwError: exports.throwError,\n        ap: applicativeValidation.ap,\n        alt: altValidation.alt\n    };\n}\nexports.getValidation = getValidation;\n/**\n * @category instances\n * @since 2.0.0\n */\nfunction getValidationSemigroup(SE, SA) {\n    return {\n        concat: function (x, y) {\n            return exports.isLeft(x) ? (exports.isLeft(y) ? exports.left(SE.concat(x.left, y.left)) : x) : exports.isLeft(y) ? y : exports.right(SA.concat(x.right, y.right));\n        }\n    };\n}\nexports.getValidationSemigroup = getValidationSemigroup;\n/**\n * @category instances\n * @since 2.7.0\n */\nexports.Functor = {\n    URI: exports.URI,\n    map: map_\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexports.Applicative = {\n    URI: exports.URI,\n    map: map_,\n    ap: ap_,\n    of: exports.of\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexports.Monad = {\n    URI: exports.URI,\n    map: map_,\n    ap: ap_,\n    of: exports.of,\n    chain: chain_\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexports.Foldable = {\n    URI: exports.URI,\n    reduce: reduce_,\n    foldMap: foldMap_,\n    reduceRight: reduceRight_\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexports.Traversable = {\n    URI: exports.URI,\n    map: map_,\n    reduce: reduce_,\n    foldMap: foldMap_,\n    reduceRight: reduceRight_,\n    traverse: traverse_,\n    sequence: exports.sequence\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexports.Bifunctor = {\n    URI: exports.URI,\n    bimap: bimap_,\n    mapLeft: mapLeft_\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexports.Alt = {\n    URI: exports.URI,\n    map: map_,\n    alt: alt_\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexports.Extend = {\n    URI: exports.URI,\n    map: map_,\n    extend: extend_\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexports.ChainRec = {\n    URI: exports.URI,\n    map: map_,\n    ap: ap_,\n    chain: chain_,\n    chainRec: chainRec_\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexports.MonadThrow = {\n    URI: exports.URI,\n    map: map_,\n    ap: ap_,\n    of: exports.of,\n    chain: chain_,\n    throwError: exports.throwError\n};\n/**\n * @category instances\n * @since 2.0.0\n */\nfunction getValidationMonoid(SE, SA) {\n    return {\n        concat: getValidationSemigroup(SE, SA).concat,\n        empty: exports.right(SA.empty)\n    };\n}\nexports.getValidationMonoid = getValidationMonoid;\n/**\n * @category instances\n * @since 2.0.0\n */\nexports.either = {\n    URI: exports.URI,\n    map: map_,\n    of: exports.of,\n    ap: ap_,\n    chain: chain_,\n    reduce: reduce_,\n    foldMap: foldMap_,\n    reduceRight: reduceRight_,\n    traverse: traverse_,\n    sequence: exports.sequence,\n    bimap: bimap_,\n    mapLeft: mapLeft_,\n    alt: alt_,\n    extend: extend_,\n    chainRec: chainRec_,\n    throwError: exports.throwError\n};\n// -------------------------------------------------------------------------------------\n// utils\n// -------------------------------------------------------------------------------------\n/**\n * Default value for the `onError` argument of `tryCatch`\n *\n * @since 2.0.0\n */\nfunction toError(e) {\n    return e instanceof Error ? e : new Error(String(e));\n}\nexports.toError = toError;\n/**\n * @since 2.0.0\n */\nfunction elem(E) {\n    return function (a, ma) { return (exports.isLeft(ma) ? false : E.equals(a, ma.right)); };\n}\nexports.elem = elem;\n/**\n * Returns `false` if `Left` or returns the result of the application of the given predicate to the `Right` value.\n *\n * @example\n * import { exists, left, right } from 'fp-ts/Either'\n *\n * const gt2 = exists((n: number) => n > 2)\n *\n * assert.strictEqual(gt2(left('a')), false)\n * assert.strictEqual(gt2(right(1)), false)\n * assert.strictEqual(gt2(right(3)), true)\n *\n * @since 2.0.0\n */\nfunction exists(predicate) {\n    return function (ma) { return (exports.isLeft(ma) ? false : predicate(ma.right)); };\n}\nexports.exists = exists;\n// -------------------------------------------------------------------------------------\n// do notation\n// -------------------------------------------------------------------------------------\n/**\n * @since 2.9.0\n */\nexports.Do = \n/*#__PURE__*/\nexports.of({});\n/**\n * @since 2.8.0\n */\nvar bindTo = function (name) {\n    return exports.map(function_1.bindTo_(name));\n};\nexports.bindTo = bindTo;\n/**\n * @since 2.8.0\n */\nvar bindW = function (name, f) {\n    return exports.chainW(function (a) {\n        return function_1.pipe(f(a), exports.map(function (b) { return function_1.bind_(a, name, b); }));\n    });\n};\nexports.bindW = bindW;\n/**\n * @since 2.8.0\n */\nexports.bind = exports.bindW;\n// -------------------------------------------------------------------------------------\n// pipeable sequence S\n// -------------------------------------------------------------------------------------\n/**\n * @since 2.8.0\n */\nvar apSW = function (name, fb) {\n    return function_1.flow(exports.map(function (a) { return function (b) { return function_1.bind_(a, name, b); }; }), exports.apW(fb));\n};\nexports.apSW = apSW;\n/**\n * @since 2.8.0\n */\nexports.apS = exports.apSW;\n// -------------------------------------------------------------------------------------\n// array utils\n// -------------------------------------------------------------------------------------\n/**\n *\n * @since 2.9.0\n */\nvar traverseArrayWithIndex = function (f) { return function (arr) {\n    // tslint:disable-next-line: readonly-array\n    var result = [];\n    for (var i = 0; i < arr.length; i++) {\n        var e = f(i, arr[i]);\n        if (e._tag === 'Left') {\n            return e;\n        }\n        result.push(e.right);\n    }\n    return exports.right(result);\n}; };\nexports.traverseArrayWithIndex = traverseArrayWithIndex;\n/**\n * map an array using provided function to Either then transform to Either of the array\n * this function have the same behavior of `A.traverse(E.either)` but it's optimized and perform better\n *\n * @example\n *\n *\n * import { traverseArray, left, right, fromPredicate } from 'fp-ts/Either'\n * import { pipe } from 'fp-ts/function'\n * import * as A from 'fp-ts/Array'\n *\n * const arr = A.range(0, 10)\n * assert.deepStrictEqual(\n *   pipe(\n *     arr,\n *     traverseArray((x) => right(x))\n *   ),\n *   right(arr)\n * )\n * assert.deepStrictEqual(\n *   pipe(\n *     arr,\n *     traverseArray(\n *       fromPredicate(\n *         (x) => x > 5,\n *         () => 'a'\n *       )\n *     )\n *   ),\n *   left('a')\n * )\n * @since 2.9.0\n */\nvar traverseArray = function (f) { return exports.traverseArrayWithIndex(function (_, a) { return f(a); }); };\nexports.traverseArray = traverseArray;\n/**\n * convert an array of either to an either of array\n * this function have the same behavior of `A.sequence(E.either)` but it's optimized and perform better\n *\n * @example\n *\n * import { sequenceArray, left, right } from 'fp-ts/Either'\n * import { pipe } from 'fp-ts/function'\n * import * as A from 'fp-ts/Array'\n *\n * const arr = A.range(0, 10)\n * assert.deepStrictEqual(pipe(arr, A.map(right), sequenceArray), right(arr))\n * assert.deepStrictEqual(pipe(arr, A.map(right), A.cons(left('Error')), sequenceArray), left('Error'))\n *\n * @since 2.9.0\n */\nexports.sequenceArray = \n/*#__PURE__*/\nexports.traverseArray(function_1.identity);\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}
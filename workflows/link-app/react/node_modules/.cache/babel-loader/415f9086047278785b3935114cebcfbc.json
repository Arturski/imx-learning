{"ast":null,"code":"/**\n * @since 0.5.11\n */\nimport * as t from 'io-ts';\nimport { pipe } from 'fp-ts/es6/pipeable';\nimport { chain } from 'fp-ts/es6/Either';\nimport { NonEmptyString } from './NonEmptyString';\n/**\n * @example\n * import { BigIntFromString } from 'io-ts-types/es6/BigIntFromString'\n * import { right } from 'fp-ts/es6/Either'\n * import { PathReporter } from 'io-ts/es6/PathReporter'\n *\n * assert.deepStrictEqual(BigIntFromString.decode('1'), right(BigInt(1)))\n * assert.deepStrictEqual(PathReporter.report(BigIntFromString.decode('1.1')), ['Invalid value \"1.1\" supplied to : BigIntFromString'])\n * assert.deepStrictEqual(PathReporter.report(BigIntFromString.decode('')), ['Invalid value \"\" supplied to : BigIntFromString'])\n * assert.deepStrictEqual(PathReporter.report(BigIntFromString.decode(' ')), ['Invalid value \" \" supplied to : BigIntFromString'])\n *\n * @since 0.5.11\n */\nexport var BigIntFromString = new t.Type('BigIntFromString',\n// tslint:disable-next-line\nfunction (u) {\n  return typeof u === 'bigint';\n}, function (u, c) {\n  return pipe(t.string.validate(u, c), chain(function (s) {\n    if (!NonEmptyString.is(s.trim())) {\n      return t.failure(u, c);\n    }\n    try {\n      return t.success(BigInt(s));\n    } catch (error) {\n      return t.failure(u, c);\n    }\n  }));\n}, String);","map":{"version":3,"names":["t","pipe","chain","NonEmptyString","BigIntFromString","Type","u","c","string","validate","s","is","trim","failure","success","BigInt","error","String"],"sources":["/Users/arthurfrancis/Documents/repo/imx-learning/workflows/link-app/react/node_modules/io-ts-types/es6/BigIntFromString.js"],"sourcesContent":["/**\n * @since 0.5.11\n */\nimport * as t from 'io-ts';\nimport { pipe } from 'fp-ts/es6/pipeable';\nimport { chain } from 'fp-ts/es6/Either';\nimport { NonEmptyString } from './NonEmptyString';\n/**\n * @example\n * import { BigIntFromString } from 'io-ts-types/es6/BigIntFromString'\n * import { right } from 'fp-ts/es6/Either'\n * import { PathReporter } from 'io-ts/es6/PathReporter'\n *\n * assert.deepStrictEqual(BigIntFromString.decode('1'), right(BigInt(1)))\n * assert.deepStrictEqual(PathReporter.report(BigIntFromString.decode('1.1')), ['Invalid value \"1.1\" supplied to : BigIntFromString'])\n * assert.deepStrictEqual(PathReporter.report(BigIntFromString.decode('')), ['Invalid value \"\" supplied to : BigIntFromString'])\n * assert.deepStrictEqual(PathReporter.report(BigIntFromString.decode(' ')), ['Invalid value \" \" supplied to : BigIntFromString'])\n *\n * @since 0.5.11\n */\nexport var BigIntFromString = new t.Type('BigIntFromString', \n// tslint:disable-next-line\nfunction (u) { return typeof u === 'bigint'; }, function (u, c) {\n    return pipe(t.string.validate(u, c), chain(function (s) {\n        if (!NonEmptyString.is(s.trim())) {\n            return t.failure(u, c);\n        }\n        try {\n            return t.success(BigInt(s));\n        }\n        catch (error) {\n            return t.failure(u, c);\n        }\n    }));\n}, String);\n"],"mappings":"AAAA;AACA;AACA;AACA,OAAO,KAAKA,CAAC,MAAM,OAAO;AAC1B,SAASC,IAAI,QAAQ,oBAAoB;AACzC,SAASC,KAAK,QAAQ,kBAAkB;AACxC,SAASC,cAAc,QAAQ,kBAAkB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAIC,gBAAgB,GAAG,IAAIJ,CAAC,CAACK,IAAI,CAAC,kBAAkB;AAC3D;AACA,UAAUC,CAAC,EAAE;EAAE,OAAO,OAAOA,CAAC,KAAK,QAAQ;AAAE,CAAC,EAAE,UAAUA,CAAC,EAAEC,CAAC,EAAE;EAC5D,OAAON,IAAI,CAACD,CAAC,CAACQ,MAAM,CAACC,QAAQ,CAACH,CAAC,EAAEC,CAAC,CAAC,EAAEL,KAAK,CAAC,UAAUQ,CAAC,EAAE;IACpD,IAAI,CAACP,cAAc,CAACQ,EAAE,CAACD,CAAC,CAACE,IAAI,EAAE,CAAC,EAAE;MAC9B,OAAOZ,CAAC,CAACa,OAAO,CAACP,CAAC,EAAEC,CAAC,CAAC;IAC1B;IACA,IAAI;MACA,OAAOP,CAAC,CAACc,OAAO,CAACC,MAAM,CAACL,CAAC,CAAC,CAAC;IAC/B,CAAC,CACD,OAAOM,KAAK,EAAE;MACV,OAAOhB,CAAC,CAACa,OAAO,CAACP,CAAC,EAAEC,CAAC,CAAC;IAC1B;EACJ,CAAC,CAAC,CAAC;AACP,CAAC,EAAEU,MAAM,CAAC"},"metadata":{},"sourceType":"module"}
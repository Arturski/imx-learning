{"ast":null,"code":"var _jsxFileName = \"/Users/arthurfrancis/Documents/repo/imx-reactjs-integration-example/src/Inventory.tsx\",\n  _s = $RefreshSig$();\nimport { ethers } from 'ethers';\nimport { ImmutableXClient, MintableERC721TokenType } from '@imtbl/imx-sdk';\nimport { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nrequire('dotenv').config();\nconst Inventory = _ref => {\n  _s();\n  let {\n    client,\n    link,\n    wallet\n  } = _ref;\n  const [inventory, setInventory] = useState(Object);\n  // minting\n  const [mintTokenId, setMintTokenId] = useState('');\n  const [mintBlueprint, setMintBlueprint] = useState('');\n  const [mintTokenIdv2, setMintTokenIdv2] = useState('');\n  const [mintBlueprintv2, setMintBlueprintv2] = useState('');\n\n  // buying and selling\n  const [sellAmount, setSellAmount] = useState('');\n  const [sellTokenId, setSellTokenId] = useState('');\n  const [sellTokenAddress, setSellTokenAddress] = useState('');\n  const [sellCancelOrder, setSellCancelOrder] = useState('');\n  useEffect(() => {\n    load();\n  }, []);\n  async function load() {\n    setInventory(await client.getAssets({\n      user: wallet,\n      sell_orders: true\n    }));\n  }\n  ;\n\n  // sell an asset\n  async function sellNFT() {\n    await link.sell({\n      amount: sellAmount,\n      tokenId: sellTokenId,\n      tokenAddress: sellTokenAddress\n    });\n    setInventory(await client.getAssets({\n      user: wallet,\n      sell_orders: true\n    }));\n  }\n  ;\n\n  // cancel sell order\n  async function cancelSell() {\n    await link.cancel({\n      orderId: sellCancelOrder\n    });\n    setInventory(await client.getAssets({\n      user: wallet,\n      sell_orders: true\n    }));\n  }\n  ;\n\n  // helper function to generate random ids\n  function random() {\n    const min = 1;\n    const max = 1000000000;\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n  }\n\n  // the minting function should be on your backend\n  async function mint() {\n    var _process$env$REACT_AP, _process$env$REACT_AP2, _process$env$REACT_AP3, _process$env$REACT_AP4, _process$env$REACT_AP5;\n    // initialise a client with the minter for your NFT smart contract\n    const provider = new ethers.providers.JsonRpcProvider(`https://eth-goerli.g.alchemy.com/v2/${process.env.REACT_APP_ALCHEMY_API_KEY}`);\n\n    //if you want to mint on a back end server you can also provide the private key of your wallet directly to the minter. \n    //Please note: you should never share your private key and so ensure this is only done on a server that is not accessible from the internet\n    const minterPrivateKey = (_process$env$REACT_AP = process.env.REACT_APP_MINTER_PK) !== null && _process$env$REACT_AP !== void 0 ? _process$env$REACT_AP : ''; // registered minter for your contract\n    const minter = new ethers.Wallet(minterPrivateKey).connect(provider);\n\n    //const minter = new ethers.providers.Web3Provider(window.ethereum).getSigner(); //get Signature from Metamask wallet\n    const publicApiUrl = (_process$env$REACT_AP2 = process.env.REACT_APP_SANDBOX_ENV_URL) !== null && _process$env$REACT_AP2 !== void 0 ? _process$env$REACT_AP2 : '';\n    const starkContractAddress = (_process$env$REACT_AP3 = process.env.REACT_APP_SANDBOX_STARK_CONTRACT_ADDRESS) !== null && _process$env$REACT_AP3 !== void 0 ? _process$env$REACT_AP3 : '';\n    const registrationContractAddress = (_process$env$REACT_AP4 = process.env.REACT_APP_SANDBOX_REGISTRATION_ADDRESS) !== null && _process$env$REACT_AP4 !== void 0 ? _process$env$REACT_AP4 : '';\n    const minterClient = await ImmutableXClient.build({\n      publicApiUrl,\n      signer: minter,\n      starkContractAddress,\n      registrationContractAddress\n    });\n\n    // mint any number of NFTs to specified wallet address (must be registered on Immutable X first)\n    const token_address = (_process$env$REACT_AP5 = process.env.REACT_APP_TOKEN_ADDRESS) !== null && _process$env$REACT_AP5 !== void 0 ? _process$env$REACT_AP5 : ''; // contract registered by Immutable\n    const result = await minterClient.mint({\n      mints: [{\n        etherKey: wallet,\n        tokens: [{\n          type: MintableERC721TokenType.MINTABLE_ERC721,\n          data: {\n            id: mintTokenId,\n            // this is the ERC721 token id\n            blueprint: mintBlueprint,\n            // this is passed to your smart contract at time of withdrawal from L2\n            tokenAddress: token_address.toLowerCase()\n          }\n        }],\n        nonce: random().toString(10),\n        authSignature: ''\n      }]\n    });\n    console.log(`Token minted: ${result.results[0].token_id}`);\n    setInventory(await client.getAssets({\n      user: wallet,\n      sell_orders: true\n    }));\n  }\n  ;\n  async function mintv2() {\n    var _process$env$REACT_AP6, _process$env$REACT_AP7, _process$env$REACT_AP8, _process$env$REACT_AP9, _process$env$REACT_AP10, _process$env$REACT_AP11;\n    // initialise a client with the minter for your NFT smart contract\n    const provider = new ethers.providers.JsonRpcProvider(`https://eth-goerli.g.alchemy.com/v2/${process.env.REACT_APP_ALCHEMY_API_KEY}`);\n\n    /**\n    //if you want to mint on a back end server you can also provide the private key of your wallet directly to the minter. \n    //Please note: you should never share your private key and so ensure this is only done on a server that is not accessible from the internet\n    const minterPrivateKey: string = process.env.REACT_APP_MINTER_PK ?? ''; // registered minter for your contract\n    const minter = new ethers.Wallet(minterPrivateKey).connect(provider);\n    **/\n    //const minter = new ethers.providers.Web3Provider(window.ethereum).getSigner(); //get Signature from Metamask wallet\n    const publicApiUrl = (_process$env$REACT_AP6 = process.env.REACT_APP_SANDBOX_ENV_URL) !== null && _process$env$REACT_AP6 !== void 0 ? _process$env$REACT_AP6 : '';\n    const starkContractAddress = (_process$env$REACT_AP7 = process.env.REACT_APP_SANDBOX_STARK_CONTRACT_ADDRESS) !== null && _process$env$REACT_AP7 !== void 0 ? _process$env$REACT_AP7 : '';\n    const registrationContractAddress = (_process$env$REACT_AP8 = process.env.REACT_APP_SANDBOX_REGISTRATION_ADDRESS) !== null && _process$env$REACT_AP8 !== void 0 ? _process$env$REACT_AP8 : '';\n    const minterClient = await ImmutableXClient.build({\n      publicApiUrl,\n      signer: minter,\n      starkContractAddress,\n      registrationContractAddress\n    });\n\n    // mint any number of NFTs to specified wallet address (must be registered on Immutable X first)\n    const token_address = (_process$env$REACT_AP9 = process.env.REACT_APP_TOKEN_ADDRESS) !== null && _process$env$REACT_AP9 !== void 0 ? _process$env$REACT_AP9 : ''; // contract registered by Immutable\n    const royaltyRecieverAddress = (_process$env$REACT_AP10 = process.env.REACT_APP_ROYALTY_ADDRESS) !== null && _process$env$REACT_AP10 !== void 0 ? _process$env$REACT_AP10 : '';\n    const tokenReceiverAddress = (_process$env$REACT_AP11 = process.env.REACT_APP_TOKEN_RECEIVER_ADDRESS) !== null && _process$env$REACT_AP11 !== void 0 ? _process$env$REACT_AP11 : '';\n    const result = await minterClient.mintV2([{\n      users: [{\n        etherKey: tokenReceiverAddress.toLowerCase(),\n        tokens: [{\n          id: mintTokenIdv2,\n          blueprint: mintBlueprintv2,\n          // overriding royalties for specific token\n          royalties: [{\n            recipient: tokenReceiverAddress.toLowerCase(),\n            percentage: 3.5\n          }]\n        }]\n      }],\n      contractAddress: token_address.toLowerCase(),\n      // globally set royalties\n      royalties: [{\n        recipient: tokenReceiverAddress.toLowerCase(),\n        percentage: 4.0\n      }]\n    }]);\n    console.log(`Token minted: ${result}`);\n    setInventory(await client.getAssets({\n      user: wallet,\n      sell_orders: true\n    }));\n  }\n  ;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Mint NFT:\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Token ID:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: mintTokenId,\n          onChange: e => setMintTokenId(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Blueprint:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: mintBlueprint,\n          onChange: e => setMintBlueprint(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: mint,\n        children: \"Mint\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"MintV2 - with Royalties NFT:\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Token ID:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: mintTokenIdv2,\n          onChange: e => setMintTokenIdv2(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Blueprint:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: mintBlueprintv2,\n          onChange: e => setMintBlueprintv2(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: mintv2,\n        children: \"MintV2\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Sell asset (create sell order):\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Amount (ETH):\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: sellAmount,\n          onChange: e => setSellAmount(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Token ID:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: sellTokenId,\n          onChange: e => setSellTokenId(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Token Address:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: sellTokenAddress,\n          onChange: e => setSellTokenAddress(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: sellNFT,\n        children: \"Sell\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Cancel sell order:\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Order ID:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: sellCancelOrder,\n          onChange: e => setSellCancelOrder(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: cancelSell,\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 12\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Inventory:\", JSON.stringify(inventory.result)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 155,\n    columnNumber: 5\n  }, this);\n};\n_s(Inventory, \"KD7s8JSMXirrTNXeuzxYMM++0nM=\");\n_c = Inventory;\nexport default Inventory;\nvar _c;\n$RefreshReg$(_c, \"Inventory\");","map":{"version":3,"names":["ethers","ImmutableXClient","MintableERC721TokenType","useEffect","useState","require","config","Inventory","client","link","wallet","inventory","setInventory","Object","mintTokenId","setMintTokenId","mintBlueprint","setMintBlueprint","mintTokenIdv2","setMintTokenIdv2","mintBlueprintv2","setMintBlueprintv2","sellAmount","setSellAmount","sellTokenId","setSellTokenId","sellTokenAddress","setSellTokenAddress","sellCancelOrder","setSellCancelOrder","load","getAssets","user","sell_orders","sellNFT","sell","amount","tokenId","tokenAddress","cancelSell","cancel","orderId","random","min","max","Math","floor","mint","provider","providers","JsonRpcProvider","process","env","REACT_APP_ALCHEMY_API_KEY","minterPrivateKey","REACT_APP_MINTER_PK","minter","Wallet","connect","publicApiUrl","REACT_APP_SANDBOX_ENV_URL","starkContractAddress","REACT_APP_SANDBOX_STARK_CONTRACT_ADDRESS","registrationContractAddress","REACT_APP_SANDBOX_REGISTRATION_ADDRESS","minterClient","build","signer","token_address","REACT_APP_TOKEN_ADDRESS","result","mints","etherKey","tokens","type","MINTABLE_ERC721","data","id","blueprint","toLowerCase","nonce","toString","authSignature","console","log","results","token_id","mintv2","royaltyRecieverAddress","REACT_APP_ROYALTY_ADDRESS","tokenReceiverAddress","REACT_APP_TOKEN_RECEIVER_ADDRESS","mintV2","users","royalties","recipient","percentage","contractAddress","e","target","value","JSON","stringify"],"sources":["/Users/arthurfrancis/Documents/repo/imx-reactjs-integration-example/src/Inventory.tsx"],"sourcesContent":["import { ethers } from 'ethers';\nimport { Link, ImmutableXClient, ImmutableMethodResults, MintableERC721TokenType } from '@imtbl/imx-sdk';\nimport { useEffect, useState } from 'react';\nrequire('dotenv').config();\n\ninterface InventoryProps {\n  client: ImmutableXClient,\n  link: Link,\n  wallet: string\n}\n\nconst Inventory = ({client, link, wallet}: InventoryProps) => {\n  const [inventory, setInventory] = useState<ImmutableMethodResults.ImmutableGetAssetsResult>(Object);\n  // minting\n  const [mintTokenId, setMintTokenId] = useState('');\n  const [mintBlueprint, setMintBlueprint] = useState('');\n  const [mintTokenIdv2, setMintTokenIdv2] = useState('');\n  const [mintBlueprintv2, setMintBlueprintv2] = useState('');\n\n  // buying and selling\n  const [sellAmount, setSellAmount] = useState('');\n  const [sellTokenId, setSellTokenId] = useState('');\n  const [sellTokenAddress, setSellTokenAddress] = useState('');\n  const [sellCancelOrder, setSellCancelOrder] = useState('');\n\n  useEffect(() => {\n    load()\n  }, [])\n\n  async function load(): Promise<void> {\n    setInventory(await client.getAssets({user: wallet, sell_orders: true}))\n  };\n\n  // sell an asset\n  async function sellNFT() {\n    await link.sell({\n      amount: sellAmount,\n      tokenId: sellTokenId,\n      tokenAddress: sellTokenAddress\n    })\n    setInventory(await client.getAssets({user: wallet, sell_orders: true}))\n  };\n\n  // cancel sell order\n  async function cancelSell() {\n    await link.cancel({\n      orderId: sellCancelOrder\n    })\n    setInventory(await client.getAssets({user: wallet, sell_orders: true}))\n  };\n\n  // helper function to generate random ids\n  function random()\n    : number {\n    const min = 1;\n    const max = 1000000000;\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n  }\n\n  // the minting function should be on your backend\n  async function mint() {\n    // initialise a client with the minter for your NFT smart contract\n    const provider = new ethers.providers.JsonRpcProvider(`https://eth-goerli.g.alchemy.com/v2/${process.env.REACT_APP_ALCHEMY_API_KEY}`);\n    \n    \n    //if you want to mint on a back end server you can also provide the private key of your wallet directly to the minter. \n    //Please note: you should never share your private key and so ensure this is only done on a server that is not accessible from the internet\n    const minterPrivateKey: string = process.env.REACT_APP_MINTER_PK ?? ''; // registered minter for your contract\n    const minter = new ethers.Wallet(minterPrivateKey).connect(provider);\n\n    //const minter = new ethers.providers.Web3Provider(window.ethereum).getSigner(); //get Signature from Metamask wallet\n    const publicApiUrl: string = process.env.REACT_APP_SANDBOX_ENV_URL ?? '';\n    const starkContractAddress: string = process.env.REACT_APP_SANDBOX_STARK_CONTRACT_ADDRESS ?? '';\n    const registrationContractAddress: string = process.env.REACT_APP_SANDBOX_REGISTRATION_ADDRESS ?? '';\n    const minterClient = await ImmutableXClient.build({\n        publicApiUrl,\n        signer: minter,\n        starkContractAddress,\n        registrationContractAddress,\n    })\n\n    // mint any number of NFTs to specified wallet address (must be registered on Immutable X first)\n    const token_address: string = process.env.REACT_APP_TOKEN_ADDRESS ?? ''; // contract registered by Immutable\n    const result = await minterClient.mint({\n      mints: [{\n          etherKey: wallet,\n          tokens: [{\n              type: MintableERC721TokenType.MINTABLE_ERC721,\n              data: {\n                  id: mintTokenId, // this is the ERC721 token id\n                  blueprint: mintBlueprint, // this is passed to your smart contract at time of withdrawal from L2\n                  tokenAddress: token_address.toLowerCase(),\n              }\n          }],\n          nonce: random().toString(10),\n          authSignature: ''\n      }]\n    });\n    console.log(`Token minted: ${result.results[0].token_id}`);\n    setInventory(await client.getAssets({user: wallet, sell_orders: true}))\n  };\n\nasync function mintv2() {\n    // initialise a client with the minter for your NFT smart contract\n    const provider = new ethers.providers.JsonRpcProvider(`https://eth-goerli.g.alchemy.com/v2/${process.env.REACT_APP_ALCHEMY_API_KEY}`);\n        \n    /**\n    //if you want to mint on a back end server you can also provide the private key of your wallet directly to the minter. \n    //Please note: you should never share your private key and so ensure this is only done on a server that is not accessible from the internet\n    const minterPrivateKey: string = process.env.REACT_APP_MINTER_PK ?? ''; // registered minter for your contract\n    const minter = new ethers.Wallet(minterPrivateKey).connect(provider);\n    **/\n    //const minter = new ethers.providers.Web3Provider(window.ethereum).getSigner(); //get Signature from Metamask wallet\n    const publicApiUrl: string = process.env.REACT_APP_SANDBOX_ENV_URL ?? '';\n    const starkContractAddress: string = process.env.REACT_APP_SANDBOX_STARK_CONTRACT_ADDRESS ?? '';\n    const registrationContractAddress: string = process.env.REACT_APP_SANDBOX_REGISTRATION_ADDRESS ?? '';\n    const minterClient = await ImmutableXClient.build({\n        publicApiUrl,\n        signer: minter,\n        starkContractAddress,\n        registrationContractAddress,\n    })\n\n    // mint any number of NFTs to specified wallet address (must be registered on Immutable X first)\n    const token_address: string = process.env.REACT_APP_TOKEN_ADDRESS ?? ''; // contract registered by Immutable\n    const royaltyRecieverAddress: string = process.env.REACT_APP_ROYALTY_ADDRESS ?? '';\n    const tokenReceiverAddress: string = process.env.REACT_APP_TOKEN_RECEIVER_ADDRESS ?? '';\n    const result = await minterClient.mintV2([{\n           users: [{\n                     etherKey: tokenReceiverAddress.toLowerCase(),\n                     tokens: [{\n                                id: mintTokenIdv2,\n                                blueprint: mintBlueprintv2,\n                                // overriding royalties for specific token\n                                royalties: [{                                        \n                                        recipient: tokenReceiverAddress.toLowerCase(),\n                                        percentage: 3.5\n                                    }],\n                            }]\n                    }],\n                contractAddress: token_address.toLowerCase(),\n\n                // globally set royalties\n                royalties: [{\n                        recipient: tokenReceiverAddress.toLowerCase(),\n                        percentage: 4.0\n                    }]\n            }]\n    );\n    console.log(`Token minted: ${result}`);\n    setInventory(await client.getAssets({user: wallet, sell_orders: true}))\n  };\n\n  return (\n    <div>\n      <div>\n        Mint NFT:\n        <br/>\n        <label>\n          Token ID:\n          <input type=\"text\" value={mintTokenId} onChange={e => setMintTokenId(e.target.value)} />\n        </label>\n        <label>\n          Blueprint:\n          <input type=\"text\" value={mintBlueprint} onChange={e => setMintBlueprint(e.target.value)} />\n        </label>\n        <button onClick={mint}>Mint</button>\n      </div>\n      <div>\n        MintV2 - with Royalties NFT:\n        <br/>\n        <label>\n          Token ID:\n          <input type=\"text\" value={mintTokenIdv2} onChange={e => setMintTokenIdv2(e.target.value)} />\n        </label>\n        <label>\n          Blueprint:\n          <input type=\"text\" value={mintBlueprintv2} onChange={e => setMintBlueprintv2(e.target.value)} />\n        </label>\n        <button onClick={mintv2}>MintV2</button>\n      </div>\n      <br/>\n      <div>\n        Sell asset (create sell order):\n        <br/>\n        <label>\n          Amount (ETH):\n          <input type=\"text\" value={sellAmount} onChange={e => setSellAmount(e.target.value)} />\n        </label>\n        <label>\n          Token ID:\n          <input type=\"text\" value={sellTokenId} onChange={e => setSellTokenId(e.target.value)} />\n        </label>\n        <label>\n          Token Address:\n          <input type=\"text\" value={sellTokenAddress} onChange={e => setSellTokenAddress(e.target.value)} />\n        </label>\n        <button onClick={sellNFT}>Sell</button>\n      </div>\n      <br/>\n      <div>\n        Cancel sell order:\n        <br/>\n        <label>\n          Order ID:\n          <input type=\"text\" value={sellCancelOrder} onChange={e => setSellCancelOrder(e.target.value)} />\n        </label>\n        <button onClick={cancelSell}>Cancel</button>\n      </div>\n      <br/><br/><br/>\n      <div>\n        Inventory:\n        {JSON.stringify(inventory.result)}\n      </div>\n    </div>\n  );\n}\n\nexport default Inventory;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
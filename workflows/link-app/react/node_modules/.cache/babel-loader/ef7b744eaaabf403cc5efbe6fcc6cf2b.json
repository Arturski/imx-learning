{"ast":null,"code":"var _jsxFileName = \"/Users/arthurfrancis/Documents/repo/imx-reactjs-integration-example/src/Bridging.tsx\",\n  _s = $RefreshSig$();\nimport { ERC721TokenType, ETHTokenType, ImmutableRollupStatus } from '@imtbl/imx-sdk';\nimport { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nrequire('dotenv').config();\nconst Bridging = _ref => {\n  _s();\n  let {\n    client,\n    link,\n    wallet\n  } = _ref;\n  // withdrawals\n  const [preparingWithdrawals, setPreparingWithdrawals] = useState(Object);\n  const [readyWithdrawals, setReadyWithdrawals] = useState(Object);\n  const [completedWithdrawals, setCompletedWithdrawals] = useState(Object);\n  // eth\n  const [depositAmount, setDepositAmount] = useState('');\n  const [prepareAmount, setPrepareAmount] = useState('');\n  // nft\n  const [depositTokenId, setDepositTokenId] = useState('');\n  const [depositTokenAddress, setDepositTokenAddress] = useState('');\n  const [prepareTokenId, setPrepareTokenId] = useState('');\n  const [prepareTokenAddress, setPrepareTokenAddress] = useState('');\n  const [completeTokenId, setCompleteTokenId] = useState('');\n  const [completeTokenAddress, setCompleteTokenAddress] = useState('');\n  useEffect(() => {\n    load();\n  }, []);\n  async function load() {\n    setPreparingWithdrawals(await client.getWithdrawals({\n      user: wallet,\n      rollup_status: ImmutableRollupStatus.included\n    })); // included in batch awaiting confirmation\n    setReadyWithdrawals(await client.getWithdrawals({\n      user: wallet,\n      rollup_status: ImmutableRollupStatus.confirmed,\n      withdrawn_to_wallet: false\n    })); // confirmed on-chain in a batch and ready to be withdrawn\n    setCompletedWithdrawals(await client.getWithdrawals({\n      user: wallet,\n      withdrawn_to_wallet: true\n    })); // confirmed on-chain in a batch and already withdrawn to L1 wallet\n  }\n  ;\n\n  // deposit an NFT\n  async function depositNFT() {\n    await link.deposit({\n      type: ERC721TokenType.ERC721,\n      tokenId: depositTokenId,\n      tokenAddress: depositTokenAddress\n    });\n  }\n  ;\n\n  // deposit eth\n  async function depositETH() {\n    await link.deposit({\n      type: ETHTokenType.ETH,\n      amount: depositAmount\n    });\n  }\n  ;\n\n  // prepare an NFT withdrawal\n  async function prepareWithdrawalNFT() {\n    await link.prepareWithdrawal({\n      type: ERC721TokenType.ERC721,\n      tokenId: prepareTokenId,\n      tokenAddress: prepareTokenAddress\n    });\n  }\n  ;\n\n  // prepare an eth withdrawal\n  async function prepareWithdrawalETH() {\n    await link.prepareWithdrawal({\n      type: ETHTokenType.ETH,\n      amount: prepareAmount\n    });\n  }\n  ;\n\n  // complete an NFT withdrawal\n  async function completeWithdrawalNFT() {\n    await link.completeWithdrawal({\n      type: ERC721TokenType.ERC721,\n      tokenId: completeTokenId,\n      tokenAddress: completeTokenAddress\n    });\n  }\n  ;\n\n  // complete an eth withdrawal\n  async function completeWithdrawalETH() {\n    await link.completeWithdrawal({\n      type: ETHTokenType.ETH\n    });\n  }\n  ;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"ETH:\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 14\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Deposit ETH:\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Amount (ETH):\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: depositAmount,\n            onChange: e => setDepositAmount(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: depositETH,\n          children: \"Deposit ETH\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 14\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Prepare ETH for withdrawal (submit to be rolled up and confirmed on chain in the next batch):\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Amount (ETH):\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: prepareAmount,\n            onChange: e => setPrepareAmount(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: prepareWithdrawalETH,\n          children: \"Prepare ETH Withdrawal\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 14\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Complete ETH withdrawal (withdraws entire eth balance that is ready for withdrawal to L1 wallet):\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: completeWithdrawalETH,\n          children: \"Complete ETH Withdrawal\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"ERC721:\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 14\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Deposit NFT:\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Token ID:\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: depositTokenId,\n            onChange: e => setDepositTokenId(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Token Address:\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: depositTokenAddress,\n            onChange: e => setDepositTokenAddress(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: depositNFT,\n          children: \"Deposit NFT\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 14\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Prepare NFT for withdrawal (submit to be rolled up and confirmed on chain in the next batch):\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Token ID:\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: prepareTokenId,\n            onChange: e => setPrepareTokenId(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Token Address:\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: prepareTokenAddress,\n            onChange: e => setPrepareTokenAddress(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: prepareWithdrawalNFT,\n          children: \"Prepare NFT Withdrawal\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 14\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Complete NFT withdrawal (withdraws single NFT that is ready for withdrawal to L1 wallet):\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Token ID:\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: completeTokenId,\n            onChange: e => setCompleteTokenId(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Token Address:\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: completeTokenAddress,\n            onChange: e => setCompleteTokenAddress(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: completeWithdrawalNFT,\n          children: \"Complete NFT Withdrawal\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 12\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Withdrawals being prepared:\", JSON.stringify(preparingWithdrawals)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 12\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Ready for withdrawal:\", JSON.stringify(readyWithdrawals)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 12\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Withdrawn to wallet:\", JSON.stringify(completedWithdrawals)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 5\n  }, this);\n};\n_s(Bridging, \"g9uZ+yVAhV+eOAvk6Lun2rwz+3Q=\");\n_c = Bridging;\nexport default Bridging;\nvar _c;\n$RefreshReg$(_c, \"Bridging\");","map":{"version":3,"names":["ERC721TokenType","ETHTokenType","ImmutableRollupStatus","useEffect","useState","require","config","Bridging","client","link","wallet","preparingWithdrawals","setPreparingWithdrawals","Object","readyWithdrawals","setReadyWithdrawals","completedWithdrawals","setCompletedWithdrawals","depositAmount","setDepositAmount","prepareAmount","setPrepareAmount","depositTokenId","setDepositTokenId","depositTokenAddress","setDepositTokenAddress","prepareTokenId","setPrepareTokenId","prepareTokenAddress","setPrepareTokenAddress","completeTokenId","setCompleteTokenId","completeTokenAddress","setCompleteTokenAddress","load","getWithdrawals","user","rollup_status","included","confirmed","withdrawn_to_wallet","depositNFT","deposit","type","ERC721","tokenId","tokenAddress","depositETH","ETH","amount","prepareWithdrawalNFT","prepareWithdrawal","prepareWithdrawalETH","completeWithdrawalNFT","completeWithdrawal","completeWithdrawalETH","e","target","value","JSON","stringify"],"sources":["/Users/arthurfrancis/Documents/repo/imx-reactjs-integration-example/src/Bridging.tsx"],"sourcesContent":["\nimport { Link, ImmutableXClient, ImmutableMethodResults, ERC721TokenType, ETHTokenType, ImmutableRollupStatus  } from '@imtbl/imx-sdk';\nimport { useEffect, useState } from 'react';\nrequire('dotenv').config();\n\ninterface BridgingProps {\n  client: ImmutableXClient,\n  link: Link,\n  wallet: string\n}\n\nconst Bridging = ({client, link, wallet}: BridgingProps) => {\n  // withdrawals\n  const [preparingWithdrawals, setPreparingWithdrawals] = useState<ImmutableMethodResults.ImmutableGetWithdrawalsResult>(Object);\n  const [readyWithdrawals, setReadyWithdrawals] = useState<ImmutableMethodResults.ImmutableGetWithdrawalsResult>(Object);\n  const [completedWithdrawals, setCompletedWithdrawals] = useState<ImmutableMethodResults.ImmutableGetWithdrawalsResult>(Object);\n  // eth\n  const [depositAmount, setDepositAmount] = useState('');\n  const [prepareAmount, setPrepareAmount] = useState('');\n  // nft\n  const [depositTokenId, setDepositTokenId] = useState('');\n  const [depositTokenAddress, setDepositTokenAddress] = useState('');\n  const [prepareTokenId, setPrepareTokenId] = useState('');\n  const [prepareTokenAddress, setPrepareTokenAddress] = useState('');\n  const [completeTokenId, setCompleteTokenId] = useState('');\n  const [completeTokenAddress, setCompleteTokenAddress] = useState('');\n\n  useEffect(() => {\n    load()\n  }, [])\n\n  async function load(): Promise<void> {\n    setPreparingWithdrawals(await client.getWithdrawals({\n      user: wallet,\n      rollup_status: ImmutableRollupStatus.included\n    })) // included in batch awaiting confirmation\n    setReadyWithdrawals(await client.getWithdrawals({\n      user: wallet,\n      rollup_status: ImmutableRollupStatus.confirmed,\n      withdrawn_to_wallet: false\n    })) // confirmed on-chain in a batch and ready to be withdrawn\n    setCompletedWithdrawals(await client.getWithdrawals({\n      user: wallet,\n      withdrawn_to_wallet: true\n    })) // confirmed on-chain in a batch and already withdrawn to L1 wallet\n  };\n\n  // deposit an NFT\n  async function depositNFT() {\n    await link.deposit({\n      type: ERC721TokenType.ERC721,\n      tokenId: depositTokenId,\n      tokenAddress: depositTokenAddress\n    })\n  };\n\n  // deposit eth\n  async function depositETH() {\n    await link.deposit({\n      type: ETHTokenType.ETH,\n      amount: depositAmount,\n    })\n  };\n\n  // prepare an NFT withdrawal\n  async function prepareWithdrawalNFT() {\n    await link.prepareWithdrawal({\n      type: ERC721TokenType.ERC721,\n      tokenId: prepareTokenId,\n      tokenAddress: prepareTokenAddress\n    })\n  };\n\n  // prepare an eth withdrawal\n  async function prepareWithdrawalETH() {\n    await link.prepareWithdrawal({\n      type: ETHTokenType.ETH,\n      amount: prepareAmount,\n    })\n  };\n\n  // complete an NFT withdrawal\n  async function completeWithdrawalNFT() {\n    await link.completeWithdrawal({\n      type: ERC721TokenType.ERC721,\n      tokenId: completeTokenId,\n      tokenAddress: completeTokenAddress\n    })\n  };\n\n  // complete an eth withdrawal\n  async function completeWithdrawalETH() {\n    await link.completeWithdrawal({\n      type: ETHTokenType.ETH,\n    })\n  };\n\n  return (\n    <div>\n      <div>\n        ETH:\n        <br/><br/>\n        <div>\n          Deposit ETH:\n          <br/>\n          <label>\n            Amount (ETH):\n            <input type=\"text\" value={depositAmount} onChange={e => setDepositAmount(e.target.value)} />\n          </label>\n          <button onClick={depositETH}>Deposit ETH</button>\n        </div>\n        <br/><br/>\n        <div>\n          Prepare ETH for withdrawal (submit to be rolled up and confirmed on chain in the next batch):\n          <br/>\n          <label>\n            Amount (ETH):\n            <input type=\"text\" value={prepareAmount} onChange={e => setPrepareAmount(e.target.value)} />\n          </label>\n          <button onClick={prepareWithdrawalETH}>Prepare ETH Withdrawal</button>\n        </div>\n        <br/><br/>\n        <div>\n          Complete ETH withdrawal (withdraws entire eth balance that is ready for withdrawal to L1 wallet):\n          <br/>\n          <button onClick={completeWithdrawalETH}>Complete ETH Withdrawal</button>\n        </div>\n      </div>\n      <br/>\n      <div>\n        ERC721:\n        <br/><br/>\n        <div>\n          Deposit NFT:\n          <br/>\n          <label>\n            Token ID:\n            <input type=\"text\" value={depositTokenId} onChange={e => setDepositTokenId(e.target.value)} />\n          </label>\n          <label>\n            Token Address:\n            <input type=\"text\" value={depositTokenAddress} onChange={e => setDepositTokenAddress(e.target.value)} />\n          </label>\n          <button onClick={depositNFT}>Deposit NFT</button>\n        </div>\n        <br/><br/>\n        <div>\n          Prepare NFT for withdrawal (submit to be rolled up and confirmed on chain in the next batch):\n          <br/>\n          <label>\n            Token ID:\n            <input type=\"text\" value={prepareTokenId} onChange={e => setPrepareTokenId(e.target.value)} />\n          </label>\n          <label>\n            Token Address:\n            <input type=\"text\" value={prepareTokenAddress} onChange={e => setPrepareTokenAddress(e.target.value)} />\n          </label>\n          <button onClick={prepareWithdrawalNFT}>Prepare NFT Withdrawal</button>\n        </div>\n        <br/><br/>\n        <div>\n          Complete NFT withdrawal (withdraws single NFT that is ready for withdrawal to L1 wallet):\n          <br/>\n          <label>\n            Token ID:\n            <input type=\"text\" value={completeTokenId} onChange={e => setCompleteTokenId(e.target.value)} />\n          </label>\n          <label>\n            Token Address:\n            <input type=\"text\" value={completeTokenAddress} onChange={e => setCompleteTokenAddress(e.target.value)} />\n          </label>\n          <button onClick={completeWithdrawalNFT}>Complete NFT Withdrawal</button>\n        </div>\n      </div>\n      <br/><br/><br/>\n      <div>\n        Withdrawals being prepared:\n        {JSON.stringify(preparingWithdrawals)}\n      </div>\n      <br/><br/>\n      <div>\n        Ready for withdrawal:\n        {JSON.stringify(readyWithdrawals)}\n      </div>\n      <br/><br/>\n      <div>\n        Withdrawn to wallet:\n        {JSON.stringify(completedWithdrawals)}\n      </div>\n    </div>\n  );\n}\n\nexport default Bridging;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
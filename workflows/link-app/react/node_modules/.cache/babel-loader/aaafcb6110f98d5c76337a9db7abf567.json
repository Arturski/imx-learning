{"ast":null,"code":"import * as RS from './ReadonlySet';\n/**\n * @category instances\n * @since 2.0.0\n */\nexport var getShow = RS.getShow;\n/**\n * @since 2.0.0\n */\nexport var empty = new Set();\n/**\n * @category constructors\n * @since 2.0.0\n */\n// tslint:disable-next-line: readonly-array\nexport var toArray = RS.toReadonlyArray;\n/**\n * @category instances\n * @since 2.0.0\n */\nexport var getEq = RS.getEq;\n/**\n * @since 2.0.0\n */\nexport var some = RS.some;\n/**\n * `map` can be used to turn functions `(a: A) => B` into functions `(fa: F<A>) => F<B>` whose argument and return types\n * use the type constructor `F` to represent some computational context.\n *\n * @category combinators\n * @since 2.0.0\n */\nexport var map = RS.map;\n/**\n * @since 2.0.0\n */\nexport var every = RS.every;\n/**\n * Composes computations in sequence, using the return value of one computation to determine the next computation.\n *\n * @category combinators\n * @since 2.0.0\n */\nexport var chain = RS.chain;\n// TODO: remove non-curried overloading in v3\n/**\n * `true` if and only if every element in the first set is an element of the second set\n *\n * @since 2.0.0\n */\nexport var subset = RS.isSubset;\nexport function filter(predicate) {\n  return RS.filter(predicate);\n}\nexport function partition(predicate) {\n  return RS.partition(predicate);\n}\n// TODO: remove non-curried overloading in v3\n/**\n * Test if a value is a member of a set\n *\n * @since 2.0.0\n */\nexport var elem = RS.elem;\n// TODO: remove non-curried overloading in v3\n/**\n * Form the union of two sets\n *\n * @category combinators\n * @since 2.0.0\n */\nexport var union = RS.union;\n// TODO: remove non-curried overloading in v3\n/**\n * The set of elements which are in both the first and second set\n *\n * @category combinators\n * @since 2.0.0\n */\nexport var intersection = RS.intersection;\n/**\n * @since 2.0.0\n */\nexport var partitionMap = RS.partitionMap;\n// TODO: remove non-curried overloading in v3\n/**\n * Form the set difference (`x` - `y`)\n *\n * @example\n * import { difference } from 'fp-ts/Set'\n * import { eqNumber } from 'fp-ts/Eq'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(pipe(new Set([1, 2]), difference(eqNumber)(new Set([1, 3]))), new Set([2]))\n *\n * @category combinators\n * @since 2.0.0\n */\nexport var difference = RS.difference;\n/**\n * @category instances\n * @since 2.0.0\n */\nexport var getUnionMonoid = RS.getUnionMonoid;\n/**\n * @category instances\n * @since 2.0.0\n */\nexport var getIntersectionSemigroup = RS.getIntersectionSemigroup;\n/**\n * @since 2.0.0\n */\nexport var reduce = RS.reduce;\n/**\n * @since 2.0.0\n */\nexport var foldMap = RS.foldMap;\n/**\n * Create a set with one element\n *\n * @category constructors\n * @since 2.0.0\n */\nexport var singleton = RS.singleton;\n/**\n * Insert a value into a set\n *\n * @category combinators\n * @since 2.0.0\n */\nexport var insert = RS.insert;\n/**\n * Delete a value from a set\n *\n * @category combinators\n * @since 2.0.0\n */\nexport var remove = RS.remove;\n/**\n * Checks an element is a member of a set;\n * If yes, removes the value from the set\n * If no, inserts the value to the set\n *\n * @category combinators\n * @since 2.5.0\n */\nexport function toggle(E) {\n  var elemE = elem(E);\n  var removeE = remove(E);\n  var insertE = insert(E);\n  return function (a) {\n    return function (set) {\n      return (elemE(a, set) ? removeE : insertE)(a)(set);\n    };\n  };\n}\n/**\n * Create a set from an array\n *\n * @category constructors\n * @since 2.0.0\n */\n// tslint:disable-next-line: readonly-array\nexport var fromArray = RS.fromArray;\n/**\n * @category combinators\n * @since 2.0.0\n */\nexport var compact = RS.compact;\n/**\n * @since 2.0.0\n */\nexport var separate = RS.separate;\n/**\n * @category combinators\n * @since 2.0.0\n */\nexport var filterMap = RS.filterMap;","map":{"version":3,"names":["RS","getShow","empty","Set","toArray","toReadonlyArray","getEq","some","map","every","chain","subset","isSubset","filter","predicate","partition","elem","union","intersection","partitionMap","difference","getUnionMonoid","getIntersectionSemigroup","reduce","foldMap","singleton","insert","remove","toggle","E","elemE","removeE","insertE","a","set","fromArray","compact","separate","filterMap"],"sources":["/Users/arthurfrancis/Documents/repo/imx-learning/workflows/link-app/react/node_modules/fp-ts/es6/Set.js"],"sourcesContent":["import * as RS from './ReadonlySet';\n/**\n * @category instances\n * @since 2.0.0\n */\nexport var getShow = RS.getShow;\n/**\n * @since 2.0.0\n */\nexport var empty = new Set();\n/**\n * @category constructors\n * @since 2.0.0\n */\n// tslint:disable-next-line: readonly-array\nexport var toArray = RS.toReadonlyArray;\n/**\n * @category instances\n * @since 2.0.0\n */\nexport var getEq = RS.getEq;\n/**\n * @since 2.0.0\n */\nexport var some = RS.some;\n/**\n * `map` can be used to turn functions `(a: A) => B` into functions `(fa: F<A>) => F<B>` whose argument and return types\n * use the type constructor `F` to represent some computational context.\n *\n * @category combinators\n * @since 2.0.0\n */\nexport var map = RS.map;\n/**\n * @since 2.0.0\n */\nexport var every = RS.every;\n/**\n * Composes computations in sequence, using the return value of one computation to determine the next computation.\n *\n * @category combinators\n * @since 2.0.0\n */\nexport var chain = RS.chain;\n// TODO: remove non-curried overloading in v3\n/**\n * `true` if and only if every element in the first set is an element of the second set\n *\n * @since 2.0.0\n */\nexport var subset = RS.isSubset;\nexport function filter(predicate) {\n    return RS.filter(predicate);\n}\nexport function partition(predicate) {\n    return RS.partition(predicate);\n}\n// TODO: remove non-curried overloading in v3\n/**\n * Test if a value is a member of a set\n *\n * @since 2.0.0\n */\nexport var elem = RS.elem;\n// TODO: remove non-curried overloading in v3\n/**\n * Form the union of two sets\n *\n * @category combinators\n * @since 2.0.0\n */\nexport var union = RS.union;\n// TODO: remove non-curried overloading in v3\n/**\n * The set of elements which are in both the first and second set\n *\n * @category combinators\n * @since 2.0.0\n */\nexport var intersection = RS.intersection;\n/**\n * @since 2.0.0\n */\nexport var partitionMap = RS.partitionMap;\n// TODO: remove non-curried overloading in v3\n/**\n * Form the set difference (`x` - `y`)\n *\n * @example\n * import { difference } from 'fp-ts/Set'\n * import { eqNumber } from 'fp-ts/Eq'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(pipe(new Set([1, 2]), difference(eqNumber)(new Set([1, 3]))), new Set([2]))\n *\n * @category combinators\n * @since 2.0.0\n */\nexport var difference = RS.difference;\n/**\n * @category instances\n * @since 2.0.0\n */\nexport var getUnionMonoid = RS.getUnionMonoid;\n/**\n * @category instances\n * @since 2.0.0\n */\nexport var getIntersectionSemigroup = RS.getIntersectionSemigroup;\n/**\n * @since 2.0.0\n */\nexport var reduce = RS.reduce;\n/**\n * @since 2.0.0\n */\nexport var foldMap = RS.foldMap;\n/**\n * Create a set with one element\n *\n * @category constructors\n * @since 2.0.0\n */\nexport var singleton = RS.singleton;\n/**\n * Insert a value into a set\n *\n * @category combinators\n * @since 2.0.0\n */\nexport var insert = RS.insert;\n/**\n * Delete a value from a set\n *\n * @category combinators\n * @since 2.0.0\n */\nexport var remove = RS.remove;\n/**\n * Checks an element is a member of a set;\n * If yes, removes the value from the set\n * If no, inserts the value to the set\n *\n * @category combinators\n * @since 2.5.0\n */\nexport function toggle(E) {\n    var elemE = elem(E);\n    var removeE = remove(E);\n    var insertE = insert(E);\n    return function (a) { return function (set) { return (elemE(a, set) ? removeE : insertE)(a)(set); }; };\n}\n/**\n * Create a set from an array\n *\n * @category constructors\n * @since 2.0.0\n */\n// tslint:disable-next-line: readonly-array\nexport var fromArray = RS.fromArray;\n/**\n * @category combinators\n * @since 2.0.0\n */\nexport var compact = RS.compact;\n/**\n * @since 2.0.0\n */\nexport var separate = RS.separate;\n/**\n * @category combinators\n * @since 2.0.0\n */\nexport var filterMap = RS.filterMap;\n"],"mappings":"AAAA,OAAO,KAAKA,EAAE,MAAM,eAAe;AACnC;AACA;AACA;AACA;AACA,OAAO,IAAIC,OAAO,GAAGD,EAAE,CAACC,OAAO;AAC/B;AACA;AACA;AACA,OAAO,IAAIC,KAAK,GAAG,IAAIC,GAAG,EAAE;AAC5B;AACA;AACA;AACA;AACA;AACA,OAAO,IAAIC,OAAO,GAAGJ,EAAE,CAACK,eAAe;AACvC;AACA;AACA;AACA;AACA,OAAO,IAAIC,KAAK,GAAGN,EAAE,CAACM,KAAK;AAC3B;AACA;AACA;AACA,OAAO,IAAIC,IAAI,GAAGP,EAAE,CAACO,IAAI;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAIC,GAAG,GAAGR,EAAE,CAACQ,GAAG;AACvB;AACA;AACA;AACA,OAAO,IAAIC,KAAK,GAAGT,EAAE,CAACS,KAAK;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAIC,KAAK,GAAGV,EAAE,CAACU,KAAK;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAIC,MAAM,GAAGX,EAAE,CAACY,QAAQ;AAC/B,OAAO,SAASC,MAAM,CAACC,SAAS,EAAE;EAC9B,OAAOd,EAAE,CAACa,MAAM,CAACC,SAAS,CAAC;AAC/B;AACA,OAAO,SAASC,SAAS,CAACD,SAAS,EAAE;EACjC,OAAOd,EAAE,CAACe,SAAS,CAACD,SAAS,CAAC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAIE,IAAI,GAAGhB,EAAE,CAACgB,IAAI;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAIC,KAAK,GAAGjB,EAAE,CAACiB,KAAK;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAIC,YAAY,GAAGlB,EAAE,CAACkB,YAAY;AACzC;AACA;AACA;AACA,OAAO,IAAIC,YAAY,GAAGnB,EAAE,CAACmB,YAAY;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAIC,UAAU,GAAGpB,EAAE,CAACoB,UAAU;AACrC;AACA;AACA;AACA;AACA,OAAO,IAAIC,cAAc,GAAGrB,EAAE,CAACqB,cAAc;AAC7C;AACA;AACA;AACA;AACA,OAAO,IAAIC,wBAAwB,GAAGtB,EAAE,CAACsB,wBAAwB;AACjE;AACA;AACA;AACA,OAAO,IAAIC,MAAM,GAAGvB,EAAE,CAACuB,MAAM;AAC7B;AACA;AACA;AACA,OAAO,IAAIC,OAAO,GAAGxB,EAAE,CAACwB,OAAO;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAIC,SAAS,GAAGzB,EAAE,CAACyB,SAAS;AACnC;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAIC,MAAM,GAAG1B,EAAE,CAAC0B,MAAM;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAIC,MAAM,GAAG3B,EAAE,CAAC2B,MAAM;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,MAAM,CAACC,CAAC,EAAE;EACtB,IAAIC,KAAK,GAAGd,IAAI,CAACa,CAAC,CAAC;EACnB,IAAIE,OAAO,GAAGJ,MAAM,CAACE,CAAC,CAAC;EACvB,IAAIG,OAAO,GAAGN,MAAM,CAACG,CAAC,CAAC;EACvB,OAAO,UAAUI,CAAC,EAAE;IAAE,OAAO,UAAUC,GAAG,EAAE;MAAE,OAAO,CAACJ,KAAK,CAACG,CAAC,EAAEC,GAAG,CAAC,GAAGH,OAAO,GAAGC,OAAO,EAAEC,CAAC,CAAC,CAACC,GAAG,CAAC;IAAE,CAAC;EAAE,CAAC;AAC1G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAIC,SAAS,GAAGnC,EAAE,CAACmC,SAAS;AACnC;AACA;AACA;AACA;AACA,OAAO,IAAIC,OAAO,GAAGpC,EAAE,CAACoC,OAAO;AAC/B;AACA;AACA;AACA,OAAO,IAAIC,QAAQ,GAAGrC,EAAE,CAACqC,QAAQ;AACjC;AACA;AACA;AACA;AACA,OAAO,IAAIC,SAAS,GAAGtC,EAAE,CAACsC,SAAS"},"metadata":{},"sourceType":"module"}
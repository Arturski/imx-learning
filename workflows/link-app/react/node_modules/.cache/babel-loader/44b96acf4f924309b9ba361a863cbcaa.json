{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport EventEmitter from \"events\";\nimport { ethers } from \"ethers\";\nimport { version } from \"./_version\";\nconst logger = new ethers.utils.Logger(version);\n/*\nfunction getBlockTag(tag) {\n    if (tag == null) { return \"latest\"; }\n    if (tag === \"earliest\" || tag === \"latest\" || tag === \"pending\") {\n        return tag;\n    }\n    return ethers.utils.hexValue(tag)\n}\n*/\nexport class Eip1193Bridge extends EventEmitter {\n  constructor(signer, provider) {\n    super();\n    ethers.utils.defineReadOnly(this, \"signer\", signer);\n    ethers.utils.defineReadOnly(this, \"provider\", provider || null);\n  }\n  request(request) {\n    return this.send(request.method, request.params || []);\n  }\n  send(method, params) {\n    return __awaiter(this, void 0, void 0, function* () {\n      function throwUnsupported(message) {\n        return logger.throwError(message, ethers.utils.Logger.errors.UNSUPPORTED_OPERATION, {\n          method: method,\n          params: params\n        });\n      }\n      let coerce = value => value;\n      switch (method) {\n        case \"eth_gasPrice\":\n          {\n            const result = yield this.provider.getGasPrice();\n            return result.toHexString();\n          }\n        case \"eth_accounts\":\n          {\n            const result = [];\n            if (this.signer) {\n              const address = yield this.signer.getAddress();\n              result.push(address);\n            }\n            return result;\n          }\n        case \"eth_blockNumber\":\n          {\n            return yield this.provider.getBlockNumber();\n          }\n        case \"eth_chainId\":\n          {\n            const result = yield this.provider.getNetwork();\n            return ethers.utils.hexValue(result.chainId);\n          }\n        case \"eth_getBalance\":\n          {\n            const result = yield this.provider.getBalance(params[0], params[1]);\n            return result.toHexString();\n          }\n        case \"eth_getStorageAt\":\n          {\n            return this.provider.getStorageAt(params[0], params[1], params[2]);\n          }\n        case \"eth_getTransactionCount\":\n          {\n            const result = yield this.provider.getTransactionCount(params[0], params[1]);\n            return ethers.utils.hexValue(result);\n          }\n        case \"eth_getBlockTransactionCountByHash\":\n        case \"eth_getBlockTransactionCountByNumber\":\n          {\n            const result = yield this.provider.getBlock(params[0]);\n            return ethers.utils.hexValue(result.transactions.length);\n          }\n        case \"eth_getCode\":\n          {\n            const result = yield this.provider.getCode(params[0], params[1]);\n            return result;\n          }\n        case \"eth_sendRawTransaction\":\n          {\n            return yield this.provider.sendTransaction(params[0]);\n          }\n        case \"eth_call\":\n          {\n            const req = ethers.providers.JsonRpcProvider.hexlifyTransaction(params[0]);\n            return yield this.provider.call(req, params[1]);\n          }\n        case \"estimateGas\":\n          {\n            if (params[1] && params[1] !== \"latest\") {\n              throwUnsupported(\"estimateGas does not support blockTag\");\n            }\n            const req = ethers.providers.JsonRpcProvider.hexlifyTransaction(params[0]);\n            const result = yield this.provider.estimateGas(req);\n            return result.toHexString();\n          }\n        // @TODO: Transform? No uncles?\n        case \"eth_getBlockByHash\":\n        case \"eth_getBlockByNumber\":\n          {\n            if (params[1]) {\n              return yield this.provider.getBlockWithTransactions(params[0]);\n            } else {\n              return yield this.provider.getBlock(params[0]);\n            }\n          }\n        case \"eth_getTransactionByHash\":\n          {\n            return yield this.provider.getTransaction(params[0]);\n          }\n        case \"eth_getTransactionReceipt\":\n          {\n            return yield this.provider.getTransactionReceipt(params[0]);\n          }\n        case \"eth_sign\":\n          {\n            if (!this.signer) {\n              return throwUnsupported(\"eth_sign requires an account\");\n            }\n            const address = yield this.signer.getAddress();\n            if (address !== ethers.utils.getAddress(params[0])) {\n              logger.throwArgumentError(\"account mismatch or account not found\", \"params[0]\", params[0]);\n            }\n            return this.signer.signMessage(ethers.utils.arrayify(params[1]));\n          }\n        case \"eth_sendTransaction\":\n          {\n            if (!this.signer) {\n              return throwUnsupported(\"eth_sendTransaction requires an account\");\n            }\n            const req = ethers.providers.JsonRpcProvider.hexlifyTransaction(params[0]);\n            const tx = yield this.signer.sendTransaction(req);\n            return tx.hash;\n          }\n        case \"eth_getUncleCountByBlockHash\":\n        case \"eth_getUncleCountByBlockNumber\":\n          {\n            coerce = ethers.utils.hexValue;\n            break;\n          }\n        case \"eth_getTransactionByBlockHashAndIndex\":\n        case \"eth_getTransactionByBlockNumberAndIndex\":\n        case \"eth_getUncleByBlockHashAndIndex\":\n        case \"eth_getUncleByBlockNumberAndIndex\":\n        case \"eth_newFilter\":\n        case \"eth_newBlockFilter\":\n        case \"eth_newPendingTransactionFilter\":\n        case \"eth_uninstallFilter\":\n        case \"eth_getFilterChanges\":\n        case \"eth_getFilterLogs\":\n        case \"eth_getLogs\":\n          break;\n      }\n      // If our provider supports send, maybe it can do a better job?\n      if (this.provider.send) {\n        const result = yield this.provider.send(method, params);\n        return coerce(result);\n      }\n      return throwUnsupported(`unsupported method: ${method}`);\n    });\n  }\n}","map":{"version":3,"mappings":"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","names":["EventEmitter","ethers","version","logger","utils","Logger","Eip1193Bridge","constructor","signer","provider","defineReadOnly","request","send","method","params","throwUnsupported","message","throwError","errors","UNSUPPORTED_OPERATION","coerce","value","result","getGasPrice","toHexString","address","getAddress","push","getBlockNumber","getNetwork","hexValue","chainId","getBalance","getStorageAt","getTransactionCount","getBlock","transactions","length","getCode","sendTransaction","req","providers","JsonRpcProvider","hexlifyTransaction","call","estimateGas","getBlockWithTransactions","getTransaction","getTransactionReceipt","throwArgumentError","signMessage","arrayify","tx","hash"],"sourceRoot":"","sources":["../src.ts/eip1193-bridge.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}
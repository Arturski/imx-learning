{"ast":null,"code":"/**\n * Applies the NOR operation on the given bits. Returns one bit.\n * Throws if less than 2 bits are given.\n *\n * @example\n * reduceNor([1, 0, 0, 0, 1, 1, 0, 1]) => 0\n *\n * @param {Array} bits input data\n * @return {Integer} NOR bits\n */\nexport default (function (bits) {\n  if (bits.length < 2) throw new RangeError('Not enough bits.');\n  var result = bits[0];\n  for (var i = 1; i < bits.length; i++) result = (result | bits[i]) ^ 1;\n  return result;\n});","map":{"version":3,"names":["bits","length","RangeError","result","i"],"sources":["/Users/arthurfrancis/Documents/repo/imx-reactjs-integration-example/node_modules/bitwise/esm/bits/reduce-nor.js"],"sourcesContent":["/**\n * Applies the NOR operation on the given bits. Returns one bit.\n * Throws if less than 2 bits are given.\n *\n * @example\n * reduceNor([1, 0, 0, 0, 1, 1, 0, 1]) => 0\n *\n * @param {Array} bits input data\n * @return {Integer} NOR bits\n */\nexport default (function (bits) {\n    if (bits.length < 2)\n        throw new RangeError('Not enough bits.');\n    var result = bits[0];\n    for (var i = 1; i < bits.length; i++)\n        result = ((result | bits[i]) ^ 1);\n    return result;\n});\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,UAAUA,IAAI,EAAE;EAC5B,IAAIA,IAAI,CAACC,MAAM,GAAG,CAAC,EACf,MAAM,IAAIC,UAAU,CAAC,kBAAkB,CAAC;EAC5C,IAAIC,MAAM,GAAGH,IAAI,CAAC,CAAC,CAAC;EACpB,KAAK,IAAII,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,IAAI,CAACC,MAAM,EAAEG,CAAC,EAAE,EAChCD,MAAM,GAAI,CAACA,MAAM,GAAGH,IAAI,CAACI,CAAC,CAAC,IAAI,CAAE;EACrC,OAAOD,MAAM;AACjB,CAAC"},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { AlchemyProvider } from '@ethersproject/providers';\nimport { Wallet } from '@ethersproject/wallet';\nimport { createStarkSigner } from '@imtbl/core-sdk';\nimport { requireEnvironmentVariable } from './utils';\n\n/**\n * Generate a ethSigner/starkSigner object from a private key.\n */\nexport const generateWalletConnection = async ethNetwork => {\n  const userPrivateKey = requireEnvironmentVariable('PRIVATE_KEY');\n  const userStarkKey = requireEnvironmentVariable('STARK_PRIVATE_KEY');\n  const alchemyKey = requireEnvironmentVariable('ALCHEMY_API_KEY');\n\n  // connect provider\n  const provider = new AlchemyProvider(ethNetwork, alchemyKey);\n\n  // L1 credentials\n  const ethSigner = new Wallet(userPrivateKey).connect(provider);\n\n  // L2 credentials\n  const starkSigner = createStarkSigner(userStarkKey);\n  return {\n    ethSigner,\n    starkSigner\n  };\n};","map":{"version":3,"names":["AlchemyProvider","Wallet","createStarkSigner","requireEnvironmentVariable","generateWalletConnection","ethNetwork","userPrivateKey","userStarkKey","alchemyKey","provider","ethSigner","connect","starkSigner"],"sources":["/Users/arthurfrancis/Documents/repo/imx-reactjs-integration-example/src/libs/walletConnection.ts"],"sourcesContent":["import { AlchemyProvider } from '@ethersproject/providers';\nimport { Wallet } from '@ethersproject/wallet';\nimport { createStarkSigner, WalletConnection } from '@imtbl/core-sdk';\nimport { requireEnvironmentVariable } from './utils';\n\n/**\n * Generate a ethSigner/starkSigner object from a private key.\n */\nexport const generateWalletConnection = async (\n  ethNetwork: string,\n): Promise<WalletConnection> => {\n  const userPrivateKey = requireEnvironmentVariable('PRIVATE_KEY');\n  const userStarkKey = requireEnvironmentVariable('STARK_PRIVATE_KEY')\n  const alchemyKey = requireEnvironmentVariable('ALCHEMY_API_KEY');\n\n  // connect provider\n  const provider = new AlchemyProvider(ethNetwork, alchemyKey);\n\n  // L1 credentials\n  const ethSigner = new Wallet(userPrivateKey).connect(provider);\n\n  // L2 credentials\n  const starkSigner = createStarkSigner(userStarkKey);\n\n  return {\n    ethSigner,\n    starkSigner,\n  };\n};\n"],"mappings":"AAAA,SAASA,eAAe,QAAQ,0BAA0B;AAC1D,SAASC,MAAM,QAAQ,uBAAuB;AAC9C,SAASC,iBAAiB,QAA0B,iBAAiB;AACrE,SAASC,0BAA0B,QAAQ,SAAS;;AAEpD;AACA;AACA;AACA,OAAO,MAAMC,wBAAwB,GAAG,MACtCC,UAAkB,IACY;EAC9B,MAAMC,cAAc,GAAGH,0BAA0B,CAAC,aAAa,CAAC;EAChE,MAAMI,YAAY,GAAGJ,0BAA0B,CAAC,mBAAmB,CAAC;EACpE,MAAMK,UAAU,GAAGL,0BAA0B,CAAC,iBAAiB,CAAC;;EAEhE;EACA,MAAMM,QAAQ,GAAG,IAAIT,eAAe,CAACK,UAAU,EAAEG,UAAU,CAAC;;EAE5D;EACA,MAAME,SAAS,GAAG,IAAIT,MAAM,CAACK,cAAc,CAAC,CAACK,OAAO,CAACF,QAAQ,CAAC;;EAE9D;EACA,MAAMG,WAAW,GAAGV,iBAAiB,CAACK,YAAY,CAAC;EAEnD,OAAO;IACLG,SAAS;IACTE;EACF,CAAC;AACH,CAAC"},"metadata":{},"sourceType":"module"}
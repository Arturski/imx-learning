{"ast":null,"code":"import { p2 } from '../utilities';\nimport not from '../bits/not';\nimport read from './read';\n/**\n * Converts a section of a buffer to a signed integer.\n *\n * @example\n * // buffer 11110110\n * readUInt(buffer, 3, 5) => -10\n *\n * @param {Buffer} buffer the buffer to extract information from\n * @param {Number} length the length of the signed integer (in bits)\n * @param {Number} offset where to start (in bits)\n * @return {Number}\n */\nexport default (function (buffer, offset, length) {\n  if (offset === void 0) {\n    offset = 0;\n  }\n  if (length === void 0) {\n    length = 8;\n  }\n  var bits = read(buffer, offset, length);\n  if (bits[0] === 0) {\n    var result = 0;\n    for (var i = 0; i < length; i++) if (bits[i]) result += p2[length - i - 1];\n    return result;\n  } else {\n    var result = -1;\n    var inverted = not(bits);\n    for (var i = 0; i < length; i++) if (inverted[i]) result -= p2[length - i - 1];\n    return result;\n  }\n});","map":{"version":3,"names":["p2","not","read","buffer","offset","length","bits","result","i","inverted"],"sources":["/Users/arthurfrancis/Documents/repo/imx-reactjs-integration-example/node_modules/bitwise/esm/buffer/read-int.js"],"sourcesContent":["import { p2 } from '../utilities';\nimport not from '../bits/not';\nimport read from './read';\n/**\n * Converts a section of a buffer to a signed integer.\n *\n * @example\n * // buffer 11110110\n * readUInt(buffer, 3, 5) => -10\n *\n * @param {Buffer} buffer the buffer to extract information from\n * @param {Number} length the length of the signed integer (in bits)\n * @param {Number} offset where to start (in bits)\n * @return {Number}\n */\nexport default (function (buffer, offset, length) {\n    if (offset === void 0) { offset = 0; }\n    if (length === void 0) { length = 8; }\n    var bits = read(buffer, offset, length);\n    if (bits[0] === 0) {\n        var result = 0;\n        for (var i = 0; i < length; i++)\n            if (bits[i])\n                result += p2[length - i - 1];\n        return result;\n    }\n    else {\n        var result = -1;\n        var inverted = not(bits);\n        for (var i = 0; i < length; i++)\n            if (inverted[i])\n                result -= p2[length - i - 1];\n        return result;\n    }\n});\n"],"mappings":"AAAA,SAASA,EAAE,QAAQ,cAAc;AACjC,OAAOC,GAAG,MAAM,aAAa;AAC7B,OAAOC,IAAI,MAAM,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,UAAUC,MAAM,EAAEC,MAAM,EAAEC,MAAM,EAAE;EAC9C,IAAID,MAAM,KAAK,KAAK,CAAC,EAAE;IAAEA,MAAM,GAAG,CAAC;EAAE;EACrC,IAAIC,MAAM,KAAK,KAAK,CAAC,EAAE;IAAEA,MAAM,GAAG,CAAC;EAAE;EACrC,IAAIC,IAAI,GAAGJ,IAAI,CAACC,MAAM,EAAEC,MAAM,EAAEC,MAAM,CAAC;EACvC,IAAIC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,EAAE;IACf,IAAIC,MAAM,GAAG,CAAC;IACd,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,MAAM,EAAEG,CAAC,EAAE,EAC3B,IAAIF,IAAI,CAACE,CAAC,CAAC,EACPD,MAAM,IAAIP,EAAE,CAACK,MAAM,GAAGG,CAAC,GAAG,CAAC,CAAC;IACpC,OAAOD,MAAM;EACjB,CAAC,MACI;IACD,IAAIA,MAAM,GAAG,CAAC,CAAC;IACf,IAAIE,QAAQ,GAAGR,GAAG,CAACK,IAAI,CAAC;IACxB,KAAK,IAAIE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,MAAM,EAAEG,CAAC,EAAE,EAC3B,IAAIC,QAAQ,CAACD,CAAC,CAAC,EACXD,MAAM,IAAIP,EAAE,CAACK,MAAM,GAAGG,CAAC,GAAG,CAAC,CAAC;IACpC,OAAOD,MAAM;EACjB;AACJ,CAAC"},"metadata":{},"sourceType":"module"}
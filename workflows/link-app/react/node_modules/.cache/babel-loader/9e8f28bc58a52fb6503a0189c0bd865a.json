{"ast":null,"code":"\"use strict\";\n\nimport { ethers } from \"ethers\";\nimport scrypt from \"scrypt-js\";\nimport { version } from \"./_version\";\nconst logger = new ethers.utils.Logger(version);\nlet warned = false;\nexport class BrainWallet extends ethers.Wallet {\n  static _generate(username, password, legacy, progressCallback) {\n    if (!warned) {\n      logger.warn(\"Warning: using Brain Wallets should be considered insecure (this warning will not be repeated)\");\n      warned = true;\n    }\n    let usernameBytes = null;\n    let passwordBytes = null;\n    if (typeof username === 'string') {\n      logger.checkNormalize();\n      usernameBytes = ethers.utils.toUtf8Bytes(username.normalize('NFKC'));\n    } else {\n      usernameBytes = ethers.utils.arrayify(username);\n    }\n    if (typeof password === 'string') {\n      logger.checkNormalize();\n      passwordBytes = ethers.utils.toUtf8Bytes(password.normalize('NFKC'));\n    } else {\n      passwordBytes = ethers.utils.arrayify(password);\n    }\n    return scrypt.scrypt(passwordBytes, usernameBytes, 1 << 18, 8, 1, 32, progressCallback).then(key => {\n      if (legacy) {\n        return new BrainWallet(key);\n      }\n      const mnemonic = ethers.utils.entropyToMnemonic(ethers.utils.arrayify(key).slice(0, 16));\n      return new BrainWallet(ethers.Wallet.fromMnemonic(mnemonic));\n    });\n  }\n  static generate(username, password, progressCallback) {\n    return BrainWallet._generate(username, password, false, progressCallback);\n  }\n  static generateLegacy(username, password, progressCallback) {\n    return BrainWallet._generate(username, password, true, progressCallback);\n  }\n}","map":{"version":3,"mappings":"AAAA,YAAY;;AAEZ,SAASA,MAAM,QAAQ,QAAQ;AAE/B,OAAOC,MAAM,MAAM,WAAW;AAE9B,SAASC,OAAO,QAAQ,YAAY;AAEpC,MAAMC,MAAM,GAAG,IAAIH,MAAM,CAACI,KAAK,CAACC,MAAM,CAACH,OAAO,CAAC;AAE/C,IAAII,MAAM,GAAG,KAAK;AAElB,OAAM,MAAOC,WAAY,SAAQP,MAAM,CAACQ,MAAM;EAE1C,OAAOC,SAAS,CAACC,QAA+B,EAAEC,QAA+B,EAAEC,MAAe,EAAEC,gBAAgD;IAChJ,IAAI,CAACP,MAAM,EAAE;MACTH,MAAM,CAACW,IAAI,CAAC,gGAAgG,CAAC;MAC7GR,MAAM,GAAG,IAAI;;IAEjB,IAAIS,aAAa,GAAe,IAAI;IACpC,IAAIC,aAAa,GAAe,IAAI;IAEpC,IAAI,OAAON,QAAS,KAAK,QAAQ,EAAE;MAC/BP,MAAM,CAACc,cAAc,EAAE;MACvBF,aAAa,GAAGf,MAAM,CAACI,KAAK,CAACc,WAAW,CAACR,QAAQ,CAACS,SAAS,CAAC,MAAM,CAAC,CAAC;KACvE,MAAM;MACHJ,aAAa,GAAGf,MAAM,CAACI,KAAK,CAACgB,QAAQ,CAACV,QAAQ,CAAC;;IAGnD,IAAI,OAAOC,QAAS,KAAK,QAAQ,EAAE;MAC/BR,MAAM,CAACc,cAAc,EAAE;MACvBD,aAAa,GAAGhB,MAAM,CAACI,KAAK,CAACc,WAAW,CAACP,QAAQ,CAACQ,SAAS,CAAC,MAAM,CAAC,CAAC;KACvE,MAAM;MACHH,aAAa,GAAGhB,MAAM,CAACI,KAAK,CAACgB,QAAQ,CAACT,QAAQ,CAAC;;IAGnD,OAAOV,MAAM,CAACA,MAAM,CAACe,aAAa,EAAED,aAAa,EAAG,CAAC,IAAI,EAAE,EAAG,CAAC,EAAE,CAAC,EAAE,EAAE,EAAEF,gBAAgB,CAAC,CAACQ,IAAI,CAAEC,GAAe,IAAI;MAC/G,IAAIV,MAAM,EAAE;QACR,OAAO,IAAIL,WAAW,CAACe,GAAG,CAAC;;MAG/B,MAAMC,QAAQ,GAAGvB,MAAM,CAACI,KAAK,CAACoB,iBAAiB,CAACxB,MAAM,CAACI,KAAK,CAACgB,QAAQ,CAACE,GAAG,CAAC,CAACG,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;MACxF,OAAO,IAAIlB,WAAW,CAACP,MAAM,CAACQ,MAAM,CAACkB,YAAY,CAACH,QAAQ,CAAC,CAAC;IAChE,CAAC,CAAC;EACN;EAEA,OAAOI,QAAQ,CAACjB,QAA+B,EAAEC,QAA+B,EAAEE,gBAAgD;IAC9H,OAAON,WAAW,CAACE,SAAS,CAACC,QAAQ,EAAEC,QAAQ,EAAE,KAAK,EAAEE,gBAAgB,CAAC;EAC7E;EAEA,OAAOe,cAAc,CAAClB,QAA+B,EAAEC,QAA+B,EAAEE,gBAAgD;IACpI,OAAON,WAAW,CAACE,SAAS,CAACC,QAAQ,EAAEC,QAAQ,EAAE,IAAI,EAAEE,gBAAgB,CAAC;EAC5E","names":["ethers","scrypt","version","logger","utils","Logger","warned","BrainWallet","Wallet","_generate","username","password","legacy","progressCallback","warn","usernameBytes","passwordBytes","checkNormalize","toUtf8Bytes","normalize","arrayify","then","key","mnemonic","entropyToMnemonic","slice","fromMnemonic","generate","generateLegacy"],"sourceRoot":"","sources":["../src.ts/brain-wallet.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}
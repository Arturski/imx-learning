{"ast":null,"code":"var _jsxFileName = \"/Users/arthurfrancis/Documents/repo/imx-learning/workflows/link-app/react/src/Inventory.tsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nrequire('dotenv').config();\nconst Inventory = _ref => {\n  _s();\n  let {\n    client,\n    link,\n    wallet\n  } = _ref;\n  const [inventory, setInventory] = useState(Object);\n  // minting\n  const [mintTokenId, setMintTokenId] = useState('');\n  const [mintBlueprint, setMintBlueprint] = useState('');\n  const [mintTokenIdv2, setMintTokenIdv2] = useState('');\n  const [mintBlueprintv2, setMintBlueprintv2] = useState('');\n\n  // buying and selling\n  const [sellAmount, setSellAmount] = useState('');\n  const [sellTokenId, setSellTokenId] = useState('');\n  const [sellTokenAddress, setSellTokenAddress] = useState('');\n  const [sellCancelOrder, setSellCancelOrder] = useState('');\n  useEffect(() => {\n    load();\n  }, []);\n  async function load() {\n    setInventory(await client.getAssets({\n      user: wallet,\n      sell_orders: true\n    }));\n  }\n  ;\n\n  // sell an asset\n  async function sellNFT() {\n    await link.sell({\n      amount: sellAmount,\n      tokenId: sellTokenId,\n      tokenAddress: sellTokenAddress\n    });\n    setInventory(await client.getAssets({\n      user: wallet,\n      sell_orders: true\n    }));\n  }\n  ;\n\n  // cancel sell order\n  async function cancelSell() {\n    await link.cancel({\n      orderId: sellCancelOrder\n    });\n    setInventory(await client.getAssets({\n      user: wallet,\n      sell_orders: true\n    }));\n  }\n  ;\n\n  // helper function to generate random ids\n  function random() {\n    const min = 1;\n    const max = 1000000000;\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"table\", {\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: /*#__PURE__*/_jsxDEV(\"h1\", {\n              children: \"Orders\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 65,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: /*#__PURE__*/_jsxDEV(\"h1\", {\n              children: \"Inventory\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 71,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n};\n_s(Inventory, \"KD7s8JSMXirrTNXeuzxYMM++0nM=\");\n_c = Inventory;\nexport default Inventory;\nvar _c;\n$RefreshReg$(_c, \"Inventory\");","map":{"version":3,"names":["useEffect","useState","require","config","Inventory","client","link","wallet","inventory","setInventory","Object","mintTokenId","setMintTokenId","mintBlueprint","setMintBlueprint","mintTokenIdv2","setMintTokenIdv2","mintBlueprintv2","setMintBlueprintv2","sellAmount","setSellAmount","sellTokenId","setSellTokenId","sellTokenAddress","setSellTokenAddress","sellCancelOrder","setSellCancelOrder","load","getAssets","user","sell_orders","sellNFT","sell","amount","tokenId","tokenAddress","cancelSell","cancel","orderId","random","min","max","Math","floor"],"sources":["/Users/arthurfrancis/Documents/repo/imx-learning/workflows/link-app/react/src/Inventory.tsx"],"sourcesContent":["import { ethers } from 'ethers';\nimport { Link, ImmutableXClient, ImmutableMethodResults, MintableERC721TokenType } from '@imtbl/imx-sdk';\nimport { useEffect, useState } from 'react';\nrequire('dotenv').config();\n\ninterface InventoryProps {\n  client: ImmutableXClient,\n  link: Link,\n  wallet: string\n}\n\nconst Inventory = ({client, link, wallet}: InventoryProps) => {\n  const [inventory, setInventory] = useState<ImmutableMethodResults.ImmutableGetAssetsResult>(Object);\n  // minting\n  const [mintTokenId, setMintTokenId] = useState('');\n  const [mintBlueprint, setMintBlueprint] = useState('');\n  const [mintTokenIdv2, setMintTokenIdv2] = useState('');\n  const [mintBlueprintv2, setMintBlueprintv2] = useState('');\n\n  // buying and selling\n  const [sellAmount, setSellAmount] = useState('');\n  const [sellTokenId, setSellTokenId] = useState('');\n  const [sellTokenAddress, setSellTokenAddress] = useState('');\n  const [sellCancelOrder, setSellCancelOrder] = useState('');\n\n  useEffect(() => {\n    load()\n  }, [])\n\n  async function load(): Promise<void> {\n    setInventory(await client.getAssets({user: wallet, sell_orders: true}))\n  };\n\n  // sell an asset\n  async function sellNFT() {\n    await link.sell({\n      amount: sellAmount,\n      tokenId: sellTokenId,\n      tokenAddress: sellTokenAddress\n    })\n    setInventory(await client.getAssets({user: wallet, sell_orders: true}))\n  };\n\n  // cancel sell order\n  async function cancelSell() {\n    await link.cancel({\n      orderId: sellCancelOrder\n    })\n    setInventory(await client.getAssets({user: wallet, sell_orders: true}))\n  };\n\n  // helper function to generate random ids\n  function random()\n    : number {\n    const min = 1;\n    const max = 1000000000;\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n  }\n\n  return (\n    <div>\n      <table>\n        <thead>\n          <tr>\n            <th><h1>Orders</h1></th>\n            <td></td>\n          </tr>\n        </thead>\n        <tbody>\n        <tr>\n            <th><h1>Inventory</h1></th>\n            <td></td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n  );\n}\n\nexport default Inventory;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
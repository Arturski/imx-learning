[{"/Users/arthurfrancis/Documents/repo/imx-reactjs-integration-example/src/index.tsx":"1","/Users/arthurfrancis/Documents/repo/imx-reactjs-integration-example/src/App.tsx":"2","/Users/arthurfrancis/Documents/repo/imx-reactjs-integration-example/src/Marketplace.tsx":"3","/Users/arthurfrancis/Documents/repo/imx-reactjs-integration-example/src/Bridging.tsx":"4","/Users/arthurfrancis/Documents/repo/imx-reactjs-integration-example/src/Inventory.tsx":"5","/Users/arthurfrancis/Documents/repo/imx-learning/workflows/link-app/react/src/index.tsx":"6","/Users/arthurfrancis/Documents/repo/imx-learning/workflows/link-app/react/src/App.tsx":"7","/Users/arthurfrancis/Documents/repo/imx-learning/workflows/link-app/react/src/Bridging.tsx":"8","/Users/arthurfrancis/Documents/repo/imx-learning/workflows/link-app/react/src/Inventory.tsx":"9","/Users/arthurfrancis/Documents/repo/imx-learning/workflows/link-app/react/src/Marketplace.tsx":"10"},{"size":219,"mtime":1667385144815,"results":"11","hashOfConfig":"12"},{"size":6848,"mtime":1669045874730,"results":"13","hashOfConfig":"12"},{"size":1269,"mtime":1667385144815,"results":"14","hashOfConfig":"12"},{"size":6304,"mtime":1667385144815,"results":"15","hashOfConfig":"12"},{"size":19093,"mtime":1667561400931,"results":"16","hashOfConfig":"12"},{"size":219,"mtime":1670332237565,"results":"17","hashOfConfig":"18"},{"size":6596,"mtime":1670352470309,"results":"19","hashOfConfig":"18"},{"size":6304,"mtime":1670332237566,"results":"20","hashOfConfig":"18"},{"size":3960,"mtime":1670353160001,"results":"21","hashOfConfig":"18"},{"size":1269,"mtime":1670332237567,"results":"22","hashOfConfig":"18"},{"filePath":"23","messages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},"1vpu46e",{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"28","messages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"25"},{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"25"},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"25"},{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},"szpvi2",{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"39"},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"39"},"/Users/arthurfrancis/Documents/repo/imx-reactjs-integration-example/src/index.tsx",[],["48","49"],"/Users/arthurfrancis/Documents/repo/imx-reactjs-integration-example/src/App.tsx",["50"],"/Users/arthurfrancis/Documents/repo/imx-reactjs-integration-example/src/Marketplace.tsx",["51"],"import { Link, ImmutableXClient, ImmutableMethodResults, ImmutableOrderStatus} from '@imtbl/imx-sdk';\nimport { useEffect, useState } from 'react';\nrequire('dotenv').config();\n\ninterface MarketplaceProps {\n  client: ImmutableXClient,\n  link: Link\n}\n\nconst Marketplace = ({client, link}: MarketplaceProps) => {\n  const [marketplace, setMarketplace] = useState<ImmutableMethodResults.ImmutableGetOrdersResult>(Object);\n  const [buyOrderId, setBuyOrderId] = useState('');\n\n  useEffect(() => {\n    load()\n  }, [])\n\n  async function load(): Promise<void> {\n    setMarketplace(await client.getOrders({status: ImmutableOrderStatus.active, user: '0xc120a52ad90bb926bafcdfc9161740dcf4a2cea1'}))\n  };\n\n  // buy an asset\n  async function buyNFT() {\n    await link.buy({\n      orderIds:[buyOrderId]\n    })\n  };\n\n  return (\n    <div>\n      <div>\n        Buy asset:\n        <br/>\n        <label>\n          Order ID:\n          <input type=\"text\" value={buyOrderId} onChange={e => setBuyOrderId(e.target.value)} />\n        </label>\n        <button onClick={buyNFT}>Buy</button>\n      </div>\n      <br/><br/><br/>\n      <div>\n        Marketplace (active sell orders):\n        <br/>\n        {JSON.stringify(marketplace.result)}\n      </div>\n    </div>\n  );\n}\n\nexport default Marketplace;\n","/Users/arthurfrancis/Documents/repo/imx-reactjs-integration-example/src/Bridging.tsx",["52"],"\nimport { Link, ImmutableXClient, ImmutableMethodResults, ERC721TokenType, ETHTokenType, ImmutableRollupStatus  } from '@imtbl/imx-sdk';\nimport { useEffect, useState } from 'react';\nrequire('dotenv').config();\n\ninterface BridgingProps {\n  client: ImmutableXClient,\n  link: Link,\n  wallet: string\n}\n\nconst Bridging = ({client, link, wallet}: BridgingProps) => {\n  // withdrawals\n  const [preparingWithdrawals, setPreparingWithdrawals] = useState<ImmutableMethodResults.ImmutableGetWithdrawalsResult>(Object);\n  const [readyWithdrawals, setReadyWithdrawals] = useState<ImmutableMethodResults.ImmutableGetWithdrawalsResult>(Object);\n  const [completedWithdrawals, setCompletedWithdrawals] = useState<ImmutableMethodResults.ImmutableGetWithdrawalsResult>(Object);\n  // eth\n  const [depositAmount, setDepositAmount] = useState('');\n  const [prepareAmount, setPrepareAmount] = useState('');\n  // nft\n  const [depositTokenId, setDepositTokenId] = useState('');\n  const [depositTokenAddress, setDepositTokenAddress] = useState('');\n  const [prepareTokenId, setPrepareTokenId] = useState('');\n  const [prepareTokenAddress, setPrepareTokenAddress] = useState('');\n  const [completeTokenId, setCompleteTokenId] = useState('');\n  const [completeTokenAddress, setCompleteTokenAddress] = useState('');\n\n  useEffect(() => {\n    load()\n  }, [])\n\n  async function load(): Promise<void> {\n    setPreparingWithdrawals(await client.getWithdrawals({\n      user: wallet,\n      rollup_status: ImmutableRollupStatus.included\n    })) // included in batch awaiting confirmation\n    setReadyWithdrawals(await client.getWithdrawals({\n      user: wallet,\n      rollup_status: ImmutableRollupStatus.confirmed,\n      withdrawn_to_wallet: false\n    })) // confirmed on-chain in a batch and ready to be withdrawn\n    setCompletedWithdrawals(await client.getWithdrawals({\n      user: wallet,\n      withdrawn_to_wallet: true\n    })) // confirmed on-chain in a batch and already withdrawn to L1 wallet\n  };\n\n  // deposit an NFT\n  async function depositNFT() {\n    await link.deposit({\n      type: ERC721TokenType.ERC721,\n      tokenId: depositTokenId,\n      tokenAddress: depositTokenAddress\n    })\n  };\n\n  // deposit eth\n  async function depositETH() {\n    await link.deposit({\n      type: ETHTokenType.ETH,\n      amount: depositAmount,\n    })\n  };\n\n  // prepare an NFT withdrawal\n  async function prepareWithdrawalNFT() {\n    await link.prepareWithdrawal({\n      type: ERC721TokenType.ERC721,\n      tokenId: prepareTokenId,\n      tokenAddress: prepareTokenAddress\n    })\n  };\n\n  // prepare an eth withdrawal\n  async function prepareWithdrawalETH() {\n    await link.prepareWithdrawal({\n      type: ETHTokenType.ETH,\n      amount: prepareAmount,\n    })\n  };\n\n  // complete an NFT withdrawal\n  async function completeWithdrawalNFT() {\n    await link.completeWithdrawal({\n      type: ERC721TokenType.ERC721,\n      tokenId: completeTokenId,\n      tokenAddress: completeTokenAddress\n    })\n  };\n\n  // complete an eth withdrawal\n  async function completeWithdrawalETH() {\n    await link.completeWithdrawal({\n      type: ETHTokenType.ETH,\n    })\n  };\n\n  return (\n    <div>\n      <div>\n        ETH:\n        <br/><br/>\n        <div>\n          Deposit ETH:\n          <br/>\n          <label>\n            Amount (ETH):\n            <input type=\"text\" value={depositAmount} onChange={e => setDepositAmount(e.target.value)} />\n          </label>\n          <button onClick={depositETH}>Deposit ETH</button>\n        </div>\n        <br/><br/>\n        <div>\n          Prepare ETH for withdrawal (submit to be rolled up and confirmed on chain in the next batch):\n          <br/>\n          <label>\n            Amount (ETH):\n            <input type=\"text\" value={prepareAmount} onChange={e => setPrepareAmount(e.target.value)} />\n          </label>\n          <button onClick={prepareWithdrawalETH}>Prepare ETH Withdrawal</button>\n        </div>\n        <br/><br/>\n        <div>\n          Complete ETH withdrawal (withdraws entire eth balance that is ready for withdrawal to L1 wallet):\n          <br/>\n          <button onClick={completeWithdrawalETH}>Complete ETH Withdrawal</button>\n        </div>\n      </div>\n      <br/>\n      <div>\n        ERC721:\n        <br/><br/>\n        <div>\n          Deposit NFT:\n          <br/>\n          <label>\n            Token ID:\n            <input type=\"text\" value={depositTokenId} onChange={e => setDepositTokenId(e.target.value)} />\n          </label>\n          <label>\n            Token Address:\n            <input type=\"text\" value={depositTokenAddress} onChange={e => setDepositTokenAddress(e.target.value)} />\n          </label>\n          <button onClick={depositNFT}>Deposit NFT</button>\n        </div>\n        <br/><br/>\n        <div>\n          Prepare NFT for withdrawal (submit to be rolled up and confirmed on chain in the next batch):\n          <br/>\n          <label>\n            Token ID:\n            <input type=\"text\" value={prepareTokenId} onChange={e => setPrepareTokenId(e.target.value)} />\n          </label>\n          <label>\n            Token Address:\n            <input type=\"text\" value={prepareTokenAddress} onChange={e => setPrepareTokenAddress(e.target.value)} />\n          </label>\n          <button onClick={prepareWithdrawalNFT}>Prepare NFT Withdrawal</button>\n        </div>\n        <br/><br/>\n        <div>\n          Complete NFT withdrawal (withdraws single NFT that is ready for withdrawal to L1 wallet):\n          <br/>\n          <label>\n            Token ID:\n            <input type=\"text\" value={completeTokenId} onChange={e => setCompleteTokenId(e.target.value)} />\n          </label>\n          <label>\n            Token Address:\n            <input type=\"text\" value={completeTokenAddress} onChange={e => setCompleteTokenAddress(e.target.value)} />\n          </label>\n          <button onClick={completeWithdrawalNFT}>Complete NFT Withdrawal</button>\n        </div>\n      </div>\n      <br/><br/><br/>\n      <div>\n        Withdrawals being prepared:\n        {JSON.stringify(preparingWithdrawals)}\n      </div>\n      <br/><br/>\n      <div>\n        Ready for withdrawal:\n        {JSON.stringify(readyWithdrawals)}\n      </div>\n      <br/><br/>\n      <div>\n        Withdrawn to wallet:\n        {JSON.stringify(completedWithdrawals)}\n      </div>\n    </div>\n  );\n}\n\nexport default Bridging;\n","/Users/arthurfrancis/Documents/repo/imx-reactjs-integration-example/src/Inventory.tsx",["53","54"],"import { ethers } from 'ethers';\nimport { Link, ImmutableXClient, ImmutableMethodResults, MintableERC721TokenType } from '@imtbl/imx-sdk';\nimport { useEffect, useState } from 'react';\nrequire('dotenv').config();\n\ninterface InventoryProps {\n  client: ImmutableXClient,\n  link: Link,\n  wallet: string\n}\n\nconst Inventory = ({client, link, wallet}: InventoryProps) => {\n  const [inventory, setInventory] = useState<ImmutableMethodResults.ImmutableGetAssetsResult>(Object);\n  // minting\n  const [mintTokenId, setMintTokenId] = useState('');\n  const [mintBlueprint, setMintBlueprint] = useState('');\n  const [mintTokenIdv2, setMintTokenIdv2] = useState('');\n  const [mintBlueprintv2, setMintBlueprintv2] = useState('');\n\n  // buying and selling\n  const [sellAmount, setSellAmount] = useState('');\n  const [sellTokenId, setSellTokenId] = useState('');\n  const [sellTokenAddress, setSellTokenAddress] = useState('');\n  const [sellCancelOrder, setSellCancelOrder] = useState('');\n\n  useEffect(() => {\n    load()\n  }, [])\n\n  async function load(): Promise<void> {\n    setInventory(await client.getAssets({user: wallet, sell_orders: true}))\n  };\n\n  // sell an asset\n  async function sellNFT() {\n    await link.sell({\n      amount: sellAmount,\n      tokenId: sellTokenId,\n      tokenAddress: sellTokenAddress\n    })\n    setInventory(await client.getAssets({user: wallet, sell_orders: true}))\n  };\n\n  // cancel sell order\n  async function cancelSell() {\n    await link.cancel({\n      orderId: sellCancelOrder\n    })\n    setInventory(await client.getAssets({user: wallet, sell_orders: true}))\n  };\n\n  // helper function to generate random ids\n  function random()\n    : number {\n    const min = 1;\n    const max = 1000000000;\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n  }\n\n  // the minting function should be on your backend\n  async function mint() {\n    // initialise a client with the minter for your NFT smart contract\n    const provider = new ethers.providers.JsonRpcProvider(`https://eth-goerli.g.alchemy.com/v2/${process.env.REACT_APP_ALCHEMY_API_KEY}`);\n    \n    \n    //if you want to mint on a back end server you can also provide the private key of your wallet directly to the minter. \n    //Please note: you should never share your private key and so ensure this is only done on a server that is not accessible from the internet\n    const minterPrivateKey: string = process.env.REACT_APP_MINTER_PK ?? ''; // registered minter for your contract\n    const minter = new ethers.Wallet(minterPrivateKey).connect(provider);\n\n    //const minter = new ethers.providers.Web3Provider(window.ethereum).getSigner(); //get Signature from Metamask wallet\n    const publicApiUrl: string = process.env.REACT_APP_SANDBOX_ENV_URL ?? '';\n    const starkContractAddress: string = process.env.REACT_APP_SANDBOX_STARK_CONTRACT_ADDRESS ?? '';\n    const registrationContractAddress: string = process.env.REACT_APP_SANDBOX_REGISTRATION_ADDRESS ?? '';\n    const minterClient = await ImmutableXClient.build({\n        publicApiUrl,\n        signer: minter,\n        starkContractAddress,\n        registrationContractAddress,\n    })\n\n    // mint any number of NFTs to specified wallet address (must be registered on Immutable X first)\n    const token_address: string = process.env.REACT_APP_TOKEN_ADDRESS ?? ''; // contract registered by Immutable\n    const result = await minterClient.mint({\n      mints: [{\n          etherKey: wallet,\n          tokens: [{\n              type: MintableERC721TokenType.MINTABLE_ERC721,\n              data: {\n                  id: mintTokenId, // this is the ERC721 token id\n                  blueprint: mintBlueprint, // this is passed to your smart contract at time of withdrawal from L2\n                  tokenAddress: token_address.toLowerCase(),\n              }\n          }],\n          nonce: random().toString(10),\n          authSignature: ''\n      }]\n    });\n    console.log(`Token minted: ${result.results[0].token_id}`);\n    setInventory(await client.getAssets({user: wallet, sell_orders: true}))\n  };\n\nasync function mintv2() {\n    // initialise a client with the minter for your NFT smart contract\n    const provider = new ethers.providers.JsonRpcProvider(`https://eth-goerli.g.alchemy.com/v2/${process.env.REACT_APP_ALCHEMY_API_KEY}`);\n        \n    \n    //if you want to mint on a back end server you can also provide the private key of your wallet directly to the minter. \n    //Please note: you should never share your private key and so ensure this is only done on a server that is not accessible from the internet\n    const minterPrivateKey: string = process.env.REACT_APP_MINTER_PK ?? ''; // registered minter for your contract\n    const minter = new ethers.Wallet(minterPrivateKey).connect(provider);\n\n    //const minter = new ethers.providers.Web3Provider(window.ethereum).getSigner(); //get Signature from Metamask wallet\n    const publicApiUrl: string = process.env.REACT_APP_SANDBOX_ENV_URL ?? '';\n    const starkContractAddress: string = process.env.REACT_APP_SANDBOX_STARK_CONTRACT_ADDRESS ?? '';\n    const registrationContractAddress: string = process.env.REACT_APP_SANDBOX_REGISTRATION_ADDRESS ?? '';\n    const minterClient = await ImmutableXClient.build({\n        publicApiUrl,\n        signer: minter,\n        starkContractAddress,\n        registrationContractAddress,\n    })\n\n    // mint any number of NFTs to specified wallet address (must be registered on Immutable X first)\n    const token_address: string = process.env.REACT_APP_TOKEN_ADDRESS ?? ''; // contract registered by Immutable\n    const royaltyRecieverAddress: string = process.env.REACT_APP_ROYALTY_ADDRESS ?? '';\n    const tokenReceiverAddress: string = process.env.REACT_APP_TOKEN_RECEIVER_ADDRESS ?? '';\n    const result = await minterClient.mintV2([{\n           users: [{\n                     etherKey: \"0x7D9148F5ba0520Eb4e8A3073938Cf383Fc9bF390\".toLowerCase(),\n                     tokens: [{\n                                id: \"5\",\n                                blueprint: \"hello blueprint 1\",\n                                // overriding royalties for specific token\n                                royalties: [{                                        \n                                        recipient: \"0x7D9148F5ba0520Eb4e8A3073938Cf383Fc9bF390\".toLowerCase(),\n                                        percentage: 1.5\n                                    },\n                                    {                                        \n                                      recipient: \"0xb512D1426219D0CBceAB18Efd2C29465f4B6C0BB\".toLowerCase(),\n                                      percentage: 2.5\n                                  },\n                                  {                                        \n                                    recipient: \"0x1eD81E094cC225efD6ad4c2e9955e282aD02D2Cf\".toLowerCase(),\n                                    percentage: 3.5\n                                }\n                                  ],\n                              \n                              },\n                              {\n                                id: \"6\",\n                                blueprint: \"Hello blueprint 2\",\n                                // overriding royalties for specific token\n                                royalties: [{                                        \n                                        recipient: \"0x7D9148F5ba0520Eb4e8A3073938Cf383Fc9bF390\".toLowerCase(),\n                                        percentage: 1.5\n                                    },\n                                    {                                        \n                                      recipient: \"0xb512D1426219D0CBceAB18Efd2C29465f4B6C0BB\".toLowerCase(),\n                                      percentage: 2.5\n                                  },\n                                  {                                        \n                                    recipient: \"0x1eD81E094cC225efD6ad4c2e9955e282aD02D2Cf\".toLowerCase(),\n                                    percentage: 3.5\n                                }\n                                  ],\n                              \n                              },\n                              {\n                                id: \"7\",\n                                blueprint: \"Hello blueprint 3\",\n                                // overriding royalties for specific token\n                                royalties: [{                                        \n                                        recipient: \"0x7D9148F5ba0520Eb4e8A3073938Cf383Fc9bF390\".toLowerCase(),\n                                        percentage: 1.5\n                                    },\n                                    {                                        \n                                      recipient: \"0xb512D1426219D0CBceAB18Efd2C29465f4B6C0BB\".toLowerCase(),\n                                      percentage: 2.5\n                                  },\n                                  {                                        \n                                    recipient: \"0x1eD81E094cC225efD6ad4c2e9955e282aD02D2Cf\".toLowerCase(),\n                                    percentage: 3.5\n                                }\n                                  ],\n                              \n                              }\n                          ]\n                    },\n                    {\n                      etherKey: \"0xb512D1426219D0CBceAB18Efd2C29465f4B6C0BB\".toLowerCase(),\n                      tokens: [{\n                                 id: \"8\",\n                                 blueprint: \"Hello blueprint 4\",\n                                 // overriding royalties for specific token\n                                 royalties: [{                                        \n                                         recipient: \"0x7D9148F5ba0520Eb4e8A3073938Cf383Fc9bF390\".toLowerCase(),\n                                         percentage: 1.5\n                                     },\n                                     {                                        \n                                       recipient: \"0xb512D1426219D0CBceAB18Efd2C29465f4B6C0BB\".toLowerCase(),\n                                       percentage: 2.5\n                                   },\n                                   {                                        \n                                     recipient: \"0x1eD81E094cC225efD6ad4c2e9955e282aD02D2Cf\".toLowerCase(),\n                                     percentage: 3.5\n                                 }\n                                   ],\n                               \n                               },\n                               {\n                                 id: \"9\",\n                                 blueprint: \"Hello blueprint 5\",\n                                 // overriding royalties for specific token\n                                 royalties: [{                                        \n                                         recipient: \"0x7D9148F5ba0520Eb4e8A3073938Cf383Fc9bF390\".toLowerCase(),\n                                         percentage: 1.5\n                                     },\n                                     {                                        \n                                       recipient: \"0xb512D1426219D0CBceAB18Efd2C29465f4B6C0BB\".toLowerCase(),\n                                       percentage: 2.5\n                                   },\n                                   {                                        \n                                     recipient: \"0x1eD81E094cC225efD6ad4c2e9955e282aD02D2Cf\".toLowerCase(),\n                                     percentage: 3.5\n                                 }\n                                   ],\n                               \n                               },\n                               {\n                                 id: \"10\",\n                                 blueprint: \"Hello blueprint 6\",\n                                 // overriding royalties for specific token\n                                 royalties: [{                                        \n                                         recipient: \"0x7D9148F5ba0520Eb4e8A3073938Cf383Fc9bF390\".toLowerCase(),\n                                         percentage: 1.5\n                                     },\n                                     {                                        \n                                       recipient: \"0xb512D1426219D0CBceAB18Efd2C29465f4B6C0BB\".toLowerCase(),\n                                       percentage: 2.5\n                                   },\n                                   {                                        \n                                     recipient: \"0x1eD81E094cC225efD6ad4c2e9955e282aD02D2Cf\".toLowerCase(),\n                                     percentage: 3.5\n                                 }\n                                   ],\n                               \n                               }\n                           ]\n                     },\n                     {\n                      etherKey: \"0x1eD81E094cC225efD6ad4c2e9955e282aD02D2Cf\".toLowerCase(),\n                      tokens: [{\n                                 id: \"11\",\n                                 blueprint: \"Hello blueprint 7\",\n                                 // overriding royalties for specific token\n                                 royalties: [{                                        \n                                         recipient: \"0x7D9148F5ba0520Eb4e8A3073938Cf383Fc9bF390\".toLowerCase(),\n                                         percentage: 1.5\n                                     },\n                                     {                                        \n                                       recipient: \"0xb512D1426219D0CBceAB18Efd2C29465f4B6C0BB\".toLowerCase(),\n                                       percentage: 2.5\n                                   },\n                                   {                                        \n                                     recipient: \"0x1eD81E094cC225efD6ad4c2e9955e282aD02D2Cf\".toLowerCase(),\n                                     percentage: 3.5\n                                 }\n                                   ],\n                               \n                               },\n                               {\n                                 id: \"12\",\n                                 blueprint: \"Hello blueprint 8\",\n                                 // overriding royalties for specific token\n                                 royalties: [{                                        \n                                         recipient: \"0x7D9148F5ba0520Eb4e8A3073938Cf383Fc9bF390\".toLowerCase(),\n                                         percentage: 1.5\n                                     },\n                                     {                                        \n                                       recipient: \"0xb512D1426219D0CBceAB18Efd2C29465f4B6C0BB\".toLowerCase(),\n                                       percentage: 2.5\n                                   },\n                                   {                                        \n                                     recipient: \"0x1eD81E094cC225efD6ad4c2e9955e282aD02D2Cf\".toLowerCase(),\n                                     percentage: 3.5\n                                 }\n                                   ],\n                               \n                               },\n                               {\n                                 id: \"13\",\n                                 blueprint: \"Hello blueprint 9\",\n                                 // overriding royalties for specific token\n                                 royalties: [{                                        \n                                         recipient: \"0x7D9148F5ba0520Eb4e8A3073938Cf383Fc9bF390\".toLowerCase(),\n                                         percentage: 1.5\n                                     },\n                                     {                                        \n                                       recipient: \"0xb512D1426219D0CBceAB18Efd2C29465f4B6C0BB\".toLowerCase(),\n                                       percentage: 2.5\n                                   },\n                                   {                                        \n                                     recipient: \"0x1eD81E094cC225efD6ad4c2e9955e282aD02D2Cf\".toLowerCase(),\n                                     percentage: 3.5\n                                 }\n                                   ],\n                               \n                               }\n                           ]\n                     }],\n                contractAddress: token_address.toLowerCase(),\n\n                // globally set royalties\n                royalties: [{\n                        recipient: tokenReceiverAddress.toLowerCase(),\n                        percentage: 4.0\n                    }]\n            }]\n    );\n    console.log(`Token minted: ${result}`);\n    setInventory(await client.getAssets({user: wallet, sell_orders: true}))\n  };\n\n  return (\n    <div>\n      <div>\n        Mint NFT:\n        <br/>\n        <label>\n          Token ID:\n          <input type=\"text\" value={mintTokenId} onChange={e => setMintTokenId(e.target.value)} />\n        </label>\n        <label>\n          Blueprint:\n          <input type=\"text\" value={mintBlueprint} onChange={e => setMintBlueprint(e.target.value)} />\n        </label>\n        <button onClick={mint}>Mint</button>\n      </div>\n      <div>\n        MintV2 - with Royalties NFT:\n        <br/>\n        <label>\n          Token ID:\n          <input type=\"text\" value={mintTokenIdv2} onChange={e => setMintTokenIdv2(e.target.value)} />\n        </label>\n        <label>\n          Blueprint:\n          <input type=\"text\" value={mintBlueprintv2} onChange={e => setMintBlueprintv2(e.target.value)} />\n        </label>\n        <button onClick={mintv2}>MintV2</button>\n      </div>\n      <br/>\n      <div>\n        Sell asset (create sell order):\n        <br/>\n        <label>\n          Amount (ETH):\n          <input type=\"text\" value={sellAmount} onChange={e => setSellAmount(e.target.value)} />\n        </label>\n        <label>\n          Token ID:\n          <input type=\"text\" value={sellTokenId} onChange={e => setSellTokenId(e.target.value)} />\n        </label>\n        <label>\n          Token Address:\n          <input type=\"text\" value={sellTokenAddress} onChange={e => setSellTokenAddress(e.target.value)} />\n        </label>\n        <button onClick={sellNFT}>Sell</button>\n      </div>\n      <br/>\n      <div>\n        Cancel sell order:\n        <br/>\n        <label>\n          Order ID:\n          <input type=\"text\" value={sellCancelOrder} onChange={e => setSellCancelOrder(e.target.value)} />\n        </label>\n        <button onClick={cancelSell}>Cancel</button>\n      </div>\n      <br/><br/><br/>\n      <div>\n        Inventory:\n        {JSON.stringify(inventory.result)}\n      </div>\n    </div>\n  );\n}\n\nexport default Inventory;\n","/Users/arthurfrancis/Documents/repo/imx-learning/workflows/link-app/react/src/index.tsx",[],["55","56"],"/Users/arthurfrancis/Documents/repo/imx-learning/workflows/link-app/react/src/App.tsx",["57","58","59","60","61"],"/Users/arthurfrancis/Documents/repo/imx-learning/workflows/link-app/react/src/Bridging.tsx",["62"],"/Users/arthurfrancis/Documents/repo/imx-learning/workflows/link-app/react/src/Inventory.tsx",["63","64","65","66","67","68","69","70","71","72","73","74","75","76","77","78","79","80","81"],"/Users/arthurfrancis/Documents/repo/imx-learning/workflows/link-app/react/src/Marketplace.tsx",["82"],{"ruleId":"83","replacedBy":"84"},{"ruleId":"85","replacedBy":"86"},{"ruleId":"87","severity":1,"message":"88","line":3,"column":109,"nodeType":"89","messageId":"90","endLine":3,"endColumn":129},{"ruleId":"91","severity":1,"message":"92","line":16,"column":6,"nodeType":"93","endLine":16,"endColumn":8,"suggestions":"94"},{"ruleId":"91","severity":1,"message":"92","line":30,"column":6,"nodeType":"93","endLine":30,"endColumn":8,"suggestions":"95"},{"ruleId":"91","severity":1,"message":"92","line":28,"column":6,"nodeType":"93","endLine":28,"endColumn":8,"suggestions":"96"},{"ruleId":"87","severity":1,"message":"97","line":126,"column":11,"nodeType":"89","messageId":"90","endLine":126,"endColumn":41},{"ruleId":"83","replacedBy":"98"},{"ruleId":"85","replacedBy":"99"},{"ruleId":"87","severity":1,"message":"100","line":45,"column":18,"nodeType":"89","messageId":"90","endLine":45,"endColumn":32},{"ruleId":"87","severity":1,"message":"101","line":73,"column":18,"nodeType":"89","messageId":"90","endLine":73,"endColumn":31},{"ruleId":"87","severity":1,"message":"102","line":90,"column":18,"nodeType":"89","messageId":"90","endLine":90,"endColumn":33},{"ruleId":"87","severity":1,"message":"103","line":104,"column":18,"nodeType":"89","messageId":"90","endLine":104,"endColumn":33},{"ruleId":"87","severity":1,"message":"104","line":119,"column":18,"nodeType":"89","messageId":"90","endLine":119,"endColumn":34},{"ruleId":"91","severity":1,"message":"92","line":30,"column":6,"nodeType":"93","endLine":30,"endColumn":8,"suggestions":"105"},{"ruleId":"87","severity":1,"message":"106","line":1,"column":10,"nodeType":"89","messageId":"90","endLine":1,"endColumn":16},{"ruleId":"87","severity":1,"message":"107","line":2,"column":58,"nodeType":"89","messageId":"90","endLine":2,"endColumn":81},{"ruleId":"87","severity":1,"message":"108","line":2,"column":100,"nodeType":"89","messageId":"90","endLine":2,"endColumn":112},{"ruleId":"87","severity":1,"message":"109","line":15,"column":10,"nodeType":"89","messageId":"90","endLine":15,"endColumn":21},{"ruleId":"87","severity":1,"message":"110","line":15,"column":23,"nodeType":"89","messageId":"90","endLine":15,"endColumn":37},{"ruleId":"87","severity":1,"message":"111","line":16,"column":10,"nodeType":"89","messageId":"90","endLine":16,"endColumn":23},{"ruleId":"87","severity":1,"message":"112","line":16,"column":25,"nodeType":"89","messageId":"90","endLine":16,"endColumn":41},{"ruleId":"87","severity":1,"message":"113","line":17,"column":10,"nodeType":"89","messageId":"90","endLine":17,"endColumn":23},{"ruleId":"87","severity":1,"message":"114","line":17,"column":25,"nodeType":"89","messageId":"90","endLine":17,"endColumn":41},{"ruleId":"87","severity":1,"message":"115","line":18,"column":10,"nodeType":"89","messageId":"90","endLine":18,"endColumn":25},{"ruleId":"87","severity":1,"message":"116","line":18,"column":27,"nodeType":"89","messageId":"90","endLine":18,"endColumn":45},{"ruleId":"87","severity":1,"message":"117","line":21,"column":10,"nodeType":"89","messageId":"90","endLine":21,"endColumn":20},{"ruleId":"87","severity":1,"message":"118","line":21,"column":22,"nodeType":"89","messageId":"90","endLine":21,"endColumn":35},{"ruleId":"87","severity":1,"message":"119","line":22,"column":10,"nodeType":"89","messageId":"90","endLine":22,"endColumn":26},{"ruleId":"87","severity":1,"message":"120","line":22,"column":28,"nodeType":"89","messageId":"90","endLine":22,"endColumn":47},{"ruleId":"87","severity":1,"message":"121","line":23,"column":10,"nodeType":"89","messageId":"90","endLine":23,"endColumn":25},{"ruleId":"87","severity":1,"message":"122","line":23,"column":27,"nodeType":"89","messageId":"90","endLine":23,"endColumn":45},{"ruleId":"91","severity":1,"message":"92","line":32,"column":6,"nodeType":"93","endLine":32,"endColumn":8,"suggestions":"123"},{"ruleId":"87","severity":1,"message":"124","line":39,"column":12,"nodeType":"89","messageId":"90","endLine":39,"endColumn":18},{"ruleId":"91","severity":1,"message":"92","line":16,"column":6,"nodeType":"93","endLine":16,"endColumn":8,"suggestions":"125"},"no-native-reassign",["126"],"no-negated-in-lhs",["127"],"@typescript-eslint/no-unused-vars","'ImmutableOrderStatus' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'load'. Either include it or remove the dependency array.","ArrayExpression",["128"],["129"],["130"],"'royaltyRecieverAddress' is assigned a value but never used.",["126"],["127"],"'clientTransfer' is defined but never used.","'linkMakeOffer' is defined but never used.","'linkAcceptOffer' is defined but never used.","'linkCancelOffer' is defined but never used.","'batchNFTTransfer' is defined but never used.",["131"],"'ethers' is defined but never used.","'MintableERC721TokenType' is defined but never used.","'ETHTokenType' is defined but never used.","'mintTokenId' is assigned a value but never used.","'setMintTokenId' is assigned a value but never used.","'mintBlueprint' is assigned a value but never used.","'setMintBlueprint' is assigned a value but never used.","'mintTokenIdv2' is assigned a value but never used.","'setMintTokenIdv2' is assigned a value but never used.","'mintBlueprintv2' is assigned a value but never used.","'setMintBlueprintv2' is assigned a value but never used.","'sellAmount' is assigned a value but never used.","'setSellAmount' is assigned a value but never used.","'sellTokenAddress' is assigned a value but never used.","'setSellTokenAddress' is assigned a value but never used.","'sellCancelOrder' is assigned a value but never used.","'setSellCancelOrder' is assigned a value but never used.",["132"],"'random' is defined but never used.",["133"],"no-global-assign","no-unsafe-negation",{"desc":"134","fix":"135"},{"desc":"134","fix":"136"},{"desc":"134","fix":"137"},{"desc":"134","fix":"138"},{"desc":"134","fix":"139"},{"desc":"134","fix":"140"},"Update the dependencies array to be: [load]",{"range":"141","text":"142"},{"range":"143","text":"142"},{"range":"144","text":"142"},{"range":"145","text":"142"},{"range":"146","text":"142"},{"range":"147","text":"142"},[505,507],"[load]",[1325,1327],[1008,1010],[1325,1327],[1160,1162],[505,507]]
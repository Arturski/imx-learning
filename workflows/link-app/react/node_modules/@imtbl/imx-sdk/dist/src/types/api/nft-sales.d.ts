import * as t from 'io-ts';
import { ImmutableMethodParams } from './types';
export declare enum ExchangeType {
    ONRAMP = "onramp",
    OFFRAMP = "offramp"
}
export declare const ExchangeTypeT: t.Type<ExchangeType, ExchangeType, unknown>;
export declare const WidgetParamsCodec: t.PartialC<{
    supported_currencies: t.ArrayC<t.StringC>;
    amount: t.StringC;
    theme: t.StringC;
}>;
export declare const ImmutableCreateExchangeV3ParamsCodec: t.IntersectionC<[t.TypeC<{
    wallet_address: t.BrandC<t.StringC, import("../runtime").EthAddressBrand>;
    provider: t.StringC;
    type: t.Type<ExchangeType, ExchangeType, unknown>;
}>, t.PartialC<{
    widget: t.PartialC<{
        supported_currencies: t.ArrayC<t.StringC>;
        amount: t.StringC;
        theme: t.StringC;
    }>;
}>]>;
export declare type ImmutableCreateExchangeV3Params = t.OutputOf<typeof ImmutableCreateExchangeV3ParamsCodec>;
export declare const ImmutableCreateExchangeV3ResponseCodec: t.TypeC<{
    id: t.NumberC;
    wallet_address: t.BrandC<t.StringC, import("../runtime").EthAddressBrand>;
    provider: t.StringC;
    type: t.StringC;
    url: t.StringC;
}>;
export declare type ImmutableCreateExchangeV3Response = t.OutputOf<typeof ImmutableCreateExchangeV3ResponseCodec>;
export declare enum NFTTransactionStatus {
    Created = "created",
    Pending = "pending",
    Completed = "completed",
    Failed = "failed",
    WaitingAuthorization = "waitingAuthorization"
}
export declare const ImmutableTransactionBaseCodec: t.TypeC<{
    contract_address: t.BrandC<t.StringC, import("../runtime").EthAddressBrand>;
    offer_id: t.StringC;
    user_wallet_address: t.BrandC<t.StringC, import("../runtime").EthAddressBrand>;
    provider: t.StringC;
}>;
export declare const ImmutableNFTCheckoutPrimaryParamsCodec: t.TypeC<{
    contract_address: t.BrandC<t.StringC, import("../runtime").EthAddressBrand>;
    offer_id: t.StringC;
    user_wallet_address: t.BrandC<t.StringC, import("../runtime").EthAddressBrand>;
    provider: t.StringC;
}>;
export declare type ImmutableNFTCheckoutPrimaryParams = t.OutputOf<typeof ImmutableNFTCheckoutPrimaryParamsCodec>;
export declare const ImmutableNFTCheckoutPrimaryResponseCodec: t.IntersectionC<[t.TypeC<{
    contract_address: t.BrandC<t.StringC, import("../runtime").EthAddressBrand>;
    offer_id: t.StringC;
    user_wallet_address: t.BrandC<t.StringC, import("../runtime").EthAddressBrand>;
    provider: t.StringC;
}>, t.TypeC<{
    transaction_id: t.StringC;
    token_id: t.StringC;
    url: t.StringC;
    seller_wallet_address: t.BrandC<t.StringC, import("../runtime").EthAddressBrand>;
}>]>;
export declare type ImmutableNFTCheckoutPrimaryResponse = t.TypeOf<typeof ImmutableNFTCheckoutPrimaryResponseCodec>;
export declare const ImmutableNFTSecondaryTransactionBaseCodec: t.TypeC<{
    user_wallet_address: t.BrandC<t.StringC, import("../runtime").EthAddressBrand>;
    order_id: t.UnionC<[t.NumberC, t.StringC]>;
    provider: t.StringC;
}>;
export declare const ImmutableNFTCheckoutSecondaryParamsParamsCodec: t.IntersectionC<[t.TypeC<{
    user_wallet_address: t.BrandC<t.StringC, import("../runtime").EthAddressBrand>;
    order_id: t.UnionC<[t.NumberC, t.StringC]>;
    provider: t.StringC;
}>, t.PartialC<{
    widget: t.PartialC<{
        theme: t.StringC;
    }>;
}>]>;
export declare type ImmutableNFTCheckoutSecondaryParams = t.OutputOf<typeof ImmutableNFTCheckoutSecondaryParamsParamsCodec>;
export declare const ImmutableNFTCheckoutSecondaryResponseCodec: t.IntersectionC<[t.TypeC<{
    user_wallet_address: t.BrandC<t.StringC, import("../runtime").EthAddressBrand>;
    order_id: t.UnionC<[t.NumberC, t.StringC]>;
    provider: t.StringC;
}>, t.TypeC<{
    transaction_id: t.StringC;
    token_id: t.StringC;
    contract_address: t.BrandC<t.StringC, import("../runtime").EthAddressBrand>;
    url: t.StringC;
}>]>;
export declare type ImmutableNFTCheckoutSecondaryResponse = t.OutputOf<typeof ImmutableNFTCheckoutSecondaryResponseCodec>;
export declare const ImmutableGetNFTPrimaryTransactionStatusResponseCodec: t.IntersectionC<[t.TypeC<{
    contract_address: t.BrandC<t.StringC, import("../runtime").EthAddressBrand>;
    offer_id: t.StringC;
    user_wallet_address: t.BrandC<t.StringC, import("../runtime").EthAddressBrand>;
    provider: t.StringC;
}>, t.TypeC<{
    transaction_id: t.StringC;
    status: t.StringC;
    seller_wallet_address: t.BrandC<t.StringC, import("../runtime").EthAddressBrand>;
}>, t.PartialC<{
    from_amount: t.NumberC;
    from_currency: t.StringC;
    fees_amount: t.NumberC;
    created_at: t.StringC;
}>]>;
export declare type ImmutableGetNFTPrimaryTransactionStatusResponse = t.TypeOf<typeof ImmutableGetNFTPrimaryTransactionStatusResponseCodec>;
export declare const ImmutableGetNFTSecondaryTransactionStatusResponseCodec: t.IntersectionC<[t.TypeC<{
    user_wallet_address: t.BrandC<t.StringC, import("../runtime").EthAddressBrand>;
    order_id: t.UnionC<[t.NumberC, t.StringC]>;
    provider: t.StringC;
}>, t.TypeC<{
    transaction_id: t.StringC;
    status: t.StringC;
    token_address: t.BrandC<t.StringC, import("../runtime").EthAddressBrand>;
    token_id: t.StringC;
}>]>;
export declare type ImmutableGetNFTSecondaryTransactionStatusResponse = t.TypeOf<typeof ImmutableGetNFTSecondaryTransactionStatusResponseCodec>;
export declare const ImmutableGetPrimaryTransactionsHistoryParamsCodec: t.IntersectionC<[t.PartialC<{
    order_by: t.StringC;
    page_size: t.BrandC<t.NumberC, t.IntBrand>;
    cursor: t.StringC;
    direction: t.Type<ImmutableMethodParams.ImmutableSortOrder, ImmutableMethodParams.ImmutableSortOrder, unknown>;
}>, t.PartialC<{
    id: t.StringC;
    status: t.StringC;
    wallet_address: t.BrandC<t.StringC, import("../runtime").EthAddressBrand>;
    seller_wallet_address: t.BrandC<t.StringC, import("../runtime").EthAddressBrand>;
    provider: t.StringC;
    mint_id: t.StringC;
}>]>;
export declare const ImmutableGetNFTPrimaryTransactionsHistoryResultCodec: t.IntersectionC<[t.IntersectionC<[t.TypeC<{
    cursor: t.StringC;
}>, t.PartialC<{
    remaining: t.BrandC<t.NumberC, t.IntBrand>;
}>]>, t.TypeC<{
    result: t.ArrayC<t.IntersectionC<[t.TypeC<{
        contract_address: t.BrandC<t.StringC, import("../runtime").EthAddressBrand>;
        offer_id: t.StringC;
        user_wallet_address: t.BrandC<t.StringC, import("../runtime").EthAddressBrand>;
        provider: t.StringC;
    }>, t.TypeC<{
        transaction_id: t.StringC;
        status: t.StringC;
        seller_wallet_address: t.BrandC<t.StringC, import("../runtime").EthAddressBrand>;
    }>, t.PartialC<{
        from_amount: t.NumberC;
        from_currency: t.StringC;
        fees_amount: t.NumberC;
        created_at: t.StringC;
    }>]>>;
}>]>;
export declare type ImmutableGetPrimaryTransactionsHistoryParams = t.TypeOf<typeof ImmutableGetPrimaryTransactionsHistoryParamsCodec>;
export declare type ImmutableGetPrimaryTransactionsHistoryParamsTS = t.OutputOf<typeof ImmutableGetPrimaryTransactionsHistoryParamsCodec>;
export declare type ImmutableGetNFTPrimaryTransactionsHistoryResult = t.OutputOf<typeof ImmutableGetNFTPrimaryTransactionsHistoryResultCodec>;
export declare const ImmutableGetSecondaryTransactionsHistoryParamsCodec: t.IntersectionC<[t.PartialC<{
    order_by: t.StringC;
    page_size: t.BrandC<t.NumberC, t.IntBrand>;
    cursor: t.StringC;
    direction: t.Type<ImmutableMethodParams.ImmutableSortOrder, ImmutableMethodParams.ImmutableSortOrder, unknown>;
}>, t.PartialC<{
    transaction_id: t.StringC;
    order_id: t.NumberC;
    wallet_address: t.BrandC<t.StringC, import("../runtime").EthAddressBrand>;
    status: t.StringC;
    provider: t.StringC;
}>]>;
export declare type ImmutableGetSecondaryTransactionsHistoryParams = t.TypeOf<typeof ImmutableGetSecondaryTransactionsHistoryParamsCodec>;
export declare type ImmutableGetSecondaryTransactionsHistoryParamsTS = t.OutputOf<typeof ImmutableGetSecondaryTransactionsHistoryParamsCodec>;
export declare const ImmutableGetNFTSecondaryTransactionsHistoryResultCodec: t.IntersectionC<[t.IntersectionC<[t.TypeC<{
    cursor: t.StringC;
}>, t.PartialC<{
    remaining: t.BrandC<t.NumberC, t.IntBrand>;
}>]>, t.TypeC<{
    result: t.ArrayC<t.IntersectionC<[t.TypeC<{
        transaction_id: t.StringC;
        order_id: t.StringC;
        user_wallet_address: t.BrandC<t.StringC, import("../runtime").EthAddressBrand>;
        provider: t.StringC;
        status: t.StringC;
        created_at: t.StringC;
    }>, t.PartialC<{
        external_id: t.StringC;
        from_amount: t.NumberC;
        from_currency: t.StringC;
        to_amount: t.NumberC;
        to_currency: t.StringC;
        fees_amount: t.NumberC;
        updated_at: t.StringC;
    }>]>>;
}>]>;
export declare type ImmutableGetNFTSecondaryTransactionsHistoryResult = t.TypeOf<typeof ImmutableGetNFTSecondaryTransactionsHistoryResultCodec>;

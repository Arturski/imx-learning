import { Signer } from '@ethersproject/abstract-signer';
import { TransfersApiGetTransferRequest, GetSignableOrderRequest, GetSignableCancelOrderRequest, GetSignableTradeRequest } from '../api';
import { UnsignedMintRequest, UnsignedTransferRequest, UnsignedBatchNftTransferRequest, ERC20Deposit, ERC721Deposit, ETHDeposit, TokenDeposit, UnsignedBurnRequest, ImmutableXConfiguration, ERC721Withdrawal, ERC20Withdrawal, TokenWithdrawal, PrepareWithdrawalRequest, WalletConnection } from '../types';
export declare class Workflows {
    protected config: ImmutableXConfiguration;
    private readonly depositsApi;
    private readonly encodingApi;
    private readonly mintsApi;
    private readonly ordersApi;
    private readonly tokensApi;
    private readonly tradesApi;
    private readonly transfersApi;
    private readonly usersApi;
    private readonly withdrawalsApi;
    private isChainValid;
    constructor(config: ImmutableXConfiguration);
    private validateChain;
    registerOffchain(walletConnection: WalletConnection): Promise<void>;
    isRegisteredOnchain(walletConnection: WalletConnection): Promise<boolean>;
    mint(signer: Signer, request: UnsignedMintRequest): Promise<import("../api").MintTokensResponse>;
    transfer(walletConnection: WalletConnection, request: UnsignedTransferRequest): Promise<import("../api").CreateTransferResponseV1>;
    batchNftTransfer(walletConnection: WalletConnection, request: UnsignedBatchNftTransferRequest): Promise<import("../api").CreateTransferResponse>;
    burn(walletConnection: WalletConnection, request: UnsignedBurnRequest): Promise<import("../api").CreateTransferResponseV1>;
    getBurn(request: TransfersApiGetTransferRequest): Promise<import("axios").AxiosResponse<import("../api").Transfer, any>>;
    deposit(signer: Signer, deposit: TokenDeposit): Promise<import("@ethersproject/abstract-provider").TransactionResponse>;
    depositEth(signer: Signer, deposit: ETHDeposit): Promise<import("@ethersproject/abstract-provider").TransactionResponse>;
    depositERC20(signer: Signer, deposit: ERC20Deposit): Promise<import("@ethersproject/abstract-provider").TransactionResponse>;
    depositERC721(signer: Signer, deposit: ERC721Deposit): Promise<import("@ethersproject/abstract-provider").TransactionResponse>;
    prepareWithdrawal(walletConnection: WalletConnection, request: PrepareWithdrawalRequest): Promise<import("../api").CreateWithdrawalResponse>;
    completeWithdrawal(signer: Signer, starkPublicKey: string, token: TokenWithdrawal): Promise<import("@ethersproject/abstract-provider").TransactionResponse>;
    completeEthWithdrawal(signer: Signer, starkPublicKey: string): Promise<import("@ethersproject/abstract-provider").TransactionResponse>;
    completeERC20Withdrawal(signer: Signer, starkPublicKey: string, token: ERC20Withdrawal): Promise<import("@ethersproject/abstract-provider").TransactionResponse>;
    completeERC721Withdrawal(signer: Signer, starkPublicKey: string, token: ERC721Withdrawal): Promise<import("@ethersproject/abstract-provider").TransactionResponse>;
    createOrder(walletConnection: WalletConnection, request: GetSignableOrderRequest): Promise<{
        order_id: number;
        status: string;
        time: number;
    }>;
    cancelOrder(walletConnection: WalletConnection, request: GetSignableCancelOrderRequest): Promise<{
        order_id: number;
        status: string;
    }>;
    createTrade(walletConnection: WalletConnection, request: GetSignableTradeRequest): Promise<import("../api").CreateTradeResponse>;
}

/**
 * Immutable X API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { CreateTradeRequestV1 } from '../models';
import { CreateTradeResponse } from '../models';
import { GetSignableTradeRequest } from '../models';
import { GetSignableTradeResponse } from '../models';
import { ListTradesResponse } from '../models';
import { Trade } from '../models';
/**
 * TradesApi - axios parameter creator
 * @export
 */
export declare const TradesApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Create a Trade
     * @summary Create a Trade between two parties
     * @param {string} xImxEthAddress eth address
     * @param {string} xImxEthSignature eth signature
     * @param {CreateTradeRequestV1} createTradeRequest create a trade
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTrade: (xImxEthAddress: string, xImxEthSignature: string, createTradeRequest: CreateTradeRequestV1, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get details a signable trade V3
     * @summary Get details a signable trade V3
     * @param {GetSignableTradeRequest} getSignableTradeRequest get a signable trade
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSignableTrade: (getSignableTradeRequest: GetSignableTradeRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get details of a trade with the given ID
     * @summary Get details of a trade with the given ID
     * @param {string} id Trade ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTrade: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get a list of trades
     * @summary Get a list of trades
     * @param {string} [partyAOrderId] Party A\&#39;s (buy order) order id
     * @param {string} [partyATokenType] Party A\&#39;s (buy order) token type of currency used to buy
     * @param {string} [partyATokenAddress] Party A\&#39;s (buy order) token address of currency used to buy
     * @param {string} [partyBOrderId] Party B\&#39;s (sell order) order id
     * @param {string} [partyBTokenType] Party B\&#39;s (sell order) token type of NFT sold - always ERC721
     * @param {string} [partyBTokenAddress] Party B\&#39;s (sell order) collection address of NFT sold
     * @param {string} [partyBTokenId] Party B\&#39;s (sell order) token id of NFT sold
     * @param {number} [pageSize] Page size of the result
     * @param {string} [cursor] Cursor
     * @param {string} [orderBy] Property to sort by
     * @param {string} [direction] Direction to sort (asc/desc)
     * @param {string} [minTimestamp] Minimum timestamp for this trade, in ISO 8601 UTC format. Example: \&#39;2022-05-27T00:10:22Z\&#39;
     * @param {string} [maxTimestamp] Maximum timestamp for this trade, in ISO 8601 UTC format. Example: \&#39;2022-05-27T00:10:22Z\&#39;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listTrades: (partyAOrderId?: string, partyATokenType?: string, partyATokenAddress?: string, partyBOrderId?: string, partyBTokenType?: string, partyBTokenAddress?: string, partyBTokenId?: string, pageSize?: number, cursor?: string, orderBy?: string, direction?: string, minTimestamp?: string, maxTimestamp?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * TradesApi - functional programming interface
 * @export
 */
export declare const TradesApiFp: (configuration?: Configuration) => {
    /**
     * Create a Trade
     * @summary Create a Trade between two parties
     * @param {string} xImxEthAddress eth address
     * @param {string} xImxEthSignature eth signature
     * @param {CreateTradeRequestV1} createTradeRequest create a trade
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTrade(xImxEthAddress: string, xImxEthSignature: string, createTradeRequest: CreateTradeRequestV1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateTradeResponse>>;
    /**
     * Get details a signable trade V3
     * @summary Get details a signable trade V3
     * @param {GetSignableTradeRequest} getSignableTradeRequest get a signable trade
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSignableTrade(getSignableTradeRequest: GetSignableTradeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSignableTradeResponse>>;
    /**
     * Get details of a trade with the given ID
     * @summary Get details of a trade with the given ID
     * @param {string} id Trade ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTrade(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Trade>>;
    /**
     * Get a list of trades
     * @summary Get a list of trades
     * @param {string} [partyAOrderId] Party A\&#39;s (buy order) order id
     * @param {string} [partyATokenType] Party A\&#39;s (buy order) token type of currency used to buy
     * @param {string} [partyATokenAddress] Party A\&#39;s (buy order) token address of currency used to buy
     * @param {string} [partyBOrderId] Party B\&#39;s (sell order) order id
     * @param {string} [partyBTokenType] Party B\&#39;s (sell order) token type of NFT sold - always ERC721
     * @param {string} [partyBTokenAddress] Party B\&#39;s (sell order) collection address of NFT sold
     * @param {string} [partyBTokenId] Party B\&#39;s (sell order) token id of NFT sold
     * @param {number} [pageSize] Page size of the result
     * @param {string} [cursor] Cursor
     * @param {string} [orderBy] Property to sort by
     * @param {string} [direction] Direction to sort (asc/desc)
     * @param {string} [minTimestamp] Minimum timestamp for this trade, in ISO 8601 UTC format. Example: \&#39;2022-05-27T00:10:22Z\&#39;
     * @param {string} [maxTimestamp] Maximum timestamp for this trade, in ISO 8601 UTC format. Example: \&#39;2022-05-27T00:10:22Z\&#39;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listTrades(partyAOrderId?: string, partyATokenType?: string, partyATokenAddress?: string, partyBOrderId?: string, partyBTokenType?: string, partyBTokenAddress?: string, partyBTokenId?: string, pageSize?: number, cursor?: string, orderBy?: string, direction?: string, minTimestamp?: string, maxTimestamp?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListTradesResponse>>;
};
/**
 * TradesApi - factory interface
 * @export
 */
export declare const TradesApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Create a Trade
     * @summary Create a Trade between two parties
     * @param {string} xImxEthAddress eth address
     * @param {string} xImxEthSignature eth signature
     * @param {CreateTradeRequestV1} createTradeRequest create a trade
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTrade(xImxEthAddress: string, xImxEthSignature: string, createTradeRequest: CreateTradeRequestV1, options?: any): AxiosPromise<CreateTradeResponse>;
    /**
     * Get details a signable trade V3
     * @summary Get details a signable trade V3
     * @param {GetSignableTradeRequest} getSignableTradeRequest get a signable trade
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSignableTrade(getSignableTradeRequest: GetSignableTradeRequest, options?: any): AxiosPromise<GetSignableTradeResponse>;
    /**
     * Get details of a trade with the given ID
     * @summary Get details of a trade with the given ID
     * @param {string} id Trade ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTrade(id: string, options?: any): AxiosPromise<Trade>;
    /**
     * Get a list of trades
     * @summary Get a list of trades
     * @param {string} [partyAOrderId] Party A\&#39;s (buy order) order id
     * @param {string} [partyATokenType] Party A\&#39;s (buy order) token type of currency used to buy
     * @param {string} [partyATokenAddress] Party A\&#39;s (buy order) token address of currency used to buy
     * @param {string} [partyBOrderId] Party B\&#39;s (sell order) order id
     * @param {string} [partyBTokenType] Party B\&#39;s (sell order) token type of NFT sold - always ERC721
     * @param {string} [partyBTokenAddress] Party B\&#39;s (sell order) collection address of NFT sold
     * @param {string} [partyBTokenId] Party B\&#39;s (sell order) token id of NFT sold
     * @param {number} [pageSize] Page size of the result
     * @param {string} [cursor] Cursor
     * @param {string} [orderBy] Property to sort by
     * @param {string} [direction] Direction to sort (asc/desc)
     * @param {string} [minTimestamp] Minimum timestamp for this trade, in ISO 8601 UTC format. Example: \&#39;2022-05-27T00:10:22Z\&#39;
     * @param {string} [maxTimestamp] Maximum timestamp for this trade, in ISO 8601 UTC format. Example: \&#39;2022-05-27T00:10:22Z\&#39;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listTrades(partyAOrderId?: string, partyATokenType?: string, partyATokenAddress?: string, partyBOrderId?: string, partyBTokenType?: string, partyBTokenAddress?: string, partyBTokenId?: string, pageSize?: number, cursor?: string, orderBy?: string, direction?: string, minTimestamp?: string, maxTimestamp?: string, options?: any): AxiosPromise<ListTradesResponse>;
};
/**
 * Request parameters for createTrade operation in TradesApi.
 * @export
 * @interface TradesApiCreateTradeRequest
 */
export interface TradesApiCreateTradeRequest {
    /**
     * eth address
     * @type {string}
     * @memberof TradesApiCreateTrade
     */
    readonly xImxEthAddress: string;
    /**
     * eth signature
     * @type {string}
     * @memberof TradesApiCreateTrade
     */
    readonly xImxEthSignature: string;
    /**
     * create a trade
     * @type {CreateTradeRequestV1}
     * @memberof TradesApiCreateTrade
     */
    readonly createTradeRequest: CreateTradeRequestV1;
}
/**
 * Request parameters for getSignableTrade operation in TradesApi.
 * @export
 * @interface TradesApiGetSignableTradeRequest
 */
export interface TradesApiGetSignableTradeRequest {
    /**
     * get a signable trade
     * @type {GetSignableTradeRequest}
     * @memberof TradesApiGetSignableTrade
     */
    readonly getSignableTradeRequest: GetSignableTradeRequest;
}
/**
 * Request parameters for getTrade operation in TradesApi.
 * @export
 * @interface TradesApiGetTradeRequest
 */
export interface TradesApiGetTradeRequest {
    /**
     * Trade ID
     * @type {string}
     * @memberof TradesApiGetTrade
     */
    readonly id: string;
}
/**
 * Request parameters for listTrades operation in TradesApi.
 * @export
 * @interface TradesApiListTradesRequest
 */
export interface TradesApiListTradesRequest {
    /**
     * Party A\&#39;s (buy order) order id
     * @type {string}
     * @memberof TradesApiListTrades
     */
    readonly partyAOrderId?: string;
    /**
     * Party A\&#39;s (buy order) token type of currency used to buy
     * @type {string}
     * @memberof TradesApiListTrades
     */
    readonly partyATokenType?: string;
    /**
     * Party A\&#39;s (buy order) token address of currency used to buy
     * @type {string}
     * @memberof TradesApiListTrades
     */
    readonly partyATokenAddress?: string;
    /**
     * Party B\&#39;s (sell order) order id
     * @type {string}
     * @memberof TradesApiListTrades
     */
    readonly partyBOrderId?: string;
    /**
     * Party B\&#39;s (sell order) token type of NFT sold - always ERC721
     * @type {string}
     * @memberof TradesApiListTrades
     */
    readonly partyBTokenType?: string;
    /**
     * Party B\&#39;s (sell order) collection address of NFT sold
     * @type {string}
     * @memberof TradesApiListTrades
     */
    readonly partyBTokenAddress?: string;
    /**
     * Party B\&#39;s (sell order) token id of NFT sold
     * @type {string}
     * @memberof TradesApiListTrades
     */
    readonly partyBTokenId?: string;
    /**
     * Page size of the result
     * @type {number}
     * @memberof TradesApiListTrades
     */
    readonly pageSize?: number;
    /**
     * Cursor
     * @type {string}
     * @memberof TradesApiListTrades
     */
    readonly cursor?: string;
    /**
     * Property to sort by
     * @type {string}
     * @memberof TradesApiListTrades
     */
    readonly orderBy?: string;
    /**
     * Direction to sort (asc/desc)
     * @type {string}
     * @memberof TradesApiListTrades
     */
    readonly direction?: string;
    /**
     * Minimum timestamp for this trade, in ISO 8601 UTC format. Example: \&#39;2022-05-27T00:10:22Z\&#39;
     * @type {string}
     * @memberof TradesApiListTrades
     */
    readonly minTimestamp?: string;
    /**
     * Maximum timestamp for this trade, in ISO 8601 UTC format. Example: \&#39;2022-05-27T00:10:22Z\&#39;
     * @type {string}
     * @memberof TradesApiListTrades
     */
    readonly maxTimestamp?: string;
}
/**
 * TradesApi - object-oriented interface
 * @export
 * @class TradesApi
 * @extends {BaseAPI}
 */
export declare class TradesApi extends BaseAPI {
    /**
     * Create a Trade
     * @summary Create a Trade between two parties
     * @param {TradesApiCreateTradeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TradesApi
     */
    createTrade(requestParameters: TradesApiCreateTradeRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateTradeResponse, any>>;
    /**
     * Get details a signable trade V3
     * @summary Get details a signable trade V3
     * @param {TradesApiGetSignableTradeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TradesApi
     */
    getSignableTrade(requestParameters: TradesApiGetSignableTradeRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetSignableTradeResponse, any>>;
    /**
     * Get details of a trade with the given ID
     * @summary Get details of a trade with the given ID
     * @param {TradesApiGetTradeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TradesApi
     */
    getTrade(requestParameters: TradesApiGetTradeRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Trade, any>>;
    /**
     * Get a list of trades
     * @summary Get a list of trades
     * @param {TradesApiListTradesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TradesApi
     */
    listTrades(requestParameters?: TradesApiListTradesRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ListTradesResponse, any>>;
}

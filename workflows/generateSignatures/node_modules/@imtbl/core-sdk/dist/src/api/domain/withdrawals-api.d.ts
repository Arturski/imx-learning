/**
 * Immutable X API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { CreateWithdrawalRequest } from '../models';
import { CreateWithdrawalResponse } from '../models';
import { GetSignableWithdrawalRequest } from '../models';
import { GetSignableWithdrawalResponse } from '../models';
import { ListWithdrawalsResponse } from '../models';
import { Withdrawal } from '../models';
/**
 * WithdrawalsApi - axios parameter creator
 * @export
 */
export declare const WithdrawalsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Creates a withdrawal
     * @summary Creates a withdrawal of a token
     * @param {string} xImxEthAddress eth address
     * @param {string} xImxEthSignature eth signature
     * @param {CreateWithdrawalRequest} createWithdrawalRequest create a withdrawal
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createWithdrawal: (xImxEthAddress: string, xImxEthSignature: string, createWithdrawalRequest: CreateWithdrawalRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Gets details of a signable withdrawal
     * @summary Gets details of a signable withdrawal
     * @param {GetSignableWithdrawalRequest} getSignableWithdrawalRequest get details of signable withdrawal
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSignableWithdrawal: (getSignableWithdrawalRequest: GetSignableWithdrawalRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Gets details of withdrawal with the given ID
     * @summary Gets details of withdrawal with the given ID
     * @param {string} id Withdrawal ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWithdrawal: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get a list of withdrawals
     * @summary Get a list of withdrawals
     * @param {boolean} [withdrawnToWallet] Withdrawal has been transferred to user\&#39;s Layer 1 wallet
     * @param {string} [rollupStatus] Status of the on-chain batch confirmation for this withdrawal
     * @param {number} [pageSize] Page size of the result
     * @param {string} [cursor] Cursor
     * @param {string} [orderBy] Property to sort by
     * @param {string} [direction] Direction to sort (asc/desc)
     * @param {string} [user] Ethereum address of the user who submitted this withdrawal
     * @param {string} [status] Status of this withdrawal
     * @param {string} [minTimestamp] Minimum timestamp for this deposit, in ISO 8601 UTC format. Example: \&#39;2022-05-27T00:10:22Z\&#39;
     * @param {string} [maxTimestamp] Maximum timestamp for this deposit, in ISO 8601 UTC format. Example: \&#39;2022-05-27T00:10:22Z\&#39;
     * @param {string} [tokenType] Token type of the withdrawn asset
     * @param {string} [tokenId] ERC721 Token ID of the minted asset
     * @param {string} [assetId] Internal IMX ID of the minted asset
     * @param {string} [tokenAddress] Token address of the withdrawn asset
     * @param {string} [tokenName] Token name of the withdrawn asset
     * @param {string} [minQuantity] Min quantity for the withdrawn asset
     * @param {string} [maxQuantity] Max quantity for the withdrawn asset
     * @param {string} [metadata] JSON-encoded metadata filters for the withdrawn asset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listWithdrawals: (withdrawnToWallet?: boolean, rollupStatus?: string, pageSize?: number, cursor?: string, orderBy?: string, direction?: string, user?: string, status?: string, minTimestamp?: string, maxTimestamp?: string, tokenType?: string, tokenId?: string, assetId?: string, tokenAddress?: string, tokenName?: string, minQuantity?: string, maxQuantity?: string, metadata?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * WithdrawalsApi - functional programming interface
 * @export
 */
export declare const WithdrawalsApiFp: (configuration?: Configuration) => {
    /**
     * Creates a withdrawal
     * @summary Creates a withdrawal of a token
     * @param {string} xImxEthAddress eth address
     * @param {string} xImxEthSignature eth signature
     * @param {CreateWithdrawalRequest} createWithdrawalRequest create a withdrawal
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createWithdrawal(xImxEthAddress: string, xImxEthSignature: string, createWithdrawalRequest: CreateWithdrawalRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateWithdrawalResponse>>;
    /**
     * Gets details of a signable withdrawal
     * @summary Gets details of a signable withdrawal
     * @param {GetSignableWithdrawalRequest} getSignableWithdrawalRequest get details of signable withdrawal
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSignableWithdrawal(getSignableWithdrawalRequest: GetSignableWithdrawalRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSignableWithdrawalResponse>>;
    /**
     * Gets details of withdrawal with the given ID
     * @summary Gets details of withdrawal with the given ID
     * @param {string} id Withdrawal ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWithdrawal(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Withdrawal>>;
    /**
     * Get a list of withdrawals
     * @summary Get a list of withdrawals
     * @param {boolean} [withdrawnToWallet] Withdrawal has been transferred to user\&#39;s Layer 1 wallet
     * @param {string} [rollupStatus] Status of the on-chain batch confirmation for this withdrawal
     * @param {number} [pageSize] Page size of the result
     * @param {string} [cursor] Cursor
     * @param {string} [orderBy] Property to sort by
     * @param {string} [direction] Direction to sort (asc/desc)
     * @param {string} [user] Ethereum address of the user who submitted this withdrawal
     * @param {string} [status] Status of this withdrawal
     * @param {string} [minTimestamp] Minimum timestamp for this deposit, in ISO 8601 UTC format. Example: \&#39;2022-05-27T00:10:22Z\&#39;
     * @param {string} [maxTimestamp] Maximum timestamp for this deposit, in ISO 8601 UTC format. Example: \&#39;2022-05-27T00:10:22Z\&#39;
     * @param {string} [tokenType] Token type of the withdrawn asset
     * @param {string} [tokenId] ERC721 Token ID of the minted asset
     * @param {string} [assetId] Internal IMX ID of the minted asset
     * @param {string} [tokenAddress] Token address of the withdrawn asset
     * @param {string} [tokenName] Token name of the withdrawn asset
     * @param {string} [minQuantity] Min quantity for the withdrawn asset
     * @param {string} [maxQuantity] Max quantity for the withdrawn asset
     * @param {string} [metadata] JSON-encoded metadata filters for the withdrawn asset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listWithdrawals(withdrawnToWallet?: boolean, rollupStatus?: string, pageSize?: number, cursor?: string, orderBy?: string, direction?: string, user?: string, status?: string, minTimestamp?: string, maxTimestamp?: string, tokenType?: string, tokenId?: string, assetId?: string, tokenAddress?: string, tokenName?: string, minQuantity?: string, maxQuantity?: string, metadata?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListWithdrawalsResponse>>;
};
/**
 * WithdrawalsApi - factory interface
 * @export
 */
export declare const WithdrawalsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Creates a withdrawal
     * @summary Creates a withdrawal of a token
     * @param {string} xImxEthAddress eth address
     * @param {string} xImxEthSignature eth signature
     * @param {CreateWithdrawalRequest} createWithdrawalRequest create a withdrawal
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createWithdrawal(xImxEthAddress: string, xImxEthSignature: string, createWithdrawalRequest: CreateWithdrawalRequest, options?: any): AxiosPromise<CreateWithdrawalResponse>;
    /**
     * Gets details of a signable withdrawal
     * @summary Gets details of a signable withdrawal
     * @param {GetSignableWithdrawalRequest} getSignableWithdrawalRequest get details of signable withdrawal
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSignableWithdrawal(getSignableWithdrawalRequest: GetSignableWithdrawalRequest, options?: any): AxiosPromise<GetSignableWithdrawalResponse>;
    /**
     * Gets details of withdrawal with the given ID
     * @summary Gets details of withdrawal with the given ID
     * @param {string} id Withdrawal ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWithdrawal(id: string, options?: any): AxiosPromise<Withdrawal>;
    /**
     * Get a list of withdrawals
     * @summary Get a list of withdrawals
     * @param {boolean} [withdrawnToWallet] Withdrawal has been transferred to user\&#39;s Layer 1 wallet
     * @param {string} [rollupStatus] Status of the on-chain batch confirmation for this withdrawal
     * @param {number} [pageSize] Page size of the result
     * @param {string} [cursor] Cursor
     * @param {string} [orderBy] Property to sort by
     * @param {string} [direction] Direction to sort (asc/desc)
     * @param {string} [user] Ethereum address of the user who submitted this withdrawal
     * @param {string} [status] Status of this withdrawal
     * @param {string} [minTimestamp] Minimum timestamp for this deposit, in ISO 8601 UTC format. Example: \&#39;2022-05-27T00:10:22Z\&#39;
     * @param {string} [maxTimestamp] Maximum timestamp for this deposit, in ISO 8601 UTC format. Example: \&#39;2022-05-27T00:10:22Z\&#39;
     * @param {string} [tokenType] Token type of the withdrawn asset
     * @param {string} [tokenId] ERC721 Token ID of the minted asset
     * @param {string} [assetId] Internal IMX ID of the minted asset
     * @param {string} [tokenAddress] Token address of the withdrawn asset
     * @param {string} [tokenName] Token name of the withdrawn asset
     * @param {string} [minQuantity] Min quantity for the withdrawn asset
     * @param {string} [maxQuantity] Max quantity for the withdrawn asset
     * @param {string} [metadata] JSON-encoded metadata filters for the withdrawn asset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listWithdrawals(withdrawnToWallet?: boolean, rollupStatus?: string, pageSize?: number, cursor?: string, orderBy?: string, direction?: string, user?: string, status?: string, minTimestamp?: string, maxTimestamp?: string, tokenType?: string, tokenId?: string, assetId?: string, tokenAddress?: string, tokenName?: string, minQuantity?: string, maxQuantity?: string, metadata?: string, options?: any): AxiosPromise<ListWithdrawalsResponse>;
};
/**
 * Request parameters for createWithdrawal operation in WithdrawalsApi.
 * @export
 * @interface WithdrawalsApiCreateWithdrawalRequest
 */
export interface WithdrawalsApiCreateWithdrawalRequest {
    /**
     * eth address
     * @type {string}
     * @memberof WithdrawalsApiCreateWithdrawal
     */
    readonly xImxEthAddress: string;
    /**
     * eth signature
     * @type {string}
     * @memberof WithdrawalsApiCreateWithdrawal
     */
    readonly xImxEthSignature: string;
    /**
     * create a withdrawal
     * @type {CreateWithdrawalRequest}
     * @memberof WithdrawalsApiCreateWithdrawal
     */
    readonly createWithdrawalRequest: CreateWithdrawalRequest;
}
/**
 * Request parameters for getSignableWithdrawal operation in WithdrawalsApi.
 * @export
 * @interface WithdrawalsApiGetSignableWithdrawalRequest
 */
export interface WithdrawalsApiGetSignableWithdrawalRequest {
    /**
     * get details of signable withdrawal
     * @type {GetSignableWithdrawalRequest}
     * @memberof WithdrawalsApiGetSignableWithdrawal
     */
    readonly getSignableWithdrawalRequest: GetSignableWithdrawalRequest;
}
/**
 * Request parameters for getWithdrawal operation in WithdrawalsApi.
 * @export
 * @interface WithdrawalsApiGetWithdrawalRequest
 */
export interface WithdrawalsApiGetWithdrawalRequest {
    /**
     * Withdrawal ID
     * @type {string}
     * @memberof WithdrawalsApiGetWithdrawal
     */
    readonly id: string;
}
/**
 * Request parameters for listWithdrawals operation in WithdrawalsApi.
 * @export
 * @interface WithdrawalsApiListWithdrawalsRequest
 */
export interface WithdrawalsApiListWithdrawalsRequest {
    /**
     * Withdrawal has been transferred to user\&#39;s Layer 1 wallet
     * @type {boolean}
     * @memberof WithdrawalsApiListWithdrawals
     */
    readonly withdrawnToWallet?: boolean;
    /**
     * Status of the on-chain batch confirmation for this withdrawal
     * @type {string}
     * @memberof WithdrawalsApiListWithdrawals
     */
    readonly rollupStatus?: string;
    /**
     * Page size of the result
     * @type {number}
     * @memberof WithdrawalsApiListWithdrawals
     */
    readonly pageSize?: number;
    /**
     * Cursor
     * @type {string}
     * @memberof WithdrawalsApiListWithdrawals
     */
    readonly cursor?: string;
    /**
     * Property to sort by
     * @type {string}
     * @memberof WithdrawalsApiListWithdrawals
     */
    readonly orderBy?: string;
    /**
     * Direction to sort (asc/desc)
     * @type {string}
     * @memberof WithdrawalsApiListWithdrawals
     */
    readonly direction?: string;
    /**
     * Ethereum address of the user who submitted this withdrawal
     * @type {string}
     * @memberof WithdrawalsApiListWithdrawals
     */
    readonly user?: string;
    /**
     * Status of this withdrawal
     * @type {string}
     * @memberof WithdrawalsApiListWithdrawals
     */
    readonly status?: string;
    /**
     * Minimum timestamp for this deposit, in ISO 8601 UTC format. Example: \&#39;2022-05-27T00:10:22Z\&#39;
     * @type {string}
     * @memberof WithdrawalsApiListWithdrawals
     */
    readonly minTimestamp?: string;
    /**
     * Maximum timestamp for this deposit, in ISO 8601 UTC format. Example: \&#39;2022-05-27T00:10:22Z\&#39;
     * @type {string}
     * @memberof WithdrawalsApiListWithdrawals
     */
    readonly maxTimestamp?: string;
    /**
     * Token type of the withdrawn asset
     * @type {string}
     * @memberof WithdrawalsApiListWithdrawals
     */
    readonly tokenType?: string;
    /**
     * ERC721 Token ID of the minted asset
     * @type {string}
     * @memberof WithdrawalsApiListWithdrawals
     */
    readonly tokenId?: string;
    /**
     * Internal IMX ID of the minted asset
     * @type {string}
     * @memberof WithdrawalsApiListWithdrawals
     */
    readonly assetId?: string;
    /**
     * Token address of the withdrawn asset
     * @type {string}
     * @memberof WithdrawalsApiListWithdrawals
     */
    readonly tokenAddress?: string;
    /**
     * Token name of the withdrawn asset
     * @type {string}
     * @memberof WithdrawalsApiListWithdrawals
     */
    readonly tokenName?: string;
    /**
     * Min quantity for the withdrawn asset
     * @type {string}
     * @memberof WithdrawalsApiListWithdrawals
     */
    readonly minQuantity?: string;
    /**
     * Max quantity for the withdrawn asset
     * @type {string}
     * @memberof WithdrawalsApiListWithdrawals
     */
    readonly maxQuantity?: string;
    /**
     * JSON-encoded metadata filters for the withdrawn asset
     * @type {string}
     * @memberof WithdrawalsApiListWithdrawals
     */
    readonly metadata?: string;
}
/**
 * WithdrawalsApi - object-oriented interface
 * @export
 * @class WithdrawalsApi
 * @extends {BaseAPI}
 */
export declare class WithdrawalsApi extends BaseAPI {
    /**
     * Creates a withdrawal
     * @summary Creates a withdrawal of a token
     * @param {WithdrawalsApiCreateWithdrawalRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WithdrawalsApi
     */
    createWithdrawal(requestParameters: WithdrawalsApiCreateWithdrawalRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateWithdrawalResponse, any>>;
    /**
     * Gets details of a signable withdrawal
     * @summary Gets details of a signable withdrawal
     * @param {WithdrawalsApiGetSignableWithdrawalRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WithdrawalsApi
     */
    getSignableWithdrawal(requestParameters: WithdrawalsApiGetSignableWithdrawalRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetSignableWithdrawalResponse, any>>;
    /**
     * Gets details of withdrawal with the given ID
     * @summary Gets details of withdrawal with the given ID
     * @param {WithdrawalsApiGetWithdrawalRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WithdrawalsApi
     */
    getWithdrawal(requestParameters: WithdrawalsApiGetWithdrawalRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Withdrawal, any>>;
    /**
     * Get a list of withdrawals
     * @summary Get a list of withdrawals
     * @param {WithdrawalsApiListWithdrawalsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WithdrawalsApi
     */
    listWithdrawals(requestParameters?: WithdrawalsApiListWithdrawalsRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ListWithdrawalsResponse, any>>;
}

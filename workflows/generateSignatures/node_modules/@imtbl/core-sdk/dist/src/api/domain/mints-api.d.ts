/**
 * Immutable X API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { ListMintsResponse } from '../models';
import { Mint } from '../models';
import { MintRequest } from '../models';
import { MintTokensResponse } from '../models';
import { MintableTokenDetails } from '../models';
/**
 * MintsApi - axios parameter creator
 * @export
 */
export declare const MintsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Get details of a mint with the given ID
     * @summary Get details of a mint with the given ID
     * @param {string} id Mint ID. This is the transaction_id returned from listMints
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMint: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get details of a mintable token with the given token address and token ID
     * @summary Get details of a mintable token with the given token address and token ID
     * @param {string} tokenAddress Address of the ERC721 contract
     * @param {string} tokenId ERC721 token ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMintableTokenDetailsByClientTokenId: (tokenAddress: string, tokenId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get a list of mints
     * @summary Get a list of mints
     * @param {number} [pageSize] Page size of the result
     * @param {string} [cursor] Cursor
     * @param {string} [orderBy] Property to sort by
     * @param {string} [direction] Direction to sort (asc/desc)
     * @param {string} [user] Ethereum address of the user who submitted this mint
     * @param {string} [status] Status of this mint
     * @param {string} [minTimestamp] Minimum timestamp for this mint, in ISO 8601 UTC format. Example: \&#39;2022-05-27T00:10:22Z\&#39;
     * @param {string} [maxTimestamp] Maximum timestamp for this mint, in ISO 8601 UTC format. Example: \&#39;2022-05-27T00:10:22Z\&#39;
     * @param {string} [tokenType] Token type of the minted asset
     * @param {string} [tokenId] ERC721 Token ID of the minted asset
     * @param {string} [assetId] Internal IMX ID of the minted asset
     * @param {string} [tokenName] Token Name of the minted asset
     * @param {string} [tokenAddress] Token address of the minted asset
     * @param {string} [minQuantity] Min quantity for the minted asset
     * @param {string} [maxQuantity] Max quantity for the minted asset
     * @param {string} [metadata] JSON-encoded metadata filters for the minted asset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listMints: (pageSize?: number, cursor?: string, orderBy?: string, direction?: string, user?: string, status?: string, minTimestamp?: string, maxTimestamp?: string, tokenType?: string, tokenId?: string, assetId?: string, tokenName?: string, tokenAddress?: string, minQuantity?: string, maxQuantity?: string, metadata?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Mint tokens in a batch with fees
     * @summary Mint Tokens V2
     * @param {Array<MintRequest>} mintTokensRequestV2 details of tokens to mint
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    mintTokens: (mintTokensRequestV2: Array<MintRequest>, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * MintsApi - functional programming interface
 * @export
 */
export declare const MintsApiFp: (configuration?: Configuration) => {
    /**
     * Get details of a mint with the given ID
     * @summary Get details of a mint with the given ID
     * @param {string} id Mint ID. This is the transaction_id returned from listMints
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMint(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Mint>>;
    /**
     * Get details of a mintable token with the given token address and token ID
     * @summary Get details of a mintable token with the given token address and token ID
     * @param {string} tokenAddress Address of the ERC721 contract
     * @param {string} tokenId ERC721 token ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMintableTokenDetailsByClientTokenId(tokenAddress: string, tokenId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MintableTokenDetails>>;
    /**
     * Get a list of mints
     * @summary Get a list of mints
     * @param {number} [pageSize] Page size of the result
     * @param {string} [cursor] Cursor
     * @param {string} [orderBy] Property to sort by
     * @param {string} [direction] Direction to sort (asc/desc)
     * @param {string} [user] Ethereum address of the user who submitted this mint
     * @param {string} [status] Status of this mint
     * @param {string} [minTimestamp] Minimum timestamp for this mint, in ISO 8601 UTC format. Example: \&#39;2022-05-27T00:10:22Z\&#39;
     * @param {string} [maxTimestamp] Maximum timestamp for this mint, in ISO 8601 UTC format. Example: \&#39;2022-05-27T00:10:22Z\&#39;
     * @param {string} [tokenType] Token type of the minted asset
     * @param {string} [tokenId] ERC721 Token ID of the minted asset
     * @param {string} [assetId] Internal IMX ID of the minted asset
     * @param {string} [tokenName] Token Name of the minted asset
     * @param {string} [tokenAddress] Token address of the minted asset
     * @param {string} [minQuantity] Min quantity for the minted asset
     * @param {string} [maxQuantity] Max quantity for the minted asset
     * @param {string} [metadata] JSON-encoded metadata filters for the minted asset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listMints(pageSize?: number, cursor?: string, orderBy?: string, direction?: string, user?: string, status?: string, minTimestamp?: string, maxTimestamp?: string, tokenType?: string, tokenId?: string, assetId?: string, tokenName?: string, tokenAddress?: string, minQuantity?: string, maxQuantity?: string, metadata?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListMintsResponse>>;
    /**
     * Mint tokens in a batch with fees
     * @summary Mint Tokens V2
     * @param {Array<MintRequest>} mintTokensRequestV2 details of tokens to mint
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    mintTokens(mintTokensRequestV2: Array<MintRequest>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MintTokensResponse>>;
};
/**
 * MintsApi - factory interface
 * @export
 */
export declare const MintsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Get details of a mint with the given ID
     * @summary Get details of a mint with the given ID
     * @param {string} id Mint ID. This is the transaction_id returned from listMints
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMint(id: string, options?: any): AxiosPromise<Mint>;
    /**
     * Get details of a mintable token with the given token address and token ID
     * @summary Get details of a mintable token with the given token address and token ID
     * @param {string} tokenAddress Address of the ERC721 contract
     * @param {string} tokenId ERC721 token ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMintableTokenDetailsByClientTokenId(tokenAddress: string, tokenId: string, options?: any): AxiosPromise<MintableTokenDetails>;
    /**
     * Get a list of mints
     * @summary Get a list of mints
     * @param {number} [pageSize] Page size of the result
     * @param {string} [cursor] Cursor
     * @param {string} [orderBy] Property to sort by
     * @param {string} [direction] Direction to sort (asc/desc)
     * @param {string} [user] Ethereum address of the user who submitted this mint
     * @param {string} [status] Status of this mint
     * @param {string} [minTimestamp] Minimum timestamp for this mint, in ISO 8601 UTC format. Example: \&#39;2022-05-27T00:10:22Z\&#39;
     * @param {string} [maxTimestamp] Maximum timestamp for this mint, in ISO 8601 UTC format. Example: \&#39;2022-05-27T00:10:22Z\&#39;
     * @param {string} [tokenType] Token type of the minted asset
     * @param {string} [tokenId] ERC721 Token ID of the minted asset
     * @param {string} [assetId] Internal IMX ID of the minted asset
     * @param {string} [tokenName] Token Name of the minted asset
     * @param {string} [tokenAddress] Token address of the minted asset
     * @param {string} [minQuantity] Min quantity for the minted asset
     * @param {string} [maxQuantity] Max quantity for the minted asset
     * @param {string} [metadata] JSON-encoded metadata filters for the minted asset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listMints(pageSize?: number, cursor?: string, orderBy?: string, direction?: string, user?: string, status?: string, minTimestamp?: string, maxTimestamp?: string, tokenType?: string, tokenId?: string, assetId?: string, tokenName?: string, tokenAddress?: string, minQuantity?: string, maxQuantity?: string, metadata?: string, options?: any): AxiosPromise<ListMintsResponse>;
    /**
     * Mint tokens in a batch with fees
     * @summary Mint Tokens V2
     * @param {Array<MintRequest>} mintTokensRequestV2 details of tokens to mint
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    mintTokens(mintTokensRequestV2: Array<MintRequest>, options?: any): AxiosPromise<MintTokensResponse>;
};
/**
 * Request parameters for getMint operation in MintsApi.
 * @export
 * @interface MintsApiGetMintRequest
 */
export interface MintsApiGetMintRequest {
    /**
     * Mint ID. This is the transaction_id returned from listMints
     * @type {string}
     * @memberof MintsApiGetMint
     */
    readonly id: string;
}
/**
 * Request parameters for getMintableTokenDetailsByClientTokenId operation in MintsApi.
 * @export
 * @interface MintsApiGetMintableTokenDetailsByClientTokenIdRequest
 */
export interface MintsApiGetMintableTokenDetailsByClientTokenIdRequest {
    /**
     * Address of the ERC721 contract
     * @type {string}
     * @memberof MintsApiGetMintableTokenDetailsByClientTokenId
     */
    readonly tokenAddress: string;
    /**
     * ERC721 token ID
     * @type {string}
     * @memberof MintsApiGetMintableTokenDetailsByClientTokenId
     */
    readonly tokenId: string;
}
/**
 * Request parameters for listMints operation in MintsApi.
 * @export
 * @interface MintsApiListMintsRequest
 */
export interface MintsApiListMintsRequest {
    /**
     * Page size of the result
     * @type {number}
     * @memberof MintsApiListMints
     */
    readonly pageSize?: number;
    /**
     * Cursor
     * @type {string}
     * @memberof MintsApiListMints
     */
    readonly cursor?: string;
    /**
     * Property to sort by
     * @type {string}
     * @memberof MintsApiListMints
     */
    readonly orderBy?: string;
    /**
     * Direction to sort (asc/desc)
     * @type {string}
     * @memberof MintsApiListMints
     */
    readonly direction?: string;
    /**
     * Ethereum address of the user who submitted this mint
     * @type {string}
     * @memberof MintsApiListMints
     */
    readonly user?: string;
    /**
     * Status of this mint
     * @type {string}
     * @memberof MintsApiListMints
     */
    readonly status?: string;
    /**
     * Minimum timestamp for this mint, in ISO 8601 UTC format. Example: \&#39;2022-05-27T00:10:22Z\&#39;
     * @type {string}
     * @memberof MintsApiListMints
     */
    readonly minTimestamp?: string;
    /**
     * Maximum timestamp for this mint, in ISO 8601 UTC format. Example: \&#39;2022-05-27T00:10:22Z\&#39;
     * @type {string}
     * @memberof MintsApiListMints
     */
    readonly maxTimestamp?: string;
    /**
     * Token type of the minted asset
     * @type {string}
     * @memberof MintsApiListMints
     */
    readonly tokenType?: string;
    /**
     * ERC721 Token ID of the minted asset
     * @type {string}
     * @memberof MintsApiListMints
     */
    readonly tokenId?: string;
    /**
     * Internal IMX ID of the minted asset
     * @type {string}
     * @memberof MintsApiListMints
     */
    readonly assetId?: string;
    /**
     * Token Name of the minted asset
     * @type {string}
     * @memberof MintsApiListMints
     */
    readonly tokenName?: string;
    /**
     * Token address of the minted asset
     * @type {string}
     * @memberof MintsApiListMints
     */
    readonly tokenAddress?: string;
    /**
     * Min quantity for the minted asset
     * @type {string}
     * @memberof MintsApiListMints
     */
    readonly minQuantity?: string;
    /**
     * Max quantity for the minted asset
     * @type {string}
     * @memberof MintsApiListMints
     */
    readonly maxQuantity?: string;
    /**
     * JSON-encoded metadata filters for the minted asset
     * @type {string}
     * @memberof MintsApiListMints
     */
    readonly metadata?: string;
}
/**
 * Request parameters for mintTokens operation in MintsApi.
 * @export
 * @interface MintsApiMintTokensRequest
 */
export interface MintsApiMintTokensRequest {
    /**
     * details of tokens to mint
     * @type {Array<MintRequest>}
     * @memberof MintsApiMintTokens
     */
    readonly mintTokensRequestV2: Array<MintRequest>;
}
/**
 * MintsApi - object-oriented interface
 * @export
 * @class MintsApi
 * @extends {BaseAPI}
 */
export declare class MintsApi extends BaseAPI {
    /**
     * Get details of a mint with the given ID
     * @summary Get details of a mint with the given ID
     * @param {MintsApiGetMintRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MintsApi
     */
    getMint(requestParameters: MintsApiGetMintRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Mint, any>>;
    /**
     * Get details of a mintable token with the given token address and token ID
     * @summary Get details of a mintable token with the given token address and token ID
     * @param {MintsApiGetMintableTokenDetailsByClientTokenIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MintsApi
     */
    getMintableTokenDetailsByClientTokenId(requestParameters: MintsApiGetMintableTokenDetailsByClientTokenIdRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<MintableTokenDetails, any>>;
    /**
     * Get a list of mints
     * @summary Get a list of mints
     * @param {MintsApiListMintsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MintsApi
     */
    listMints(requestParameters?: MintsApiListMintsRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ListMintsResponse, any>>;
    /**
     * Mint tokens in a batch with fees
     * @summary Mint Tokens V2
     * @param {MintsApiMintTokensRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MintsApi
     */
    mintTokens(requestParameters: MintsApiMintTokensRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<MintTokensResponse, any>>;
}

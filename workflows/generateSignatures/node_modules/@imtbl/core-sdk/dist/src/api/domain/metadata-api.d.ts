/**
 * Immutable X API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { AddMetadataSchemaToCollectionRequest } from '../models';
import { MetadataSchemaProperty } from '../models';
import { MetadataSchemaRequest } from '../models';
import { SuccessResponse } from '../models';
/**
 * MetadataApi - axios parameter creator
 * @export
 */
export declare const MetadataApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Add metadata schema to collection
     * @summary Add metadata schema to collection
     * @param {string} address Collection contract address
     * @param {string} iMXSignature String created by signing wallet address and timestamp
     * @param {string} iMXTimestamp Unix Epoc timestamp
     * @param {AddMetadataSchemaToCollectionRequest} addMetadataSchemaToCollectionRequest add metadata schema to a collection
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addMetadataSchemaToCollection: (address: string, iMXSignature: string, iMXTimestamp: string, addMetadataSchemaToCollectionRequest: AddMetadataSchemaToCollectionRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get collection metadata schema
     * @summary Get collection metadata schema
     * @param {string} address Collection contract address
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMetadataSchema: (address: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update metadata schema by name
     * @summary Update metadata schema by name
     * @param {string} address Collection contract address
     * @param {string} name Metadata schema name
     * @param {string} iMXSignature String created by signing wallet address and timestamp
     * @param {string} iMXTimestamp Unix Epoc timestamp
     * @param {MetadataSchemaRequest} metadataSchemaRequest update metadata schema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateMetadataSchemaByName: (address: string, name: string, iMXSignature: string, iMXTimestamp: string, metadataSchemaRequest: MetadataSchemaRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * MetadataApi - functional programming interface
 * @export
 */
export declare const MetadataApiFp: (configuration?: Configuration) => {
    /**
     * Add metadata schema to collection
     * @summary Add metadata schema to collection
     * @param {string} address Collection contract address
     * @param {string} iMXSignature String created by signing wallet address and timestamp
     * @param {string} iMXTimestamp Unix Epoc timestamp
     * @param {AddMetadataSchemaToCollectionRequest} addMetadataSchemaToCollectionRequest add metadata schema to a collection
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addMetadataSchemaToCollection(address: string, iMXSignature: string, iMXTimestamp: string, addMetadataSchemaToCollectionRequest: AddMetadataSchemaToCollectionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>>;
    /**
     * Get collection metadata schema
     * @summary Get collection metadata schema
     * @param {string} address Collection contract address
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMetadataSchema(address: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MetadataSchemaProperty>>>;
    /**
     * Update metadata schema by name
     * @summary Update metadata schema by name
     * @param {string} address Collection contract address
     * @param {string} name Metadata schema name
     * @param {string} iMXSignature String created by signing wallet address and timestamp
     * @param {string} iMXTimestamp Unix Epoc timestamp
     * @param {MetadataSchemaRequest} metadataSchemaRequest update metadata schema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateMetadataSchemaByName(address: string, name: string, iMXSignature: string, iMXTimestamp: string, metadataSchemaRequest: MetadataSchemaRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>>;
};
/**
 * MetadataApi - factory interface
 * @export
 */
export declare const MetadataApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Add metadata schema to collection
     * @summary Add metadata schema to collection
     * @param {string} address Collection contract address
     * @param {string} iMXSignature String created by signing wallet address and timestamp
     * @param {string} iMXTimestamp Unix Epoc timestamp
     * @param {AddMetadataSchemaToCollectionRequest} addMetadataSchemaToCollectionRequest add metadata schema to a collection
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addMetadataSchemaToCollection(address: string, iMXSignature: string, iMXTimestamp: string, addMetadataSchemaToCollectionRequest: AddMetadataSchemaToCollectionRequest, options?: any): AxiosPromise<SuccessResponse>;
    /**
     * Get collection metadata schema
     * @summary Get collection metadata schema
     * @param {string} address Collection contract address
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMetadataSchema(address: string, options?: any): AxiosPromise<Array<MetadataSchemaProperty>>;
    /**
     * Update metadata schema by name
     * @summary Update metadata schema by name
     * @param {string} address Collection contract address
     * @param {string} name Metadata schema name
     * @param {string} iMXSignature String created by signing wallet address and timestamp
     * @param {string} iMXTimestamp Unix Epoc timestamp
     * @param {MetadataSchemaRequest} metadataSchemaRequest update metadata schema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateMetadataSchemaByName(address: string, name: string, iMXSignature: string, iMXTimestamp: string, metadataSchemaRequest: MetadataSchemaRequest, options?: any): AxiosPromise<SuccessResponse>;
};
/**
 * Request parameters for addMetadataSchemaToCollection operation in MetadataApi.
 * @export
 * @interface MetadataApiAddMetadataSchemaToCollectionRequest
 */
export interface MetadataApiAddMetadataSchemaToCollectionRequest {
    /**
     * Collection contract address
     * @type {string}
     * @memberof MetadataApiAddMetadataSchemaToCollection
     */
    readonly address: string;
    /**
     * String created by signing wallet address and timestamp
     * @type {string}
     * @memberof MetadataApiAddMetadataSchemaToCollection
     */
    readonly iMXSignature: string;
    /**
     * Unix Epoc timestamp
     * @type {string}
     * @memberof MetadataApiAddMetadataSchemaToCollection
     */
    readonly iMXTimestamp: string;
    /**
     * add metadata schema to a collection
     * @type {AddMetadataSchemaToCollectionRequest}
     * @memberof MetadataApiAddMetadataSchemaToCollection
     */
    readonly addMetadataSchemaToCollectionRequest: AddMetadataSchemaToCollectionRequest;
}
/**
 * Request parameters for getMetadataSchema operation in MetadataApi.
 * @export
 * @interface MetadataApiGetMetadataSchemaRequest
 */
export interface MetadataApiGetMetadataSchemaRequest {
    /**
     * Collection contract address
     * @type {string}
     * @memberof MetadataApiGetMetadataSchema
     */
    readonly address: string;
}
/**
 * Request parameters for updateMetadataSchemaByName operation in MetadataApi.
 * @export
 * @interface MetadataApiUpdateMetadataSchemaByNameRequest
 */
export interface MetadataApiUpdateMetadataSchemaByNameRequest {
    /**
     * Collection contract address
     * @type {string}
     * @memberof MetadataApiUpdateMetadataSchemaByName
     */
    readonly address: string;
    /**
     * Metadata schema name
     * @type {string}
     * @memberof MetadataApiUpdateMetadataSchemaByName
     */
    readonly name: string;
    /**
     * String created by signing wallet address and timestamp
     * @type {string}
     * @memberof MetadataApiUpdateMetadataSchemaByName
     */
    readonly iMXSignature: string;
    /**
     * Unix Epoc timestamp
     * @type {string}
     * @memberof MetadataApiUpdateMetadataSchemaByName
     */
    readonly iMXTimestamp: string;
    /**
     * update metadata schema
     * @type {MetadataSchemaRequest}
     * @memberof MetadataApiUpdateMetadataSchemaByName
     */
    readonly metadataSchemaRequest: MetadataSchemaRequest;
}
/**
 * MetadataApi - object-oriented interface
 * @export
 * @class MetadataApi
 * @extends {BaseAPI}
 */
export declare class MetadataApi extends BaseAPI {
    /**
     * Add metadata schema to collection
     * @summary Add metadata schema to collection
     * @param {MetadataApiAddMetadataSchemaToCollectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetadataApi
     */
    addMetadataSchemaToCollection(requestParameters: MetadataApiAddMetadataSchemaToCollectionRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SuccessResponse, any>>;
    /**
     * Get collection metadata schema
     * @summary Get collection metadata schema
     * @param {MetadataApiGetMetadataSchemaRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetadataApi
     */
    getMetadataSchema(requestParameters: MetadataApiGetMetadataSchemaRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<MetadataSchemaProperty[], any>>;
    /**
     * Update metadata schema by name
     * @summary Update metadata schema by name
     * @param {MetadataApiUpdateMetadataSchemaByNameRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetadataApi
     */
    updateMetadataSchemaByName(requestParameters: MetadataApiUpdateMetadataSchemaByNameRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SuccessResponse, any>>;
}

/**
 * Immutable X API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { Collection } from '../models';
import { CollectionFilter } from '../models';
import { CreateCollectionRequest } from '../models';
import { ListCollectionsResponse } from '../models';
import { UpdateCollectionRequest } from '../models';
/**
 * CollectionsApi - axios parameter creator
 * @export
 */
export declare const CollectionsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Create collection
     * @summary Create collection
     * @param {string} iMXSignature String created by signing wallet address and timestamp. See https://docs.x.immutable.com/docs/generate-imx-signature
     * @param {string} iMXTimestamp Unix Epoc timestamp
     * @param {CreateCollectionRequest} createCollectionRequest create a collection
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCollection: (iMXSignature: string, iMXTimestamp: string, createCollectionRequest: CreateCollectionRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get details of a collection at the given address
     * @summary Get details of a collection at the given address
     * @param {string} address Collection contract address
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCollection: (address: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get a list of collection filters
     * @summary Get a list of collection filters
     * @param {string} address Collection contract address
     * @param {number} [pageSize] Page size of the result
     * @param {string} [nextPageToken] Next page token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listCollectionFilters: (address: string, pageSize?: number, nextPageToken?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get a list of collections
     * @summary Get a list of collections
     * @param {number} [pageSize] Page size of the result
     * @param {string} [cursor] Cursor
     * @param {'\"name\"' | '\"address\"' | '\"project_id\"' | '\"created_at\"' | '\"updated_at\"'} [orderBy] Property to sort by
     * @param {string} [direction] Direction to sort (asc/desc)
     * @param {string} [blacklist] List of collections not to be included, separated by commas
     * @param {string} [whitelist] List of collections to be included, separated by commas
     * @param {string} [keyword] Keyword to search in collection name and description
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listCollections: (pageSize?: number, cursor?: string, orderBy?: '\"name\"' | '\"address\"' | '\"project_id\"' | '\"created_at\"' | '\"updated_at\"', direction?: string, blacklist?: string, whitelist?: string, keyword?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update collection
     * @summary Update collection
     * @param {string} address Collection contract address
     * @param {string} iMXSignature String created by signing wallet address and timestamp
     * @param {string} iMXTimestamp Unix Epoc timestamp
     * @param {UpdateCollectionRequest} updateCollectionRequest update a collection
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCollection: (address: string, iMXSignature: string, iMXTimestamp: string, updateCollectionRequest: UpdateCollectionRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * CollectionsApi - functional programming interface
 * @export
 */
export declare const CollectionsApiFp: (configuration?: Configuration) => {
    /**
     * Create collection
     * @summary Create collection
     * @param {string} iMXSignature String created by signing wallet address and timestamp. See https://docs.x.immutable.com/docs/generate-imx-signature
     * @param {string} iMXTimestamp Unix Epoc timestamp
     * @param {CreateCollectionRequest} createCollectionRequest create a collection
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCollection(iMXSignature: string, iMXTimestamp: string, createCollectionRequest: CreateCollectionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Collection>>;
    /**
     * Get details of a collection at the given address
     * @summary Get details of a collection at the given address
     * @param {string} address Collection contract address
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCollection(address: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Collection>>;
    /**
     * Get a list of collection filters
     * @summary Get a list of collection filters
     * @param {string} address Collection contract address
     * @param {number} [pageSize] Page size of the result
     * @param {string} [nextPageToken] Next page token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listCollectionFilters(address: string, pageSize?: number, nextPageToken?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CollectionFilter>>;
    /**
     * Get a list of collections
     * @summary Get a list of collections
     * @param {number} [pageSize] Page size of the result
     * @param {string} [cursor] Cursor
     * @param {'\"name\"' | '\"address\"' | '\"project_id\"' | '\"created_at\"' | '\"updated_at\"'} [orderBy] Property to sort by
     * @param {string} [direction] Direction to sort (asc/desc)
     * @param {string} [blacklist] List of collections not to be included, separated by commas
     * @param {string} [whitelist] List of collections to be included, separated by commas
     * @param {string} [keyword] Keyword to search in collection name and description
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listCollections(pageSize?: number, cursor?: string, orderBy?: '\"name\"' | '\"address\"' | '\"project_id\"' | '\"created_at\"' | '\"updated_at\"', direction?: string, blacklist?: string, whitelist?: string, keyword?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListCollectionsResponse>>;
    /**
     * Update collection
     * @summary Update collection
     * @param {string} address Collection contract address
     * @param {string} iMXSignature String created by signing wallet address and timestamp
     * @param {string} iMXTimestamp Unix Epoc timestamp
     * @param {UpdateCollectionRequest} updateCollectionRequest update a collection
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCollection(address: string, iMXSignature: string, iMXTimestamp: string, updateCollectionRequest: UpdateCollectionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Collection>>;
};
/**
 * CollectionsApi - factory interface
 * @export
 */
export declare const CollectionsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Create collection
     * @summary Create collection
     * @param {string} iMXSignature String created by signing wallet address and timestamp. See https://docs.x.immutable.com/docs/generate-imx-signature
     * @param {string} iMXTimestamp Unix Epoc timestamp
     * @param {CreateCollectionRequest} createCollectionRequest create a collection
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCollection(iMXSignature: string, iMXTimestamp: string, createCollectionRequest: CreateCollectionRequest, options?: any): AxiosPromise<Collection>;
    /**
     * Get details of a collection at the given address
     * @summary Get details of a collection at the given address
     * @param {string} address Collection contract address
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCollection(address: string, options?: any): AxiosPromise<Collection>;
    /**
     * Get a list of collection filters
     * @summary Get a list of collection filters
     * @param {string} address Collection contract address
     * @param {number} [pageSize] Page size of the result
     * @param {string} [nextPageToken] Next page token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listCollectionFilters(address: string, pageSize?: number, nextPageToken?: string, options?: any): AxiosPromise<CollectionFilter>;
    /**
     * Get a list of collections
     * @summary Get a list of collections
     * @param {number} [pageSize] Page size of the result
     * @param {string} [cursor] Cursor
     * @param {'\"name\"' | '\"address\"' | '\"project_id\"' | '\"created_at\"' | '\"updated_at\"'} [orderBy] Property to sort by
     * @param {string} [direction] Direction to sort (asc/desc)
     * @param {string} [blacklist] List of collections not to be included, separated by commas
     * @param {string} [whitelist] List of collections to be included, separated by commas
     * @param {string} [keyword] Keyword to search in collection name and description
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listCollections(pageSize?: number, cursor?: string, orderBy?: '\"name\"' | '\"address\"' | '\"project_id\"' | '\"created_at\"' | '\"updated_at\"', direction?: string, blacklist?: string, whitelist?: string, keyword?: string, options?: any): AxiosPromise<ListCollectionsResponse>;
    /**
     * Update collection
     * @summary Update collection
     * @param {string} address Collection contract address
     * @param {string} iMXSignature String created by signing wallet address and timestamp
     * @param {string} iMXTimestamp Unix Epoc timestamp
     * @param {UpdateCollectionRequest} updateCollectionRequest update a collection
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCollection(address: string, iMXSignature: string, iMXTimestamp: string, updateCollectionRequest: UpdateCollectionRequest, options?: any): AxiosPromise<Collection>;
};
/**
 * Request parameters for createCollection operation in CollectionsApi.
 * @export
 * @interface CollectionsApiCreateCollectionRequest
 */
export interface CollectionsApiCreateCollectionRequest {
    /**
     * String created by signing wallet address and timestamp. See https://docs.x.immutable.com/docs/generate-imx-signature
     * @type {string}
     * @memberof CollectionsApiCreateCollection
     */
    readonly iMXSignature: string;
    /**
     * Unix Epoc timestamp
     * @type {string}
     * @memberof CollectionsApiCreateCollection
     */
    readonly iMXTimestamp: string;
    /**
     * create a collection
     * @type {CreateCollectionRequest}
     * @memberof CollectionsApiCreateCollection
     */
    readonly createCollectionRequest: CreateCollectionRequest;
}
/**
 * Request parameters for getCollection operation in CollectionsApi.
 * @export
 * @interface CollectionsApiGetCollectionRequest
 */
export interface CollectionsApiGetCollectionRequest {
    /**
     * Collection contract address
     * @type {string}
     * @memberof CollectionsApiGetCollection
     */
    readonly address: string;
}
/**
 * Request parameters for listCollectionFilters operation in CollectionsApi.
 * @export
 * @interface CollectionsApiListCollectionFiltersRequest
 */
export interface CollectionsApiListCollectionFiltersRequest {
    /**
     * Collection contract address
     * @type {string}
     * @memberof CollectionsApiListCollectionFilters
     */
    readonly address: string;
    /**
     * Page size of the result
     * @type {number}
     * @memberof CollectionsApiListCollectionFilters
     */
    readonly pageSize?: number;
    /**
     * Next page token
     * @type {string}
     * @memberof CollectionsApiListCollectionFilters
     */
    readonly nextPageToken?: string;
}
/**
 * Request parameters for listCollections operation in CollectionsApi.
 * @export
 * @interface CollectionsApiListCollectionsRequest
 */
export interface CollectionsApiListCollectionsRequest {
    /**
     * Page size of the result
     * @type {number}
     * @memberof CollectionsApiListCollections
     */
    readonly pageSize?: number;
    /**
     * Cursor
     * @type {string}
     * @memberof CollectionsApiListCollections
     */
    readonly cursor?: string;
    /**
     * Property to sort by
     * @type {'\"name\"' | '\"address\"' | '\"project_id\"' | '\"created_at\"' | '\"updated_at\"'}
     * @memberof CollectionsApiListCollections
     */
    readonly orderBy?: '\"name\"' | '\"address\"' | '\"project_id\"' | '\"created_at\"' | '\"updated_at\"';
    /**
     * Direction to sort (asc/desc)
     * @type {string}
     * @memberof CollectionsApiListCollections
     */
    readonly direction?: string;
    /**
     * List of collections not to be included, separated by commas
     * @type {string}
     * @memberof CollectionsApiListCollections
     */
    readonly blacklist?: string;
    /**
     * List of collections to be included, separated by commas
     * @type {string}
     * @memberof CollectionsApiListCollections
     */
    readonly whitelist?: string;
    /**
     * Keyword to search in collection name and description
     * @type {string}
     * @memberof CollectionsApiListCollections
     */
    readonly keyword?: string;
}
/**
 * Request parameters for updateCollection operation in CollectionsApi.
 * @export
 * @interface CollectionsApiUpdateCollectionRequest
 */
export interface CollectionsApiUpdateCollectionRequest {
    /**
     * Collection contract address
     * @type {string}
     * @memberof CollectionsApiUpdateCollection
     */
    readonly address: string;
    /**
     * String created by signing wallet address and timestamp
     * @type {string}
     * @memberof CollectionsApiUpdateCollection
     */
    readonly iMXSignature: string;
    /**
     * Unix Epoc timestamp
     * @type {string}
     * @memberof CollectionsApiUpdateCollection
     */
    readonly iMXTimestamp: string;
    /**
     * update a collection
     * @type {UpdateCollectionRequest}
     * @memberof CollectionsApiUpdateCollection
     */
    readonly updateCollectionRequest: UpdateCollectionRequest;
}
/**
 * CollectionsApi - object-oriented interface
 * @export
 * @class CollectionsApi
 * @extends {BaseAPI}
 */
export declare class CollectionsApi extends BaseAPI {
    /**
     * Create collection
     * @summary Create collection
     * @param {CollectionsApiCreateCollectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionsApi
     */
    createCollection(requestParameters: CollectionsApiCreateCollectionRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Collection, any>>;
    /**
     * Get details of a collection at the given address
     * @summary Get details of a collection at the given address
     * @param {CollectionsApiGetCollectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionsApi
     */
    getCollection(requestParameters: CollectionsApiGetCollectionRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Collection, any>>;
    /**
     * Get a list of collection filters
     * @summary Get a list of collection filters
     * @param {CollectionsApiListCollectionFiltersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionsApi
     */
    listCollectionFilters(requestParameters: CollectionsApiListCollectionFiltersRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CollectionFilter, any>>;
    /**
     * Get a list of collections
     * @summary Get a list of collections
     * @param {CollectionsApiListCollectionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionsApi
     */
    listCollections(requestParameters?: CollectionsApiListCollectionsRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ListCollectionsResponse, any>>;
    /**
     * Update collection
     * @summary Update collection
     * @param {CollectionsApiUpdateCollectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionsApi
     */
    updateCollection(requestParameters: CollectionsApiUpdateCollectionRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Collection, any>>;
}

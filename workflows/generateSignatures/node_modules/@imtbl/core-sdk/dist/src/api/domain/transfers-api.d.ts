/**
 * Immutable X API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { CreateTransferRequest } from '../models';
import { CreateTransferRequestV1 } from '../models';
import { CreateTransferResponse } from '../models';
import { CreateTransferResponseV1 } from '../models';
import { GetSignableTransferRequest } from '../models';
import { GetSignableTransferRequestV1 } from '../models';
import { GetSignableTransferResponse } from '../models';
import { GetSignableTransferResponseV1 } from '../models';
import { ListTransfersResponse } from '../models';
import { Transfer } from '../models';
/**
 * TransfersApi - axios parameter creator
 * @export
 */
export declare const TransfersApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Create a new transfer request
     * @summary Creates a transfer of multiple tokens between two parties
     * @param {string} xImxEthAddress eth address
     * @param {string} xImxEthSignature eth signature
     * @param {CreateTransferRequest} createTransferRequestV2 Create transfer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTransfer: (xImxEthAddress: string, xImxEthSignature: string, createTransferRequestV2: CreateTransferRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Create a new transfer request
     * @summary Creates a transfer of tokens between two parties
     * @param {string} xImxEthAddress eth address
     * @param {string} xImxEthSignature eth signature
     * @param {CreateTransferRequestV1} createTransferRequest Create transfer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTransferV1: (xImxEthAddress: string, xImxEthSignature: string, createTransferRequest: CreateTransferRequestV1, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Gets bulk details of a signable transfer
     * @summary Gets bulk details of a signable transfer
     * @param {GetSignableTransferRequest} getSignableTransferRequestV2 get details of signable transfer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSignableTransfer: (getSignableTransferRequestV2: GetSignableTransferRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Gets details of a signable transfer
     * @summary Gets details of a signable transfer
     * @param {GetSignableTransferRequestV1} getSignableTransferRequest get details of signable transfer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSignableTransferV1: (getSignableTransferRequest: GetSignableTransferRequestV1, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get details of a transfer with the given ID
     * @summary Get details of a transfer with the given ID
     * @param {string} id Transfer ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTransfer: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get a list of transfers
     * @summary Get a list of transfers
     * @param {number} [pageSize] Page size of the result
     * @param {string} [cursor] Cursor
     * @param {'transaction_id' | 'updated_at' | 'created_at' | 'sender_ether_key' | 'receiver_ether_key'} [orderBy] Property to sort by
     * @param {string} [direction] Direction to sort (asc/desc)
     * @param {string} [user] Ethereum address of the user who submitted this transfer
     * @param {string} [receiver] Ethereum address of the user who received this transfer
     * @param {'success' | 'failure'} [status] Status of this transfer
     * @param {string} [minTimestamp] Minimum timestamp for this transfer, in ISO 8601 UTC format. Example: \&#39;2022-05-27T00:10:22Z\&#39;
     * @param {string} [maxTimestamp] Maximum timestamp for this transfer, in ISO 8601 UTC format. Example: \&#39;2022-05-27T00:10:22Z\&#39;
     * @param {string} [tokenType] Token type of the transferred asset
     * @param {string} [tokenId] ERC721 Token ID of the minted asset
     * @param {string} [assetId] Internal IMX ID of the minted asset
     * @param {string} [tokenAddress] Token address of the transferred asset
     * @param {string} [tokenName] Token name of the transferred asset
     * @param {string} [minQuantity] Max quantity for the transferred asset
     * @param {string} [maxQuantity] Max quantity for the transferred asset
     * @param {string} [metadata] JSON-encoded metadata filters for the transferred asset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listTransfers: (pageSize?: number, cursor?: string, orderBy?: 'transaction_id' | 'updated_at' | 'created_at' | 'sender_ether_key' | 'receiver_ether_key', direction?: string, user?: string, receiver?: string, status?: 'success' | 'failure', minTimestamp?: string, maxTimestamp?: string, tokenType?: string, tokenId?: string, assetId?: string, tokenAddress?: string, tokenName?: string, minQuantity?: string, maxQuantity?: string, metadata?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * TransfersApi - functional programming interface
 * @export
 */
export declare const TransfersApiFp: (configuration?: Configuration) => {
    /**
     * Create a new transfer request
     * @summary Creates a transfer of multiple tokens between two parties
     * @param {string} xImxEthAddress eth address
     * @param {string} xImxEthSignature eth signature
     * @param {CreateTransferRequest} createTransferRequestV2 Create transfer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTransfer(xImxEthAddress: string, xImxEthSignature: string, createTransferRequestV2: CreateTransferRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateTransferResponse>>;
    /**
     * Create a new transfer request
     * @summary Creates a transfer of tokens between two parties
     * @param {string} xImxEthAddress eth address
     * @param {string} xImxEthSignature eth signature
     * @param {CreateTransferRequestV1} createTransferRequest Create transfer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTransferV1(xImxEthAddress: string, xImxEthSignature: string, createTransferRequest: CreateTransferRequestV1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateTransferResponseV1>>;
    /**
     * Gets bulk details of a signable transfer
     * @summary Gets bulk details of a signable transfer
     * @param {GetSignableTransferRequest} getSignableTransferRequestV2 get details of signable transfer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSignableTransfer(getSignableTransferRequestV2: GetSignableTransferRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSignableTransferResponse>>;
    /**
     * Gets details of a signable transfer
     * @summary Gets details of a signable transfer
     * @param {GetSignableTransferRequestV1} getSignableTransferRequest get details of signable transfer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSignableTransferV1(getSignableTransferRequest: GetSignableTransferRequestV1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSignableTransferResponseV1>>;
    /**
     * Get details of a transfer with the given ID
     * @summary Get details of a transfer with the given ID
     * @param {string} id Transfer ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTransfer(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Transfer>>;
    /**
     * Get a list of transfers
     * @summary Get a list of transfers
     * @param {number} [pageSize] Page size of the result
     * @param {string} [cursor] Cursor
     * @param {'transaction_id' | 'updated_at' | 'created_at' | 'sender_ether_key' | 'receiver_ether_key'} [orderBy] Property to sort by
     * @param {string} [direction] Direction to sort (asc/desc)
     * @param {string} [user] Ethereum address of the user who submitted this transfer
     * @param {string} [receiver] Ethereum address of the user who received this transfer
     * @param {'success' | 'failure'} [status] Status of this transfer
     * @param {string} [minTimestamp] Minimum timestamp for this transfer, in ISO 8601 UTC format. Example: \&#39;2022-05-27T00:10:22Z\&#39;
     * @param {string} [maxTimestamp] Maximum timestamp for this transfer, in ISO 8601 UTC format. Example: \&#39;2022-05-27T00:10:22Z\&#39;
     * @param {string} [tokenType] Token type of the transferred asset
     * @param {string} [tokenId] ERC721 Token ID of the minted asset
     * @param {string} [assetId] Internal IMX ID of the minted asset
     * @param {string} [tokenAddress] Token address of the transferred asset
     * @param {string} [tokenName] Token name of the transferred asset
     * @param {string} [minQuantity] Max quantity for the transferred asset
     * @param {string} [maxQuantity] Max quantity for the transferred asset
     * @param {string} [metadata] JSON-encoded metadata filters for the transferred asset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listTransfers(pageSize?: number, cursor?: string, orderBy?: 'transaction_id' | 'updated_at' | 'created_at' | 'sender_ether_key' | 'receiver_ether_key', direction?: string, user?: string, receiver?: string, status?: 'success' | 'failure', minTimestamp?: string, maxTimestamp?: string, tokenType?: string, tokenId?: string, assetId?: string, tokenAddress?: string, tokenName?: string, minQuantity?: string, maxQuantity?: string, metadata?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListTransfersResponse>>;
};
/**
 * TransfersApi - factory interface
 * @export
 */
export declare const TransfersApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Create a new transfer request
     * @summary Creates a transfer of multiple tokens between two parties
     * @param {string} xImxEthAddress eth address
     * @param {string} xImxEthSignature eth signature
     * @param {CreateTransferRequest} createTransferRequestV2 Create transfer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTransfer(xImxEthAddress: string, xImxEthSignature: string, createTransferRequestV2: CreateTransferRequest, options?: any): AxiosPromise<CreateTransferResponse>;
    /**
     * Create a new transfer request
     * @summary Creates a transfer of tokens between two parties
     * @param {string} xImxEthAddress eth address
     * @param {string} xImxEthSignature eth signature
     * @param {CreateTransferRequestV1} createTransferRequest Create transfer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTransferV1(xImxEthAddress: string, xImxEthSignature: string, createTransferRequest: CreateTransferRequestV1, options?: any): AxiosPromise<CreateTransferResponseV1>;
    /**
     * Gets bulk details of a signable transfer
     * @summary Gets bulk details of a signable transfer
     * @param {GetSignableTransferRequest} getSignableTransferRequestV2 get details of signable transfer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSignableTransfer(getSignableTransferRequestV2: GetSignableTransferRequest, options?: any): AxiosPromise<GetSignableTransferResponse>;
    /**
     * Gets details of a signable transfer
     * @summary Gets details of a signable transfer
     * @param {GetSignableTransferRequestV1} getSignableTransferRequest get details of signable transfer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSignableTransferV1(getSignableTransferRequest: GetSignableTransferRequestV1, options?: any): AxiosPromise<GetSignableTransferResponseV1>;
    /**
     * Get details of a transfer with the given ID
     * @summary Get details of a transfer with the given ID
     * @param {string} id Transfer ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTransfer(id: string, options?: any): AxiosPromise<Transfer>;
    /**
     * Get a list of transfers
     * @summary Get a list of transfers
     * @param {number} [pageSize] Page size of the result
     * @param {string} [cursor] Cursor
     * @param {'transaction_id' | 'updated_at' | 'created_at' | 'sender_ether_key' | 'receiver_ether_key'} [orderBy] Property to sort by
     * @param {string} [direction] Direction to sort (asc/desc)
     * @param {string} [user] Ethereum address of the user who submitted this transfer
     * @param {string} [receiver] Ethereum address of the user who received this transfer
     * @param {'success' | 'failure'} [status] Status of this transfer
     * @param {string} [minTimestamp] Minimum timestamp for this transfer, in ISO 8601 UTC format. Example: \&#39;2022-05-27T00:10:22Z\&#39;
     * @param {string} [maxTimestamp] Maximum timestamp for this transfer, in ISO 8601 UTC format. Example: \&#39;2022-05-27T00:10:22Z\&#39;
     * @param {string} [tokenType] Token type of the transferred asset
     * @param {string} [tokenId] ERC721 Token ID of the minted asset
     * @param {string} [assetId] Internal IMX ID of the minted asset
     * @param {string} [tokenAddress] Token address of the transferred asset
     * @param {string} [tokenName] Token name of the transferred asset
     * @param {string} [minQuantity] Max quantity for the transferred asset
     * @param {string} [maxQuantity] Max quantity for the transferred asset
     * @param {string} [metadata] JSON-encoded metadata filters for the transferred asset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listTransfers(pageSize?: number, cursor?: string, orderBy?: 'transaction_id' | 'updated_at' | 'created_at' | 'sender_ether_key' | 'receiver_ether_key', direction?: string, user?: string, receiver?: string, status?: 'success' | 'failure', minTimestamp?: string, maxTimestamp?: string, tokenType?: string, tokenId?: string, assetId?: string, tokenAddress?: string, tokenName?: string, minQuantity?: string, maxQuantity?: string, metadata?: string, options?: any): AxiosPromise<ListTransfersResponse>;
};
/**
 * Request parameters for createTransfer operation in TransfersApi.
 * @export
 * @interface TransfersApiCreateTransferRequest
 */
export interface TransfersApiCreateTransferRequest {
    /**
     * eth address
     * @type {string}
     * @memberof TransfersApiCreateTransfer
     */
    readonly xImxEthAddress: string;
    /**
     * eth signature
     * @type {string}
     * @memberof TransfersApiCreateTransfer
     */
    readonly xImxEthSignature: string;
    /**
     * Create transfer
     * @type {CreateTransferRequest}
     * @memberof TransfersApiCreateTransfer
     */
    readonly createTransferRequestV2: CreateTransferRequest;
}
/**
 * Request parameters for createTransferV1 operation in TransfersApi.
 * @export
 * @interface TransfersApiCreateTransferV1Request
 */
export interface TransfersApiCreateTransferV1Request {
    /**
     * eth address
     * @type {string}
     * @memberof TransfersApiCreateTransferV1
     */
    readonly xImxEthAddress: string;
    /**
     * eth signature
     * @type {string}
     * @memberof TransfersApiCreateTransferV1
     */
    readonly xImxEthSignature: string;
    /**
     * Create transfer
     * @type {CreateTransferRequestV1}
     * @memberof TransfersApiCreateTransferV1
     */
    readonly createTransferRequest: CreateTransferRequestV1;
}
/**
 * Request parameters for getSignableTransfer operation in TransfersApi.
 * @export
 * @interface TransfersApiGetSignableTransferRequest
 */
export interface TransfersApiGetSignableTransferRequest {
    /**
     * get details of signable transfer
     * @type {GetSignableTransferRequest}
     * @memberof TransfersApiGetSignableTransfer
     */
    readonly getSignableTransferRequestV2: GetSignableTransferRequest;
}
/**
 * Request parameters for getSignableTransferV1 operation in TransfersApi.
 * @export
 * @interface TransfersApiGetSignableTransferV1Request
 */
export interface TransfersApiGetSignableTransferV1Request {
    /**
     * get details of signable transfer
     * @type {GetSignableTransferRequestV1}
     * @memberof TransfersApiGetSignableTransferV1
     */
    readonly getSignableTransferRequest: GetSignableTransferRequestV1;
}
/**
 * Request parameters for getTransfer operation in TransfersApi.
 * @export
 * @interface TransfersApiGetTransferRequest
 */
export interface TransfersApiGetTransferRequest {
    /**
     * Transfer ID
     * @type {string}
     * @memberof TransfersApiGetTransfer
     */
    readonly id: string;
}
/**
 * Request parameters for listTransfers operation in TransfersApi.
 * @export
 * @interface TransfersApiListTransfersRequest
 */
export interface TransfersApiListTransfersRequest {
    /**
     * Page size of the result
     * @type {number}
     * @memberof TransfersApiListTransfers
     */
    readonly pageSize?: number;
    /**
     * Cursor
     * @type {string}
     * @memberof TransfersApiListTransfers
     */
    readonly cursor?: string;
    /**
     * Property to sort by
     * @type {'transaction_id' | 'updated_at' | 'created_at' | 'sender_ether_key' | 'receiver_ether_key'}
     * @memberof TransfersApiListTransfers
     */
    readonly orderBy?: 'transaction_id' | 'updated_at' | 'created_at' | 'sender_ether_key' | 'receiver_ether_key';
    /**
     * Direction to sort (asc/desc)
     * @type {string}
     * @memberof TransfersApiListTransfers
     */
    readonly direction?: string;
    /**
     * Ethereum address of the user who submitted this transfer
     * @type {string}
     * @memberof TransfersApiListTransfers
     */
    readonly user?: string;
    /**
     * Ethereum address of the user who received this transfer
     * @type {string}
     * @memberof TransfersApiListTransfers
     */
    readonly receiver?: string;
    /**
     * Status of this transfer
     * @type {'success' | 'failure'}
     * @memberof TransfersApiListTransfers
     */
    readonly status?: 'success' | 'failure';
    /**
     * Minimum timestamp for this transfer, in ISO 8601 UTC format. Example: \&#39;2022-05-27T00:10:22Z\&#39;
     * @type {string}
     * @memberof TransfersApiListTransfers
     */
    readonly minTimestamp?: string;
    /**
     * Maximum timestamp for this transfer, in ISO 8601 UTC format. Example: \&#39;2022-05-27T00:10:22Z\&#39;
     * @type {string}
     * @memberof TransfersApiListTransfers
     */
    readonly maxTimestamp?: string;
    /**
     * Token type of the transferred asset
     * @type {string}
     * @memberof TransfersApiListTransfers
     */
    readonly tokenType?: string;
    /**
     * ERC721 Token ID of the minted asset
     * @type {string}
     * @memberof TransfersApiListTransfers
     */
    readonly tokenId?: string;
    /**
     * Internal IMX ID of the minted asset
     * @type {string}
     * @memberof TransfersApiListTransfers
     */
    readonly assetId?: string;
    /**
     * Token address of the transferred asset
     * @type {string}
     * @memberof TransfersApiListTransfers
     */
    readonly tokenAddress?: string;
    /**
     * Token name of the transferred asset
     * @type {string}
     * @memberof TransfersApiListTransfers
     */
    readonly tokenName?: string;
    /**
     * Max quantity for the transferred asset
     * @type {string}
     * @memberof TransfersApiListTransfers
     */
    readonly minQuantity?: string;
    /**
     * Max quantity for the transferred asset
     * @type {string}
     * @memberof TransfersApiListTransfers
     */
    readonly maxQuantity?: string;
    /**
     * JSON-encoded metadata filters for the transferred asset
     * @type {string}
     * @memberof TransfersApiListTransfers
     */
    readonly metadata?: string;
}
/**
 * TransfersApi - object-oriented interface
 * @export
 * @class TransfersApi
 * @extends {BaseAPI}
 */
export declare class TransfersApi extends BaseAPI {
    /**
     * Create a new transfer request
     * @summary Creates a transfer of multiple tokens between two parties
     * @param {TransfersApiCreateTransferRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransfersApi
     */
    createTransfer(requestParameters: TransfersApiCreateTransferRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateTransferResponse, any>>;
    /**
     * Create a new transfer request
     * @summary Creates a transfer of tokens between two parties
     * @param {TransfersApiCreateTransferV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransfersApi
     */
    createTransferV1(requestParameters: TransfersApiCreateTransferV1Request, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateTransferResponseV1, any>>;
    /**
     * Gets bulk details of a signable transfer
     * @summary Gets bulk details of a signable transfer
     * @param {TransfersApiGetSignableTransferRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransfersApi
     */
    getSignableTransfer(requestParameters: TransfersApiGetSignableTransferRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetSignableTransferResponse, any>>;
    /**
     * Gets details of a signable transfer
     * @summary Gets details of a signable transfer
     * @param {TransfersApiGetSignableTransferV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransfersApi
     */
    getSignableTransferV1(requestParameters: TransfersApiGetSignableTransferV1Request, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetSignableTransferResponseV1, any>>;
    /**
     * Get details of a transfer with the given ID
     * @summary Get details of a transfer with the given ID
     * @param {TransfersApiGetTransferRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransfersApi
     */
    getTransfer(requestParameters: TransfersApiGetTransferRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Transfer, any>>;
    /**
     * Get a list of transfers
     * @summary Get a list of transfers
     * @param {TransfersApiListTransfersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransfersApi
     */
    listTransfers(requestParameters?: TransfersApiListTransfersRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ListTransfersResponse, any>>;
}

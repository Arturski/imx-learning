/**
 * Immutable X API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { CancelOrderRequest } from '../models';
import { CancelOrderResponse } from '../models';
import { CreateOrderRequest } from '../models';
import { CreateOrderResponse } from '../models';
import { GetSignableCancelOrderRequest } from '../models';
import { GetSignableCancelOrderResponse } from '../models';
import { GetSignableOrderRequest } from '../models';
import { GetSignableOrderResponse } from '../models';
import { ListOrdersResponse } from '../models';
import { Order } from '../models';
/**
 * OrdersApi - axios parameter creator
 * @export
 */
export declare const OrdersApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Cancel an order
     * @summary Cancel an order
     * @param {string} xImxEthAddress eth address
     * @param {string} xImxEthSignature eth signature
     * @param {string} id Order ID to cancel
     * @param {CancelOrderRequest} cancelOrderRequest cancel an order
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cancelOrder: (xImxEthAddress: string, xImxEthSignature: string, id: string, cancelOrderRequest: CancelOrderRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Create an order
     * @summary Create an order
     * @param {string} xImxEthAddress eth address
     * @param {string} xImxEthSignature eth signature
     * @param {CreateOrderRequest} createOrderRequest create an order
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOrder: (xImxEthAddress: string, xImxEthSignature: string, createOrderRequest: CreateOrderRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get details of an order with the given ID
     * @summary Get details of an order with the given ID
     * @param {string} id Order ID
     * @param {boolean} [includeFees] Set flag to true to include fee body for the order
     * @param {string} [auxiliaryFeePercentages] Comma separated string of fee percentages that are to be paired with auxiliary_fee_recipients
     * @param {string} [auxiliaryFeeRecipients] Comma separated string of fee recipients that are to be paired with auxiliary_fee_percentages
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrder: (id: string, includeFees?: boolean, auxiliaryFeePercentages?: string, auxiliaryFeeRecipients?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get details a signable cancel order
     * @summary Get details a signable cancel order
     * @param {GetSignableCancelOrderRequest} getSignableCancelOrderRequest get a signable cancel order
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSignableCancelOrder: (getSignableCancelOrderRequest: GetSignableCancelOrderRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get a signable order request (V3)
     * @summary Get a signable order request (V3)
     * @param {GetSignableOrderRequest} getSignableOrderRequestV3 get a signable order
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSignableOrder: (getSignableOrderRequestV3: GetSignableOrderRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get a list of orders
     * @summary Get a list of orders
     * @param {number} [pageSize] Page size of the result
     * @param {string} [cursor] Cursor
     * @param {'created_at' | 'expired_at' | 'sell_quantity' | 'buy_quantity' | 'buy_quantity_with_fees' | 'updated_at'} [orderBy] Property to sort by
     * @param {string} [direction] Direction to sort (asc/desc)
     * @param {string} [user] Ethereum address of the user who submitted this order
     * @param {'active' | 'filled' | 'cancelled' | 'expired' | 'inactive'} [status] Status of this order
     * @param {string} [minTimestamp] Minimum created at timestamp for this order, in ISO 8601 UTC format. Example: \&#39;2022-05-27T00:10:22Z\&#39;
     * @param {string} [maxTimestamp] Maximum created at timestamp for this order, in ISO 8601 UTC format. Example: \&#39;2022-05-27T00:10:22Z\&#39;
     * @param {string} [updatedMinTimestamp] Minimum updated at timestamp for this order, in ISO 8601 UTC format. Example: \&#39;2022-05-27T00:10:22Z\&#39;
     * @param {string} [updatedMaxTimestamp] Maximum updated at timestamp for this order, in ISO 8601 UTC format. Example: \&#39;2022-05-27T00:10:22Z\&#39;
     * @param {string} [buyTokenType] Token type of the asset this order buys
     * @param {string} [buyTokenId] ERC721 Token ID of the asset this order buys
     * @param {string} [buyAssetId] Internal IMX ID of the asset this order buys
     * @param {string} [buyTokenAddress] Token address of the asset this order buys
     * @param {string} [buyTokenName] Token name of the asset this order buys
     * @param {string} [buyMinQuantity] Min quantity for the asset this order buys
     * @param {string} [buyMaxQuantity] Max quantity for the asset this order buys
     * @param {string} [buyMetadata] JSON-encoded metadata filters for the asset this order buys
     * @param {string} [sellTokenType] Token type of the asset this order sells
     * @param {string} [sellTokenId] ERC721 Token ID of the asset this order sells
     * @param {string} [sellAssetId] Internal IMX ID of the asset this order sells
     * @param {string} [sellTokenAddress] Token address of the asset this order sells
     * @param {string} [sellTokenName] Token name of the asset this order sells
     * @param {string} [sellMinQuantity] Min quantity for the asset this order sells
     * @param {string} [sellMaxQuantity] Max quantity for the asset this order sells
     * @param {string} [sellMetadata] JSON-encoded metadata filters for the asset this order sells
     * @param {string} [auxiliaryFeePercentages] Comma separated string of fee percentages that are to be paired with auxiliary_fee_recipients
     * @param {string} [auxiliaryFeeRecipients] Comma separated string of fee recipients that are to be paired with auxiliary_fee_percentages
     * @param {boolean} [includeFees] Set flag to true to include fee object for orders
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listOrders: (pageSize?: number, cursor?: string, orderBy?: 'created_at' | 'expired_at' | 'sell_quantity' | 'buy_quantity' | 'buy_quantity_with_fees' | 'updated_at', direction?: string, user?: string, status?: 'active' | 'filled' | 'cancelled' | 'expired' | 'inactive', minTimestamp?: string, maxTimestamp?: string, updatedMinTimestamp?: string, updatedMaxTimestamp?: string, buyTokenType?: string, buyTokenId?: string, buyAssetId?: string, buyTokenAddress?: string, buyTokenName?: string, buyMinQuantity?: string, buyMaxQuantity?: string, buyMetadata?: string, sellTokenType?: string, sellTokenId?: string, sellAssetId?: string, sellTokenAddress?: string, sellTokenName?: string, sellMinQuantity?: string, sellMaxQuantity?: string, sellMetadata?: string, auxiliaryFeePercentages?: string, auxiliaryFeeRecipients?: string, includeFees?: boolean, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * OrdersApi - functional programming interface
 * @export
 */
export declare const OrdersApiFp: (configuration?: Configuration) => {
    /**
     * Cancel an order
     * @summary Cancel an order
     * @param {string} xImxEthAddress eth address
     * @param {string} xImxEthSignature eth signature
     * @param {string} id Order ID to cancel
     * @param {CancelOrderRequest} cancelOrderRequest cancel an order
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cancelOrder(xImxEthAddress: string, xImxEthSignature: string, id: string, cancelOrderRequest: CancelOrderRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CancelOrderResponse>>;
    /**
     * Create an order
     * @summary Create an order
     * @param {string} xImxEthAddress eth address
     * @param {string} xImxEthSignature eth signature
     * @param {CreateOrderRequest} createOrderRequest create an order
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOrder(xImxEthAddress: string, xImxEthSignature: string, createOrderRequest: CreateOrderRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateOrderResponse>>;
    /**
     * Get details of an order with the given ID
     * @summary Get details of an order with the given ID
     * @param {string} id Order ID
     * @param {boolean} [includeFees] Set flag to true to include fee body for the order
     * @param {string} [auxiliaryFeePercentages] Comma separated string of fee percentages that are to be paired with auxiliary_fee_recipients
     * @param {string} [auxiliaryFeeRecipients] Comma separated string of fee recipients that are to be paired with auxiliary_fee_percentages
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrder(id: string, includeFees?: boolean, auxiliaryFeePercentages?: string, auxiliaryFeeRecipients?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Order>>;
    /**
     * Get details a signable cancel order
     * @summary Get details a signable cancel order
     * @param {GetSignableCancelOrderRequest} getSignableCancelOrderRequest get a signable cancel order
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSignableCancelOrder(getSignableCancelOrderRequest: GetSignableCancelOrderRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSignableCancelOrderResponse>>;
    /**
     * Get a signable order request (V3)
     * @summary Get a signable order request (V3)
     * @param {GetSignableOrderRequest} getSignableOrderRequestV3 get a signable order
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSignableOrder(getSignableOrderRequestV3: GetSignableOrderRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSignableOrderResponse>>;
    /**
     * Get a list of orders
     * @summary Get a list of orders
     * @param {number} [pageSize] Page size of the result
     * @param {string} [cursor] Cursor
     * @param {'created_at' | 'expired_at' | 'sell_quantity' | 'buy_quantity' | 'buy_quantity_with_fees' | 'updated_at'} [orderBy] Property to sort by
     * @param {string} [direction] Direction to sort (asc/desc)
     * @param {string} [user] Ethereum address of the user who submitted this order
     * @param {'active' | 'filled' | 'cancelled' | 'expired' | 'inactive'} [status] Status of this order
     * @param {string} [minTimestamp] Minimum created at timestamp for this order, in ISO 8601 UTC format. Example: \&#39;2022-05-27T00:10:22Z\&#39;
     * @param {string} [maxTimestamp] Maximum created at timestamp for this order, in ISO 8601 UTC format. Example: \&#39;2022-05-27T00:10:22Z\&#39;
     * @param {string} [updatedMinTimestamp] Minimum updated at timestamp for this order, in ISO 8601 UTC format. Example: \&#39;2022-05-27T00:10:22Z\&#39;
     * @param {string} [updatedMaxTimestamp] Maximum updated at timestamp for this order, in ISO 8601 UTC format. Example: \&#39;2022-05-27T00:10:22Z\&#39;
     * @param {string} [buyTokenType] Token type of the asset this order buys
     * @param {string} [buyTokenId] ERC721 Token ID of the asset this order buys
     * @param {string} [buyAssetId] Internal IMX ID of the asset this order buys
     * @param {string} [buyTokenAddress] Token address of the asset this order buys
     * @param {string} [buyTokenName] Token name of the asset this order buys
     * @param {string} [buyMinQuantity] Min quantity for the asset this order buys
     * @param {string} [buyMaxQuantity] Max quantity for the asset this order buys
     * @param {string} [buyMetadata] JSON-encoded metadata filters for the asset this order buys
     * @param {string} [sellTokenType] Token type of the asset this order sells
     * @param {string} [sellTokenId] ERC721 Token ID of the asset this order sells
     * @param {string} [sellAssetId] Internal IMX ID of the asset this order sells
     * @param {string} [sellTokenAddress] Token address of the asset this order sells
     * @param {string} [sellTokenName] Token name of the asset this order sells
     * @param {string} [sellMinQuantity] Min quantity for the asset this order sells
     * @param {string} [sellMaxQuantity] Max quantity for the asset this order sells
     * @param {string} [sellMetadata] JSON-encoded metadata filters for the asset this order sells
     * @param {string} [auxiliaryFeePercentages] Comma separated string of fee percentages that are to be paired with auxiliary_fee_recipients
     * @param {string} [auxiliaryFeeRecipients] Comma separated string of fee recipients that are to be paired with auxiliary_fee_percentages
     * @param {boolean} [includeFees] Set flag to true to include fee object for orders
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listOrders(pageSize?: number, cursor?: string, orderBy?: 'created_at' | 'expired_at' | 'sell_quantity' | 'buy_quantity' | 'buy_quantity_with_fees' | 'updated_at', direction?: string, user?: string, status?: 'active' | 'filled' | 'cancelled' | 'expired' | 'inactive', minTimestamp?: string, maxTimestamp?: string, updatedMinTimestamp?: string, updatedMaxTimestamp?: string, buyTokenType?: string, buyTokenId?: string, buyAssetId?: string, buyTokenAddress?: string, buyTokenName?: string, buyMinQuantity?: string, buyMaxQuantity?: string, buyMetadata?: string, sellTokenType?: string, sellTokenId?: string, sellAssetId?: string, sellTokenAddress?: string, sellTokenName?: string, sellMinQuantity?: string, sellMaxQuantity?: string, sellMetadata?: string, auxiliaryFeePercentages?: string, auxiliaryFeeRecipients?: string, includeFees?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListOrdersResponse>>;
};
/**
 * OrdersApi - factory interface
 * @export
 */
export declare const OrdersApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Cancel an order
     * @summary Cancel an order
     * @param {string} xImxEthAddress eth address
     * @param {string} xImxEthSignature eth signature
     * @param {string} id Order ID to cancel
     * @param {CancelOrderRequest} cancelOrderRequest cancel an order
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cancelOrder(xImxEthAddress: string, xImxEthSignature: string, id: string, cancelOrderRequest: CancelOrderRequest, options?: any): AxiosPromise<CancelOrderResponse>;
    /**
     * Create an order
     * @summary Create an order
     * @param {string} xImxEthAddress eth address
     * @param {string} xImxEthSignature eth signature
     * @param {CreateOrderRequest} createOrderRequest create an order
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOrder(xImxEthAddress: string, xImxEthSignature: string, createOrderRequest: CreateOrderRequest, options?: any): AxiosPromise<CreateOrderResponse>;
    /**
     * Get details of an order with the given ID
     * @summary Get details of an order with the given ID
     * @param {string} id Order ID
     * @param {boolean} [includeFees] Set flag to true to include fee body for the order
     * @param {string} [auxiliaryFeePercentages] Comma separated string of fee percentages that are to be paired with auxiliary_fee_recipients
     * @param {string} [auxiliaryFeeRecipients] Comma separated string of fee recipients that are to be paired with auxiliary_fee_percentages
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrder(id: string, includeFees?: boolean, auxiliaryFeePercentages?: string, auxiliaryFeeRecipients?: string, options?: any): AxiosPromise<Order>;
    /**
     * Get details a signable cancel order
     * @summary Get details a signable cancel order
     * @param {GetSignableCancelOrderRequest} getSignableCancelOrderRequest get a signable cancel order
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSignableCancelOrder(getSignableCancelOrderRequest: GetSignableCancelOrderRequest, options?: any): AxiosPromise<GetSignableCancelOrderResponse>;
    /**
     * Get a signable order request (V3)
     * @summary Get a signable order request (V3)
     * @param {GetSignableOrderRequest} getSignableOrderRequestV3 get a signable order
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSignableOrder(getSignableOrderRequestV3: GetSignableOrderRequest, options?: any): AxiosPromise<GetSignableOrderResponse>;
    /**
     * Get a list of orders
     * @summary Get a list of orders
     * @param {number} [pageSize] Page size of the result
     * @param {string} [cursor] Cursor
     * @param {'created_at' | 'expired_at' | 'sell_quantity' | 'buy_quantity' | 'buy_quantity_with_fees' | 'updated_at'} [orderBy] Property to sort by
     * @param {string} [direction] Direction to sort (asc/desc)
     * @param {string} [user] Ethereum address of the user who submitted this order
     * @param {'active' | 'filled' | 'cancelled' | 'expired' | 'inactive'} [status] Status of this order
     * @param {string} [minTimestamp] Minimum created at timestamp for this order, in ISO 8601 UTC format. Example: \&#39;2022-05-27T00:10:22Z\&#39;
     * @param {string} [maxTimestamp] Maximum created at timestamp for this order, in ISO 8601 UTC format. Example: \&#39;2022-05-27T00:10:22Z\&#39;
     * @param {string} [updatedMinTimestamp] Minimum updated at timestamp for this order, in ISO 8601 UTC format. Example: \&#39;2022-05-27T00:10:22Z\&#39;
     * @param {string} [updatedMaxTimestamp] Maximum updated at timestamp for this order, in ISO 8601 UTC format. Example: \&#39;2022-05-27T00:10:22Z\&#39;
     * @param {string} [buyTokenType] Token type of the asset this order buys
     * @param {string} [buyTokenId] ERC721 Token ID of the asset this order buys
     * @param {string} [buyAssetId] Internal IMX ID of the asset this order buys
     * @param {string} [buyTokenAddress] Token address of the asset this order buys
     * @param {string} [buyTokenName] Token name of the asset this order buys
     * @param {string} [buyMinQuantity] Min quantity for the asset this order buys
     * @param {string} [buyMaxQuantity] Max quantity for the asset this order buys
     * @param {string} [buyMetadata] JSON-encoded metadata filters for the asset this order buys
     * @param {string} [sellTokenType] Token type of the asset this order sells
     * @param {string} [sellTokenId] ERC721 Token ID of the asset this order sells
     * @param {string} [sellAssetId] Internal IMX ID of the asset this order sells
     * @param {string} [sellTokenAddress] Token address of the asset this order sells
     * @param {string} [sellTokenName] Token name of the asset this order sells
     * @param {string} [sellMinQuantity] Min quantity for the asset this order sells
     * @param {string} [sellMaxQuantity] Max quantity for the asset this order sells
     * @param {string} [sellMetadata] JSON-encoded metadata filters for the asset this order sells
     * @param {string} [auxiliaryFeePercentages] Comma separated string of fee percentages that are to be paired with auxiliary_fee_recipients
     * @param {string} [auxiliaryFeeRecipients] Comma separated string of fee recipients that are to be paired with auxiliary_fee_percentages
     * @param {boolean} [includeFees] Set flag to true to include fee object for orders
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listOrders(pageSize?: number, cursor?: string, orderBy?: 'created_at' | 'expired_at' | 'sell_quantity' | 'buy_quantity' | 'buy_quantity_with_fees' | 'updated_at', direction?: string, user?: string, status?: 'active' | 'filled' | 'cancelled' | 'expired' | 'inactive', minTimestamp?: string, maxTimestamp?: string, updatedMinTimestamp?: string, updatedMaxTimestamp?: string, buyTokenType?: string, buyTokenId?: string, buyAssetId?: string, buyTokenAddress?: string, buyTokenName?: string, buyMinQuantity?: string, buyMaxQuantity?: string, buyMetadata?: string, sellTokenType?: string, sellTokenId?: string, sellAssetId?: string, sellTokenAddress?: string, sellTokenName?: string, sellMinQuantity?: string, sellMaxQuantity?: string, sellMetadata?: string, auxiliaryFeePercentages?: string, auxiliaryFeeRecipients?: string, includeFees?: boolean, options?: any): AxiosPromise<ListOrdersResponse>;
};
/**
 * Request parameters for cancelOrder operation in OrdersApi.
 * @export
 * @interface OrdersApiCancelOrderRequest
 */
export interface OrdersApiCancelOrderRequest {
    /**
     * eth address
     * @type {string}
     * @memberof OrdersApiCancelOrder
     */
    readonly xImxEthAddress: string;
    /**
     * eth signature
     * @type {string}
     * @memberof OrdersApiCancelOrder
     */
    readonly xImxEthSignature: string;
    /**
     * Order ID to cancel
     * @type {string}
     * @memberof OrdersApiCancelOrder
     */
    readonly id: string;
    /**
     * cancel an order
     * @type {CancelOrderRequest}
     * @memberof OrdersApiCancelOrder
     */
    readonly cancelOrderRequest: CancelOrderRequest;
}
/**
 * Request parameters for createOrder operation in OrdersApi.
 * @export
 * @interface OrdersApiCreateOrderRequest
 */
export interface OrdersApiCreateOrderRequest {
    /**
     * eth address
     * @type {string}
     * @memberof OrdersApiCreateOrder
     */
    readonly xImxEthAddress: string;
    /**
     * eth signature
     * @type {string}
     * @memberof OrdersApiCreateOrder
     */
    readonly xImxEthSignature: string;
    /**
     * create an order
     * @type {CreateOrderRequest}
     * @memberof OrdersApiCreateOrder
     */
    readonly createOrderRequest: CreateOrderRequest;
}
/**
 * Request parameters for getOrder operation in OrdersApi.
 * @export
 * @interface OrdersApiGetOrderRequest
 */
export interface OrdersApiGetOrderRequest {
    /**
     * Order ID
     * @type {string}
     * @memberof OrdersApiGetOrder
     */
    readonly id: string;
    /**
     * Set flag to true to include fee body for the order
     * @type {boolean}
     * @memberof OrdersApiGetOrder
     */
    readonly includeFees?: boolean;
    /**
     * Comma separated string of fee percentages that are to be paired with auxiliary_fee_recipients
     * @type {string}
     * @memberof OrdersApiGetOrder
     */
    readonly auxiliaryFeePercentages?: string;
    /**
     * Comma separated string of fee recipients that are to be paired with auxiliary_fee_percentages
     * @type {string}
     * @memberof OrdersApiGetOrder
     */
    readonly auxiliaryFeeRecipients?: string;
}
/**
 * Request parameters for getSignableCancelOrder operation in OrdersApi.
 * @export
 * @interface OrdersApiGetSignableCancelOrderRequest
 */
export interface OrdersApiGetSignableCancelOrderRequest {
    /**
     * get a signable cancel order
     * @type {GetSignableCancelOrderRequest}
     * @memberof OrdersApiGetSignableCancelOrder
     */
    readonly getSignableCancelOrderRequest: GetSignableCancelOrderRequest;
}
/**
 * Request parameters for getSignableOrder operation in OrdersApi.
 * @export
 * @interface OrdersApiGetSignableOrderRequest
 */
export interface OrdersApiGetSignableOrderRequest {
    /**
     * get a signable order
     * @type {GetSignableOrderRequest}
     * @memberof OrdersApiGetSignableOrder
     */
    readonly getSignableOrderRequestV3: GetSignableOrderRequest;
}
/**
 * Request parameters for listOrders operation in OrdersApi.
 * @export
 * @interface OrdersApiListOrdersRequest
 */
export interface OrdersApiListOrdersRequest {
    /**
     * Page size of the result
     * @type {number}
     * @memberof OrdersApiListOrders
     */
    readonly pageSize?: number;
    /**
     * Cursor
     * @type {string}
     * @memberof OrdersApiListOrders
     */
    readonly cursor?: string;
    /**
     * Property to sort by
     * @type {'created_at' | 'expired_at' | 'sell_quantity' | 'buy_quantity' | 'buy_quantity_with_fees' | 'updated_at'}
     * @memberof OrdersApiListOrders
     */
    readonly orderBy?: 'created_at' | 'expired_at' | 'sell_quantity' | 'buy_quantity' | 'buy_quantity_with_fees' | 'updated_at';
    /**
     * Direction to sort (asc/desc)
     * @type {string}
     * @memberof OrdersApiListOrders
     */
    readonly direction?: string;
    /**
     * Ethereum address of the user who submitted this order
     * @type {string}
     * @memberof OrdersApiListOrders
     */
    readonly user?: string;
    /**
     * Status of this order
     * @type {'active' | 'filled' | 'cancelled' | 'expired' | 'inactive'}
     * @memberof OrdersApiListOrders
     */
    readonly status?: 'active' | 'filled' | 'cancelled' | 'expired' | 'inactive';
    /**
     * Minimum created at timestamp for this order, in ISO 8601 UTC format. Example: \&#39;2022-05-27T00:10:22Z\&#39;
     * @type {string}
     * @memberof OrdersApiListOrders
     */
    readonly minTimestamp?: string;
    /**
     * Maximum created at timestamp for this order, in ISO 8601 UTC format. Example: \&#39;2022-05-27T00:10:22Z\&#39;
     * @type {string}
     * @memberof OrdersApiListOrders
     */
    readonly maxTimestamp?: string;
    /**
     * Minimum updated at timestamp for this order, in ISO 8601 UTC format. Example: \&#39;2022-05-27T00:10:22Z\&#39;
     * @type {string}
     * @memberof OrdersApiListOrders
     */
    readonly updatedMinTimestamp?: string;
    /**
     * Maximum updated at timestamp for this order, in ISO 8601 UTC format. Example: \&#39;2022-05-27T00:10:22Z\&#39;
     * @type {string}
     * @memberof OrdersApiListOrders
     */
    readonly updatedMaxTimestamp?: string;
    /**
     * Token type of the asset this order buys
     * @type {string}
     * @memberof OrdersApiListOrders
     */
    readonly buyTokenType?: string;
    /**
     * ERC721 Token ID of the asset this order buys
     * @type {string}
     * @memberof OrdersApiListOrders
     */
    readonly buyTokenId?: string;
    /**
     * Internal IMX ID of the asset this order buys
     * @type {string}
     * @memberof OrdersApiListOrders
     */
    readonly buyAssetId?: string;
    /**
     * Token address of the asset this order buys
     * @type {string}
     * @memberof OrdersApiListOrders
     */
    readonly buyTokenAddress?: string;
    /**
     * Token name of the asset this order buys
     * @type {string}
     * @memberof OrdersApiListOrders
     */
    readonly buyTokenName?: string;
    /**
     * Min quantity for the asset this order buys
     * @type {string}
     * @memberof OrdersApiListOrders
     */
    readonly buyMinQuantity?: string;
    /**
     * Max quantity for the asset this order buys
     * @type {string}
     * @memberof OrdersApiListOrders
     */
    readonly buyMaxQuantity?: string;
    /**
     * JSON-encoded metadata filters for the asset this order buys
     * @type {string}
     * @memberof OrdersApiListOrders
     */
    readonly buyMetadata?: string;
    /**
     * Token type of the asset this order sells
     * @type {string}
     * @memberof OrdersApiListOrders
     */
    readonly sellTokenType?: string;
    /**
     * ERC721 Token ID of the asset this order sells
     * @type {string}
     * @memberof OrdersApiListOrders
     */
    readonly sellTokenId?: string;
    /**
     * Internal IMX ID of the asset this order sells
     * @type {string}
     * @memberof OrdersApiListOrders
     */
    readonly sellAssetId?: string;
    /**
     * Token address of the asset this order sells
     * @type {string}
     * @memberof OrdersApiListOrders
     */
    readonly sellTokenAddress?: string;
    /**
     * Token name of the asset this order sells
     * @type {string}
     * @memberof OrdersApiListOrders
     */
    readonly sellTokenName?: string;
    /**
     * Min quantity for the asset this order sells
     * @type {string}
     * @memberof OrdersApiListOrders
     */
    readonly sellMinQuantity?: string;
    /**
     * Max quantity for the asset this order sells
     * @type {string}
     * @memberof OrdersApiListOrders
     */
    readonly sellMaxQuantity?: string;
    /**
     * JSON-encoded metadata filters for the asset this order sells
     * @type {string}
     * @memberof OrdersApiListOrders
     */
    readonly sellMetadata?: string;
    /**
     * Comma separated string of fee percentages that are to be paired with auxiliary_fee_recipients
     * @type {string}
     * @memberof OrdersApiListOrders
     */
    readonly auxiliaryFeePercentages?: string;
    /**
     * Comma separated string of fee recipients that are to be paired with auxiliary_fee_percentages
     * @type {string}
     * @memberof OrdersApiListOrders
     */
    readonly auxiliaryFeeRecipients?: string;
    /**
     * Set flag to true to include fee object for orders
     * @type {boolean}
     * @memberof OrdersApiListOrders
     */
    readonly includeFees?: boolean;
}
/**
 * OrdersApi - object-oriented interface
 * @export
 * @class OrdersApi
 * @extends {BaseAPI}
 */
export declare class OrdersApi extends BaseAPI {
    /**
     * Cancel an order
     * @summary Cancel an order
     * @param {OrdersApiCancelOrderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    cancelOrder(requestParameters: OrdersApiCancelOrderRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CancelOrderResponse, any>>;
    /**
     * Create an order
     * @summary Create an order
     * @param {OrdersApiCreateOrderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    createOrder(requestParameters: OrdersApiCreateOrderRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateOrderResponse, any>>;
    /**
     * Get details of an order with the given ID
     * @summary Get details of an order with the given ID
     * @param {OrdersApiGetOrderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    getOrder(requestParameters: OrdersApiGetOrderRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Order, any>>;
    /**
     * Get details a signable cancel order
     * @summary Get details a signable cancel order
     * @param {OrdersApiGetSignableCancelOrderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    getSignableCancelOrder(requestParameters: OrdersApiGetSignableCancelOrderRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetSignableCancelOrderResponse, any>>;
    /**
     * Get a signable order request (V3)
     * @summary Get a signable order request (V3)
     * @param {OrdersApiGetSignableOrderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    getSignableOrder(requestParameters: OrdersApiGetSignableOrderRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetSignableOrderResponse, any>>;
    /**
     * Get a list of orders
     * @summary Get a list of orders
     * @param {OrdersApiListOrdersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    listOrders(requestParameters?: OrdersApiListOrdersRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ListOrdersResponse, any>>;
}

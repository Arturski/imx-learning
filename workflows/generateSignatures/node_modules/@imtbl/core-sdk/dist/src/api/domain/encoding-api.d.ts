/**
 * Immutable X API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { EncodeAssetRequest } from '../models';
import { EncodeAssetResponse } from '../models';
/**
 * EncodingApi - axios parameter creator
 * @export
 */
export declare const EncodingApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Retrieves the Starkex Encoded format for a given asset so that it can be used as parameter for Starkex smart contracts
     * @summary Retrieves the Starkex Encoded format for a given asset
     * @param {string} assetType Asset type to be encoded. (asset/mintable-asset)
     * @param {EncodeAssetRequest} encodeAssetRequest Encode Asset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    encodeAsset: (assetType: string, encodeAssetRequest: EncodeAssetRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * EncodingApi - functional programming interface
 * @export
 */
export declare const EncodingApiFp: (configuration?: Configuration) => {
    /**
     * Retrieves the Starkex Encoded format for a given asset so that it can be used as parameter for Starkex smart contracts
     * @summary Retrieves the Starkex Encoded format for a given asset
     * @param {string} assetType Asset type to be encoded. (asset/mintable-asset)
     * @param {EncodeAssetRequest} encodeAssetRequest Encode Asset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    encodeAsset(assetType: string, encodeAssetRequest: EncodeAssetRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EncodeAssetResponse>>;
};
/**
 * EncodingApi - factory interface
 * @export
 */
export declare const EncodingApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Retrieves the Starkex Encoded format for a given asset so that it can be used as parameter for Starkex smart contracts
     * @summary Retrieves the Starkex Encoded format for a given asset
     * @param {string} assetType Asset type to be encoded. (asset/mintable-asset)
     * @param {EncodeAssetRequest} encodeAssetRequest Encode Asset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    encodeAsset(assetType: string, encodeAssetRequest: EncodeAssetRequest, options?: any): AxiosPromise<EncodeAssetResponse>;
};
/**
 * Request parameters for encodeAsset operation in EncodingApi.
 * @export
 * @interface EncodingApiEncodeAssetRequest
 */
export interface EncodingApiEncodeAssetRequest {
    /**
     * Asset type to be encoded. (asset/mintable-asset)
     * @type {string}
     * @memberof EncodingApiEncodeAsset
     */
    readonly assetType: string;
    /**
     * Encode Asset
     * @type {EncodeAssetRequest}
     * @memberof EncodingApiEncodeAsset
     */
    readonly encodeAssetRequest: EncodeAssetRequest;
}
/**
 * EncodingApi - object-oriented interface
 * @export
 * @class EncodingApi
 * @extends {BaseAPI}
 */
export declare class EncodingApi extends BaseAPI {
    /**
     * Retrieves the Starkex Encoded format for a given asset so that it can be used as parameter for Starkex smart contracts
     * @summary Retrieves the Starkex Encoded format for a given asset
     * @param {EncodingApiEncodeAssetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EncodingApi
     */
    encodeAsset(requestParameters: EncodingApiEncodeAssetRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<EncodeAssetResponse, any>>;
}

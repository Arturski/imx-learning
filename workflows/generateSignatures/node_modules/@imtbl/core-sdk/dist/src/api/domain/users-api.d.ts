/**
 * Immutable X API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { GetSignableRegistrationOffchainResponse } from '../models';
import { GetSignableRegistrationRequest } from '../models';
import { GetSignableRegistrationResponse } from '../models';
import { GetUsersApiResponse } from '../models';
import { RegisterUserRequest } from '../models';
import { RegisterUserResponse } from '../models';
/**
 * UsersApi - axios parameter creator
 * @export
 */
export declare const UsersApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Get operator signature to allow clients to register the user
     * @summary Get operator signature to allow clients to register the user
     * @param {GetSignableRegistrationRequest} getSignableRegistrationRequest Register User
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSignableRegistration: (getSignableRegistrationRequest: GetSignableRegistrationRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get encoded details to allow clients to register the user offchain
     * @summary Get encoded details to allow clients to register the user offchain
     * @param {GetSignableRegistrationRequest} getSignableRegistrationRequest Register User Offchain
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSignableRegistrationOffchain: (getSignableRegistrationRequest: GetSignableRegistrationRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get stark keys for a registered user
     * @summary Get stark keys for a registered user
     * @param {string} user User
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUsers: (user: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Registers a user
     * @summary Registers a user
     * @param {RegisterUserRequest} registerUserRequest Register User
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    registerUser: (registerUserRequest: RegisterUserRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * UsersApi - functional programming interface
 * @export
 */
export declare const UsersApiFp: (configuration?: Configuration) => {
    /**
     * Get operator signature to allow clients to register the user
     * @summary Get operator signature to allow clients to register the user
     * @param {GetSignableRegistrationRequest} getSignableRegistrationRequest Register User
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSignableRegistration(getSignableRegistrationRequest: GetSignableRegistrationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSignableRegistrationResponse>>;
    /**
     * Get encoded details to allow clients to register the user offchain
     * @summary Get encoded details to allow clients to register the user offchain
     * @param {GetSignableRegistrationRequest} getSignableRegistrationRequest Register User Offchain
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSignableRegistrationOffchain(getSignableRegistrationRequest: GetSignableRegistrationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSignableRegistrationOffchainResponse>>;
    /**
     * Get stark keys for a registered user
     * @summary Get stark keys for a registered user
     * @param {string} user User
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUsers(user: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetUsersApiResponse>>;
    /**
     * Registers a user
     * @summary Registers a user
     * @param {RegisterUserRequest} registerUserRequest Register User
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    registerUser(registerUserRequest: RegisterUserRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RegisterUserResponse>>;
};
/**
 * UsersApi - factory interface
 * @export
 */
export declare const UsersApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Get operator signature to allow clients to register the user
     * @summary Get operator signature to allow clients to register the user
     * @param {GetSignableRegistrationRequest} getSignableRegistrationRequest Register User
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSignableRegistration(getSignableRegistrationRequest: GetSignableRegistrationRequest, options?: any): AxiosPromise<GetSignableRegistrationResponse>;
    /**
     * Get encoded details to allow clients to register the user offchain
     * @summary Get encoded details to allow clients to register the user offchain
     * @param {GetSignableRegistrationRequest} getSignableRegistrationRequest Register User Offchain
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSignableRegistrationOffchain(getSignableRegistrationRequest: GetSignableRegistrationRequest, options?: any): AxiosPromise<GetSignableRegistrationOffchainResponse>;
    /**
     * Get stark keys for a registered user
     * @summary Get stark keys for a registered user
     * @param {string} user User
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUsers(user: string, options?: any): AxiosPromise<GetUsersApiResponse>;
    /**
     * Registers a user
     * @summary Registers a user
     * @param {RegisterUserRequest} registerUserRequest Register User
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    registerUser(registerUserRequest: RegisterUserRequest, options?: any): AxiosPromise<RegisterUserResponse>;
};
/**
 * Request parameters for getSignableRegistration operation in UsersApi.
 * @export
 * @interface UsersApiGetSignableRegistrationRequest
 */
export interface UsersApiGetSignableRegistrationRequest {
    /**
     * Register User
     * @type {GetSignableRegistrationRequest}
     * @memberof UsersApiGetSignableRegistration
     */
    readonly getSignableRegistrationRequest: GetSignableRegistrationRequest;
}
/**
 * Request parameters for getSignableRegistrationOffchain operation in UsersApi.
 * @export
 * @interface UsersApiGetSignableRegistrationOffchainRequest
 */
export interface UsersApiGetSignableRegistrationOffchainRequest {
    /**
     * Register User Offchain
     * @type {GetSignableRegistrationRequest}
     * @memberof UsersApiGetSignableRegistrationOffchain
     */
    readonly getSignableRegistrationRequest: GetSignableRegistrationRequest;
}
/**
 * Request parameters for getUsers operation in UsersApi.
 * @export
 * @interface UsersApiGetUsersRequest
 */
export interface UsersApiGetUsersRequest {
    /**
     * User
     * @type {string}
     * @memberof UsersApiGetUsers
     */
    readonly user: string;
}
/**
 * Request parameters for registerUser operation in UsersApi.
 * @export
 * @interface UsersApiRegisterUserRequest
 */
export interface UsersApiRegisterUserRequest {
    /**
     * Register User
     * @type {RegisterUserRequest}
     * @memberof UsersApiRegisterUser
     */
    readonly registerUserRequest: RegisterUserRequest;
}
/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export declare class UsersApi extends BaseAPI {
    /**
     * Get operator signature to allow clients to register the user
     * @summary Get operator signature to allow clients to register the user
     * @param {UsersApiGetSignableRegistrationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    getSignableRegistration(requestParameters: UsersApiGetSignableRegistrationRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetSignableRegistrationResponse, any>>;
    /**
     * Get encoded details to allow clients to register the user offchain
     * @summary Get encoded details to allow clients to register the user offchain
     * @param {UsersApiGetSignableRegistrationOffchainRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    getSignableRegistrationOffchain(requestParameters: UsersApiGetSignableRegistrationOffchainRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetSignableRegistrationOffchainResponse, any>>;
    /**
     * Get stark keys for a registered user
     * @summary Get stark keys for a registered user
     * @param {UsersApiGetUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    getUsers(requestParameters: UsersApiGetUsersRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetUsersApiResponse, any>>;
    /**
     * Registers a user
     * @summary Registers a user
     * @param {UsersApiRegisterUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    registerUser(requestParameters: UsersApiRegisterUserRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<RegisterUserResponse, any>>;
}
